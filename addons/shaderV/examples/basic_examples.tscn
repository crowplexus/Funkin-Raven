[gd_scene load_steps=708 format=3 uid="uid://c0y4dh3a6qrur"]

[ext_resource type="Texture2D" uid="uid://dukgbairam5vc" path="res://addons/shaderV/shaderV_icon.png" id="1"]
[ext_resource type="Script" path="res://addons/shaderV/uv/tilingNoffset.gd" id="2"]
[ext_resource type="Script" path="res://addons/shaderV/uv/pixelate.gd" id="3"]
[ext_resource type="Script" path="res://addons/shaderV/uv/lensDistortion.gd" id="4"]
[ext_resource type="Script" path="res://addons/shaderV/uv/flipUV.gd" id="5"]
[ext_resource type="Script" path="res://addons/shaderV/uv/distortionUV.gd" id="6"]
[ext_resource type="Script" path="res://addons/shaderV/uv/scaleUV.gd" id="7"]
[ext_resource type="Script" path="res://addons/shaderV/uv/sphericalUV.gd" id="8"]
[ext_resource type="Script" path="res://addons/shaderV/uv/rotate.gd" id="9"]
[ext_resource type="Script" path="res://addons/shaderV/uv/tileUV.gd" id="10"]
[ext_resource type="Script" path="res://addons/shaderV/uv/transformUV.gd" id="11"]
[ext_resource type="Script" path="res://addons/shaderV/uv/twirl.gd" id="12"]
[ext_resource type="Script" path="res://addons/shaderV/uv/animated/distortionUVAnimated.gd" id="13"]
[ext_resource type="Script" path="res://addons/shaderV/uv/animated/doodleUV.gd" id="14"]
[ext_resource type="Script" path="res://addons/shaderV/uv/animated/tilingNoffsetAnimated.gd" id="15"]
[ext_resource type="Script" path="res://addons/shaderV/tools/sinTime.gd" id="16"]
[ext_resource type="Script" path="res://addons/shaderV/uv/animated/rotateAnimated.gd" id="17"]
[ext_resource type="Script" path="res://addons/shaderV/tools/random/hash1d.gd" id="18"]
[ext_resource type="Script" path="res://addons/shaderV/uv/animated/swirlUV.gd" id="19"]
[ext_resource type="Script" path="res://addons/shaderV/tools/random/hash2d.gd" id="20"]
[ext_resource type="Script" path="res://addons/shaderV/tools/random/hash2dvector.gd" id="21"]
[ext_resource type="Script" path="res://addons/shaderV/tools/random/randomFloat.gd" id="22"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/BCSAdjustment.gd" id="23"]
[ext_resource type="Script" path="res://addons/shaderV/tools/random/randomGoldNoiseFloat.gd" id="24"]
[ext_resource type="Script" path="res://addons/shaderV/tools/vec2Compose.gd" id="25"]
[ext_resource type="Script" path="res://addons/shaderV/tools/remap.gd" id="26"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/blur/blur9sample.gd" id="27"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/blur/blurCustom.gd" id="28"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/blur/zoomBlur.gd" id="29"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/glow/innerGlow.gd" id="30"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/glow/glowEmpty.gd" id="31"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/glow/innerGlowEmpty.gd" id="32"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/glow/outerGlow.gd" id="33"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/glow/outerGlowEmpty.gd" id="34"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/generate_shapes/chekerboardPattern.gd" id="35"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/generate_shapes/generateCircle2.gd" id="36"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/generate_shapes/generateCircle.gd" id="37"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/generate_shapes/generateRegularNgon.gd" id="39"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/generate_shapes/generateSpiral.gd" id="40"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/generate_shapes/scanLinesSharp.gd" id="41"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/generate_shapes/stripesRandom.gd" id="42"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/generic2d.gd" id="43"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/perlin2d.gd" id="44"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/perlin3d.gd" id="45"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/perlinPeriodic3d.gd" id="46"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/perlin4d.gd" id="47"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/simplex2d.gd" id="48"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/simplex3d.gd" id="49"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/simplex4d.gd" id="50"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/worley2d.gd" id="51"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/worley2x2.gd" id="52"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/worley2x2x2.gd" id="53"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/worley3d.gd" id="54"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/blackNwhite.gd" id="56"]
[ext_resource type="Texture2D" uid="uid://ds4rnuhypjs8a" path="res://addons/shaderV/examples/godot_logo.png" id="57"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/blendAwithB.gd" id="58"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/bloom.gd" id="59"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/chromaticAberration.gd" id="60"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/clamp.gd" id="61"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/colorCorrectionAdjustment.gd" id="62"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/emboss.gd" id="63"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/fireFX.gd" id="64"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/gradient4corners.gd" id="65"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/gradientMapping.gd" id="66"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/grayscale.gd" id="67"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/hue.gd" id="68"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/inverseColor.gd" id="69"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/maskAlpha.gd" id="70"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/posterize.gd" id="71"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/shiftHSV.gd" id="72"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/shineFX.gd" id="73"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/tintRGBA.gd" id="74"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/tonemap.gd" id="75"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/turnCGA4Palette.gd" id="76"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/turnGBPalette.gd" id="77"]
[ext_resource type="Script" path="res://addons/shaderV/tools/TimeScaled.gd" id="78"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/fractal/generic2d_fractal.gd" id="79"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/fractal/perlin2d_fractal.gd" id="80"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/fractal/worley2d_fractal.gd" id="81"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/fractal/simplex2d_fractal.gd" id="82"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/fractal/worley3d_fractal.gd" id="83"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/fractal/perlin3d_fractal.gd" id="84"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/fractal/simplex3d_fractal.gd" id="85"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/fractal/perlin4d_fractal.gd" id="86"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/fractal/simplex4d_fractal.gd" id="87"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/normalFromHeightmap.gd" id="88"]
[ext_resource type="Script" path="res://addons/shaderV/tools/transformCoordinates/cartesianToPolar.gd" id="89"]
[ext_resource type="Script" path="res://addons/shaderV/tools/transformCoordinates/sphericalToCartesian.gd" id="90"]
[ext_resource type="Script" path="res://addons/shaderV/tools/transformCoordinates/cartesianToSpherical.gd" id="91"]
[ext_resource type="Script" path="res://addons/shaderV/tools/transformCoordinates/polarToCartesian.gd" id="92"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/generate_shapes/gridShape.gd" id="93"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/sobelEdge.gd" id="94"]

[sub_resource type="VisualShaderNodeCustom" id="1"]
default_input_values = [1, 0, 2, 0, 3, 0, 4, 0]
initialized = true
script = ExtResource("6")

[sub_resource type="VisualShaderNodeInput" id="2"]
input_name = "uv"

[sub_resource type="VisualShaderNodeTexture" id="3"]
expanded_output_ports = [0]
source = 2

[sub_resource type="VisualShaderNodeFloatConstant" id="4"]
constant = 7.0

[sub_resource type="VisualShaderNodeFloatConstant" id="5"]
constant = 0.1

[sub_resource type="VisualShaderNodeFloatConstant" id="6"]
constant = 5.0

[sub_resource type="VisualShader" id="7"]
code = "shader_type canvas_item;
render_mode blend_mix;



// DistortionUV
#include \"res://addons/shaderV/uv/distortionUV.gdshaderinc\"

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// FloatConstant:5
	float n_out5p0 = 7.000000;


// FloatConstant:7
	float n_out7p0 = 5.000000;


// FloatConstant:6
	float n_out6p0 = 0.100000;


	vec3 n_out2p0;
// DistortionUV:2
	{
		n_out2p0.xy = _distortionUV(vec3(n_out3p0, 0.0).xy, vec2(n_out6p0, n_out6p0), vec2(n_out5p0, n_out7p0));
	}


	vec4 n_out4p0;
// Texture2D:4
	n_out4p0 = texture(TEXTURE, vec2(n_out2p0.xy));
	float n_out4p4 = n_out4p0.a;


// Output:0
	COLOR.rgb = vec3(n_out4p0.xyz);
	COLOR.a = n_out4p4;


}
"
graph_offset = Vector2(-236, -103)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(500, 80)
nodes/fragment/2/node = SubResource("1")
nodes/fragment/2/position = Vector2(60, 80)
nodes/fragment/3/node = SubResource("2")
nodes/fragment/3/position = Vector2(-320, 80)
nodes/fragment/4/node = SubResource("3")
nodes/fragment/4/position = Vector2(240, 60)
nodes/fragment/5/node = SubResource("4")
nodes/fragment/5/position = Vector2(-180, 160)
nodes/fragment/6/node = SubResource("5")
nodes/fragment/6/position = Vector2(-180, 280)
nodes/fragment/7/node = SubResource("6")
nodes/fragment/7/position = Vector2(-180, 220)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 0, 5, 0, 2, 1, 6, 0, 2, 3, 7, 0, 2, 2, 6, 0, 2, 4, 2, 0, 4, 0, 4, 4, 0, 1, 4, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="8"]
shader = SubResource("7")

[sub_resource type="VisualShaderNodeInput" id="9"]
input_name = "uv"

[sub_resource type="VisualShaderNodeTexture" id="10"]
expanded_output_ports = [0]
texture = ExtResource("1")

[sub_resource type="VisualShaderNodeCustom" id="11"]
default_input_values = [1, false, 2, false]
initialized = true
script = ExtResource("5")

[sub_resource type="VisualShaderNodeBooleanConstant" id="12"]
constant = true

[sub_resource type="VisualShaderNodeBooleanConstant" id="13"]
constant = true

[sub_resource type="VisualShader" id="14"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_5;


// FlipUV
#include \"res://addons/shaderV/uv/flipUV.gdshaderinc\"

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// BooleanConstant:8
	bool n_out8p0 = true;


// BooleanConstant:9
	bool n_out9p0 = true;


	vec3 n_out7p0;
// FlipUV:7
	{
		n_out7p0.xy = _flipUV(vec3(n_out3p0, 0.0).xy, vec2(float(n_out8p0), float(n_out9p0)));
	}


// Texture2D:5
	vec4 n_out5p0 = texture(tex_frg_5, vec2(n_out7p0.xy));
	float n_out5p4 = n_out5p0.a;


// Output:0
	COLOR.rgb = vec3(n_out5p0.xyz);
	COLOR.a = n_out5p4;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(500, -20)
nodes/fragment/3/node = SubResource("9")
nodes/fragment/3/position = Vector2(-260, -40)
nodes/fragment/5/node = SubResource("10")
nodes/fragment/5/position = Vector2(240, -40)
nodes/fragment/7/node = SubResource("11")
nodes/fragment/7/position = Vector2(80, -20)
nodes/fragment/8/node = SubResource("12")
nodes/fragment/8/position = Vector2(-120, 40)
nodes/fragment/9/node = SubResource("13")
nodes/fragment/9/position = Vector2(-120, 120)
nodes/fragment/connections = PackedInt32Array(5, 0, 0, 0, 3, 0, 7, 0, 8, 0, 7, 1, 9, 0, 7, 2, 7, 0, 5, 0, 5, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="15"]
shader = SubResource("14")

[sub_resource type="VisualShaderNodeCustom" id="16"]
default_input_values = [1, 1.0]
initialized = true
script = ExtResource("4")

[sub_resource type="VisualShaderNodeFloatConstant" id="17"]
constant = 1.3

[sub_resource type="VisualShader" id="18"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_5;


// LensDistortionUV
#include \"res://addons/shaderV/uv/lensDistortion.gdshaderinc\"

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// FloatConstant:8
	float n_out8p0 = 1.300000;


	vec3 n_out7p0;
// LensDistortionUV:7
	{
		n_out7p0.xy = _lensDistortionUV(vec3(n_out3p0, 0.0).xy, n_out8p0);
	}


// Texture2D:5
	vec4 n_out5p0 = texture(tex_frg_5, vec2(n_out7p0.xy));
	float n_out5p4 = n_out5p0.a;


// Output:0
	COLOR.rgb = vec3(n_out5p0.xyz);
	COLOR.a = n_out5p4;


}
"
graph_offset = Vector2(26, -66)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(700, 40)
nodes/fragment/3/node = SubResource("9")
nodes/fragment/3/position = Vector2(-140, 0)
nodes/fragment/5/node = SubResource("10")
nodes/fragment/5/position = Vector2(440, 20)
nodes/fragment/7/node = SubResource("16")
nodes/fragment/7/position = Vector2(200, 40)
nodes/fragment/8/node = SubResource("17")
nodes/fragment/8/position = Vector2(0, 80)
nodes/fragment/connections = PackedInt32Array(5, 0, 0, 0, 3, 0, 7, 0, 8, 0, 7, 1, 7, 0, 5, 0, 5, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="19"]
shader = SubResource("18")

[sub_resource type="VisualShaderNodeCustom" id="20"]
default_input_values = [1, Vector3(64, 64, 0)]
initialized = true
script = ExtResource("3")

[sub_resource type="VisualShaderNodeVec3Constant" id="21"]
constant = Vector3(16, 16, 0)

[sub_resource type="VisualShaderNodeFloatConstant" id="22"]

[sub_resource type="VisualShader" id="23"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_5;


// PixelateUV
#include \"res://addons/shaderV/uv/pixelate.gdshaderinc\"

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// Vector3Constant:8
	vec3 n_out8p0 = vec3(16.000000, 16.000000, 0.000000);


	vec3 n_out7p0;
// PixelateUV:7
	{
		n_out7p0.xy = _pixelateUV(vec3(n_out3p0, 0.0).xy, n_out8p0.xy);
	}


// FloatConstant:9
	float n_out9p0 = 0.000000;


// Texture2D:5
	vec4 n_out5p0 = textureLod(tex_frg_5, vec2(n_out7p0.xy), n_out9p0);
	float n_out5p4 = n_out5p0.a;


// Output:0
	COLOR.rgb = vec3(n_out5p0.xyz);
	COLOR.a = n_out5p4;


}
"
graph_offset = Vector2(-56.7934, -122.455)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(640, 20)
nodes/fragment/3/node = SubResource("9")
nodes/fragment/3/position = Vector2(-240, -60)
nodes/fragment/5/node = SubResource("10")
nodes/fragment/5/position = Vector2(340, -20)
nodes/fragment/7/node = SubResource("20")
nodes/fragment/7/position = Vector2(140, -20)
nodes/fragment/8/node = SubResource("21")
nodes/fragment/8/position = Vector2(-240, 20)
nodes/fragment/9/node = SubResource("22")
nodes/fragment/9/position = Vector2(120, 100)
nodes/fragment/connections = PackedInt32Array(5, 0, 0, 0, 8, 0, 7, 1, 3, 0, 7, 0, 9, 0, 5, 1, 7, 0, 5, 0, 5, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="24"]
shader = SubResource("23")

[sub_resource type="VisualShaderNodeCustom" id="25"]
default_input_values = [1, 0.0, 2, Vector3(0.5, 0.5, 0)]
initialized = true
script = ExtResource("9")

[sub_resource type="VisualShaderNodeFloatConstant" id="26"]
constant = 0.4

[sub_resource type="VisualShaderNodeVec3Constant" id="27"]
constant = Vector3(0.5, 0.5, 0)

[sub_resource type="VisualShader" id="28"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_5;


// RotateUV
#include \"res://addons/shaderV/uv/rotate.gdshaderinc\"

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// FloatConstant:8
	float n_out8p0 = 0.400000;


// Vector3Constant:9
	vec3 n_out9p0 = vec3(0.500000, 0.500000, 0.000000);


	vec3 n_out7p0;
// RotateUV:7
	{
		n_out7p0 = _rotateUV(vec3(n_out3p0, 0.0), n_out9p0.xy, n_out8p0);
	}


// Texture2D:5
	vec4 n_out5p0 = texture(tex_frg_5, vec2(n_out7p0.xy));
	float n_out5p4 = n_out5p0.a;


// Output:0
	COLOR.rgb = vec3(n_out5p0.xyz);
	COLOR.a = n_out5p4;


}
"
graph_offset = Vector2(-232.618, -80.4463)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(620, 0)
nodes/fragment/3/node = SubResource("9")
nodes/fragment/3/position = Vector2(-180, -40)
nodes/fragment/5/node = SubResource("10")
nodes/fragment/5/position = Vector2(360, -20)
nodes/fragment/7/node = SubResource("25")
nodes/fragment/7/position = Vector2(180, -20)
nodes/fragment/8/node = SubResource("26")
nodes/fragment/8/position = Vector2(-40, 40)
nodes/fragment/9/node = SubResource("27")
nodes/fragment/9/position = Vector2(-200, 120)
nodes/fragment/connections = PackedInt32Array(5, 0, 0, 0, 3, 0, 7, 0, 8, 0, 7, 1, 9, 0, 7, 2, 7, 0, 5, 0, 5, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="29"]
shader = SubResource("28")

[sub_resource type="VisualShaderNodeVec3Constant" id="30"]
constant = Vector3(2, 3, 0)

[sub_resource type="VisualShaderNodeVec3Constant" id="31"]
constant = Vector3(0.5, 0.5, 0)

[sub_resource type="VisualShaderNodeCustom" id="32"]
default_input_values = [1, Vector3(1, 1, 0), 2, Vector3(0.5, 0.5, 0)]
initialized = true
script = ExtResource("7")

[sub_resource type="VisualShader" id="33"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_5;


// ScaleUV
#include \"res://addons/shaderV/uv/scaleUV.gdshaderinc\"

void fragment() {
// Vector3Constant:10
	vec3 n_out10p0 = vec3(2.000000, 3.000000, 0.000000);


// Vector3Constant:11
	vec3 n_out11p0 = vec3(0.500000, 0.500000, 0.000000);


	vec3 n_out9p0;
// ScaleUV:9
	{
		n_out9p0.xy = _scaleUV(UV.xy, n_out10p0.xy, n_out11p0.xy);
	}


// Texture2D:5
	vec4 n_out5p0 = texture(tex_frg_5, vec2(n_out9p0.xy));
	float n_out5p4 = n_out5p0.a;


// Output:0
	COLOR.rgb = vec3(n_out5p0.xyz);
	COLOR.a = n_out5p4;


}
"
graph_offset = Vector2(-200.86, -79.7994)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(600, 0)
nodes/fragment/5/node = SubResource("10")
nodes/fragment/5/position = Vector2(400, 0)
nodes/fragment/9/node = SubResource("32")
nodes/fragment/9/position = Vector2(180, 0)
nodes/fragment/10/node = SubResource("30")
nodes/fragment/10/position = Vector2(-220, 20)
nodes/fragment/11/node = SubResource("31")
nodes/fragment/11/position = Vector2(-220, 140)
nodes/fragment/connections = PackedInt32Array(5, 0, 0, 0, 10, 0, 9, 1, 11, 0, 9, 2, 9, 0, 5, 0, 5, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="34"]
shader = SubResource("33")

[sub_resource type="VisualShaderNodeCustom" id="35"]
default_input_values = [1, Vector3(1, 1, 0), 2, Vector3(0, 0, 0), 3, Vector3(0.5, 0.5, 0), 4, Vector3(0, 0, 0)]
initialized = true
script = ExtResource("8")

[sub_resource type="VisualShaderNodeVec3Constant" id="36"]
constant = Vector3(1, 1, 0)

[sub_resource type="VisualShaderNodeVec3Constant" id="37"]

[sub_resource type="VisualShaderNodeVec3Constant" id="38"]
constant = Vector3(0.5, 0.5, 0)

[sub_resource type="VisualShaderNodeVec3Constant" id="39"]

[sub_resource type="VisualShader" id="40"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_5;


// SphericalUV
#include \"res://addons/shaderV/uv/sphericalUV.gdshaderinc\"

void fragment() {
// Vector3Constant:13
	vec3 n_out13p0 = vec3(1.000000, 1.000000, 0.000000);


// Vector3Constant:14
	vec3 n_out14p0 = vec3(0.000000, 0.000000, 0.000000);


// Vector3Constant:15
	vec3 n_out15p0 = vec3(0.500000, 0.500000, 0.000000);


// Vector3Constant:16
	vec3 n_out16p0 = vec3(0.000000, 0.000000, 0.000000);


	vec3 n_out12p0;
// SphericalUV:12
	{
		n_out12p0.xy = _sphericalUV(UV.xy, n_out15p0.xy, n_out13p0.xy, n_out14p0.xy, n_out16p0.xy);
	}


// Texture2D:5
	vec4 n_out5p0 = texture(tex_frg_5, vec2(n_out12p0.xy));
	float n_out5p4 = n_out5p0.a;


// Output:0
	COLOR.rgb = vec3(n_out5p0.xyz);
	COLOR.a = n_out5p4;


}
"
graph_offset = Vector2(-207.557, -76.182)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(660, 20)
nodes/fragment/5/node = SubResource("10")
nodes/fragment/5/position = Vector2(400, 0)
nodes/fragment/12/node = SubResource("35")
nodes/fragment/12/position = Vector2(200, 0)
nodes/fragment/13/node = SubResource("36")
nodes/fragment/13/position = Vector2(-200, -100)
nodes/fragment/14/node = SubResource("37")
nodes/fragment/14/position = Vector2(-200, 0)
nodes/fragment/15/node = SubResource("38")
nodes/fragment/15/position = Vector2(-200, 100)
nodes/fragment/16/node = SubResource("39")
nodes/fragment/16/position = Vector2(-200, 200)
nodes/fragment/connections = PackedInt32Array(5, 0, 0, 0, 13, 0, 12, 1, 14, 0, 12, 2, 15, 0, 12, 3, 16, 0, 12, 4, 12, 0, 5, 0, 5, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="41"]
shader = SubResource("40")

[sub_resource type="VisualShaderNodeCustom" id="42"]
default_input_values = [1, 2.0, 2, 2.0, 3, 0.0]
initialized = true
script = ExtResource("10")

[sub_resource type="VisualShaderNodeFloatConstant" id="43"]

[sub_resource type="VisualShaderNodeFloatConstant" id="44"]
constant = 2.0

[sub_resource type="VisualShaderNodeFloatConstant" id="45"]
constant = 2.0

[sub_resource type="VisualShader" id="46"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_5;


// TileUV
#include \"res://addons/shaderV/uv/tileUV.gdshaderinc\"

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// FloatConstant:15
	float n_out15p0 = 2.000000;


// FloatConstant:16
	float n_out16p0 = 2.000000;


// FloatConstant:14
	float n_out14p0 = 0.000000;


	vec3 n_out13p0;
// TileUV:13
	{
		n_out13p0.xy = _tileMapUV(vec3(n_out3p0, 0.0).xy, n_out15p0, n_out16p0, n_out14p0);
	}


// Texture2D:5
	vec4 n_out5p0 = texture(tex_frg_5, vec2(n_out13p0.xy));
	float n_out5p4 = n_out5p0.a;


// Output:0
	COLOR.rgb = vec3(n_out5p0.xyz);
	COLOR.a = n_out5p4;


}
"
graph_offset = Vector2(-140.949, -69.3822)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(660, 40)
nodes/fragment/3/node = SubResource("9")
nodes/fragment/3/position = Vector2(-180, -80)
nodes/fragment/5/node = SubResource("10")
nodes/fragment/5/position = Vector2(400, 0)
nodes/fragment/13/node = SubResource("42")
nodes/fragment/13/position = Vector2(200, 0)
nodes/fragment/14/node = SubResource("43")
nodes/fragment/14/position = Vector2(-40, 160)
nodes/fragment/15/node = SubResource("44")
nodes/fragment/15/position = Vector2(-40, 0)
nodes/fragment/16/node = SubResource("45")
nodes/fragment/16/position = Vector2(-40, 80)
nodes/fragment/connections = PackedInt32Array(5, 0, 0, 0, 3, 0, 13, 0, 14, 0, 13, 3, 15, 0, 13, 1, 16, 0, 13, 2, 13, 0, 5, 0, 5, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="47"]
shader = SubResource("46")

[sub_resource type="VisualShaderNodeCustom" id="48"]
default_input_values = [1, Vector3(0, 0, 0)]
initialized = true
script = ExtResource("2")

[sub_resource type="VisualShaderNodeFloatConstant" id="49"]
constant = 0.2

[sub_resource type="VisualShader" id="50"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_5;


// TilingAndOffsetUV
#include \"res://addons/shaderV/uv/tilingNoffset.gdshaderinc\"

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// FloatConstant:18
	float n_out18p0 = 0.200000;


	vec3 n_out17p0;
// TilingAndOffsetUV:17
	{
		n_out17p0 = vec3(_tiling_and_offset(vec3(n_out3p0, 0.0).xy, vec3(n_out18p0).xy), 0);
	}


// Texture2D:5
	vec4 n_out5p0 = texture(tex_frg_5, vec2(n_out17p0.xy));
	float n_out5p4 = n_out5p0.a;


// Output:0
	COLOR.rgb = vec3(n_out5p0.xyz);
	COLOR.a = n_out5p4;


}
"
graph_offset = Vector2(-110, -126)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(660, 40)
nodes/fragment/3/node = SubResource("9")
nodes/fragment/3/position = Vector2(-180, -40)
nodes/fragment/5/node = SubResource("10")
nodes/fragment/5/position = Vector2(400, 0)
nodes/fragment/17/node = SubResource("48")
nodes/fragment/17/position = Vector2(180, 0)
nodes/fragment/18/node = SubResource("49")
nodes/fragment/18/position = Vector2(-40, 80)
nodes/fragment/connections = PackedInt32Array(5, 0, 0, 0, 18, 0, 17, 1, 3, 0, 17, 0, 17, 0, 5, 0, 5, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="51"]
shader = SubResource("50")

[sub_resource type="VisualShaderNodeFloatConstant" id="52"]
constant = 0.2

[sub_resource type="VisualShaderNodeCustom" id="53"]
default_input_values = [1, Vector3(0, 0, 0), 2, Vector3(1, 1, 0), 3, Vector3(0.5, 0.5, 0), 4, 0, 5, Vector3(0.5, 0.5, 0)]
initialized = true
script = ExtResource("11")

[sub_resource type="VisualShaderNodeVec3Constant" id="54"]
constant = Vector3(0.1, 0.1, 0)

[sub_resource type="VisualShaderNodeVec3Constant" id="55"]
constant = Vector3(2, 2, 0)

[sub_resource type="VisualShaderNodeVec3Constant" id="56"]
constant = Vector3(0.5, 0.5, 0)

[sub_resource type="VisualShaderNodeVec3Constant" id="57"]
constant = Vector3(0.5, 0.5, 0)

[sub_resource type="VisualShader" id="58"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_5;


// TransformUV
#include \"res://addons/shaderV/uv/transformUV.gdshaderinc\"

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// Vector3Constant:19
	vec3 n_out19p0 = vec3(0.100000, 0.100000, 0.000000);


// Vector3Constant:20
	vec3 n_out20p0 = vec3(2.000000, 2.000000, 0.000000);


// Vector3Constant:22
	vec3 n_out22p0 = vec3(0.500000, 0.500000, 0.000000);


// FloatConstant:15
	float n_out15p0 = 0.200000;


// Vector3Constant:21
	vec3 n_out21p0 = vec3(0.500000, 0.500000, 0.000000);


	vec3 n_out18p0;
// TransformUV:18
	{
		n_out18p0.xy = _transformUV(vec3(n_out3p0, 0.0).xy, n_out20p0.xy, n_out22p0.xy, n_out19p0.xy, n_out15p0, n_out21p0.xy);
	}


// Texture2D:5
	vec4 n_out5p0 = texture(tex_frg_5, vec2(n_out18p0.xy));
	float n_out5p4 = n_out5p0.a;


// Output:0
	COLOR.rgb = vec3(n_out5p0.xyz);
	COLOR.a = n_out5p4;


}
"
graph_offset = Vector2(-225.266, -106.044)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(600, 20)
nodes/fragment/3/node = SubResource("9")
nodes/fragment/3/position = Vector2(-300, -240)
nodes/fragment/5/node = SubResource("10")
nodes/fragment/5/position = Vector2(340, -20)
nodes/fragment/15/node = SubResource("52")
nodes/fragment/15/position = Vector2(-300, 140)
nodes/fragment/18/node = SubResource("53")
nodes/fragment/18/position = Vector2(120, -20)
nodes/fragment/19/node = SubResource("54")
nodes/fragment/19/position = Vector2(-300, -160)
nodes/fragment/20/node = SubResource("55")
nodes/fragment/20/position = Vector2(-300, -60)
nodes/fragment/21/node = SubResource("56")
nodes/fragment/21/position = Vector2(-300, 220)
nodes/fragment/22/node = SubResource("57")
nodes/fragment/22/position = Vector2(-300, 40)
nodes/fragment/connections = PackedInt32Array(5, 0, 0, 0, 3, 0, 18, 0, 19, 0, 18, 1, 20, 0, 18, 2, 22, 0, 18, 3, 15, 0, 18, 4, 21, 0, 18, 5, 18, 0, 5, 0, 5, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="59"]
shader = SubResource("58")

[sub_resource type="VisualShaderNodeCustom" id="60"]
default_input_values = [1, 1.0, 2, Vector3(0.5, 0.5, 0)]
initialized = true
script = ExtResource("12")

[sub_resource type="VisualShaderNodeVec3Constant" id="61"]
constant = Vector3(0.5, 0.5, 0)

[sub_resource type="VisualShaderNodeFloatConstant" id="62"]
constant = 1.0

[sub_resource type="VisualShader" id="63"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_5;


// TwirlUV
#include \"res://addons/shaderV/uv/twirl.gdshaderinc\"

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// FloatConstant:25
	float n_out25p0 = 1.000000;


// Vector3Constant:24
	vec3 n_out24p0 = vec3(0.500000, 0.500000, 0.000000);


	vec3 n_out23p0;
// TwirlUV:23
	{
		n_out23p0 = _twirlUVFunc(vec3(n_out3p0, 0.0).xy, n_out24p0.xy, n_out25p0);
	}


// Texture2D:5
	vec4 n_out5p0 = texture(tex_frg_5, vec2(n_out23p0.xy));
	float n_out5p4 = n_out5p0.a;


// Output:0
	COLOR.rgb = vec3(n_out5p0.xyz);
	COLOR.a = n_out5p4;


}
"
graph_offset = Vector2(-187.876, -150.917)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(580, 40)
nodes/fragment/3/node = SubResource("9")
nodes/fragment/3/position = Vector2(-260, -100)
nodes/fragment/5/node = SubResource("10")
nodes/fragment/5/position = Vector2(320, -20)
nodes/fragment/23/node = SubResource("60")
nodes/fragment/23/position = Vector2(100, -20)
nodes/fragment/24/node = SubResource("61")
nodes/fragment/24/position = Vector2(-260, 60)
nodes/fragment/25/node = SubResource("62")
nodes/fragment/25/position = Vector2(-120, -20)
nodes/fragment/connections = PackedInt32Array(5, 0, 0, 0, 3, 0, 23, 0, 24, 0, 23, 2, 25, 0, 23, 1, 23, 0, 5, 0, 5, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="64"]
shader = SubResource("63")

[sub_resource type="VisualShaderNodeCustom" id="65"]
default_input_values = [1, 0, 2, 0, 3, 0, 4, 0, 5, 1, 6, 0]
initialized = true
script = ExtResource("13")

[sub_resource type="VisualShaderNodeInput" id="66"]
input_name = "time"

[sub_resource type="VisualShaderNodeFloatConstant" id="67"]
constant = 5.0

[sub_resource type="VisualShaderNodeFloatConstant" id="68"]
constant = -0.2

[sub_resource type="VisualShaderNodeFloatConstant" id="69"]
constant = 0.01

[sub_resource type="VisualShaderNodeFloatConstant" id="70"]
constant = 1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="71"]
constant = 5.0

[sub_resource type="VisualShader" id="72"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_5;


// DistortionUVAnimated
#include \"res://addons/shaderV/uv/animated/distortionUVAnimated.gdshaderinc\"

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// FloatConstant:26
	float n_out26p0 = 5.000000;


// FloatConstant:30
	float n_out30p0 = 5.000000;


// FloatConstant:27
	float n_out27p0 = -0.200000;


// FloatConstant:28
	float n_out28p0 = 0.010000;


// FloatConstant:29
	float n_out29p0 = 1.000000;


// Input:25
	float n_out25p0 = TIME;


	vec3 n_out24p0;
// DistortionUVAnimated:24
	{
		n_out24p0.xy = _distortionUVAnimatedFunc(vec3(n_out3p0, 0.0).xy, n_out27p0, n_out28p0, n_out26p0, n_out30p0, n_out29p0, n_out25p0);
	}


// Texture2D:5
	vec4 n_out5p0 = texture(tex_frg_5, vec2(n_out24p0.xy));
	float n_out5p4 = n_out5p0.a;


// Output:0
	COLOR.rgb = vec3(n_out5p0.xyz);
	COLOR.a = n_out5p4;


}
"
graph_offset = Vector2(35.1999, -72.2201)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(580, 40)
nodes/fragment/3/node = SubResource("9")
nodes/fragment/3/position = Vector2(-320, -200)
nodes/fragment/5/node = SubResource("10")
nodes/fragment/5/position = Vector2(320, -20)
nodes/fragment/24/node = SubResource("65")
nodes/fragment/24/position = Vector2(60, -20)
nodes/fragment/25/node = SubResource("66")
nodes/fragment/25/position = Vector2(-300, 300)
nodes/fragment/26/node = SubResource("67")
nodes/fragment/26/position = Vector2(-180, -120)
nodes/fragment/27/node = SubResource("68")
nodes/fragment/27/position = Vector2(-180, 40)
nodes/fragment/28/node = SubResource("69")
nodes/fragment/28/position = Vector2(-180, 120)
nodes/fragment/29/node = SubResource("70")
nodes/fragment/29/position = Vector2(-180, 200)
nodes/fragment/30/node = SubResource("71")
nodes/fragment/30/position = Vector2(-180, -40)
nodes/fragment/connections = PackedInt32Array(5, 0, 0, 0, 3, 0, 24, 0, 25, 0, 24, 6, 26, 0, 24, 1, 29, 0, 24, 5, 28, 0, 24, 4, 27, 0, 24, 3, 30, 0, 24, 2, 24, 0, 5, 0, 5, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="73"]
shader = SubResource("72")

[sub_resource type="VisualShaderNodeFloatConstant" id="74"]
constant = 0.7

[sub_resource type="VisualShaderNodeFloatConstant" id="75"]
constant = 0.065

[sub_resource type="VisualShaderNodeCustom" id="76"]
default_input_values = [1, 0.5, 2, 4.0, 3, 0.7, 4, 0.065, 5, 0]
initialized = true
script = ExtResource("14")

[sub_resource type="VisualShaderNodeInput" id="77"]
input_name = "time"

[sub_resource type="VisualShaderNodeFloatConstant" id="78"]
constant = 0.5

[sub_resource type="VisualShaderNodeFloatConstant" id="79"]
constant = 4.0

[sub_resource type="VisualShader" id="80"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_5;


// DoodleUV
#include \"res://addons/shaderV/uv/animated/doodleUV.gdshaderinc\"

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// FloatConstant:8
	float n_out8p0 = 0.500000;


// FloatConstant:9
	float n_out9p0 = 4.000000;


// FloatConstant:10
	float n_out10p0 = 0.700000;


// FloatConstant:11
	float n_out11p0 = 0.065000;


// Input:7
	float n_out7p0 = TIME;


	vec3 n_out12p0;
// DoodleUV:12
	{
		n_out12p0.xy = _doodleUVFunc(vec3(n_out3p0, 0.0).xy, n_out11p0, n_out7p0, n_out8p0, int(n_out9p0), n_out10p0);
	}


// Texture2D:5
	vec4 n_out5p0 = texture(tex_frg_5, vec2(n_out12p0.xy));
	float n_out5p4 = n_out5p0.a;


// Output:0
	COLOR.rgb = vec3(n_out5p0.xyz);
	COLOR.a = n_out5p4;


}
"
graph_offset = Vector2(114.429, -71.7107)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(600, 60)
nodes/fragment/3/node = SubResource("9")
nodes/fragment/3/position = Vector2(-260, -160)
nodes/fragment/5/node = SubResource("10")
nodes/fragment/5/position = Vector2(340, 0)
nodes/fragment/7/node = SubResource("77")
nodes/fragment/7/position = Vector2(-240, 240)
nodes/fragment/8/node = SubResource("78")
nodes/fragment/8/position = Vector2(-120, -80)
nodes/fragment/9/node = SubResource("79")
nodes/fragment/9/position = Vector2(-120, 0)
nodes/fragment/10/node = SubResource("74")
nodes/fragment/10/position = Vector2(-120, 80)
nodes/fragment/11/node = SubResource("75")
nodes/fragment/11/position = Vector2(-120, 160)
nodes/fragment/12/node = SubResource("76")
nodes/fragment/12/position = Vector2(160, 0)
nodes/fragment/connections = PackedInt32Array(5, 0, 0, 0, 3, 0, 12, 0, 8, 0, 12, 1, 9, 0, 12, 2, 10, 0, 12, 3, 11, 0, 12, 4, 7, 0, 12, 5, 12, 0, 5, 0, 5, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="81"]
shader = SubResource("80")

[sub_resource type="VisualShaderNodeVec3Constant" id="82"]
constant = Vector3(0.5, 0.5, 0)

[sub_resource type="VisualShaderNodeCustom" id="83"]
default_input_values = [1, 0.5, 2, Vector3(0.5, 0.5, 0)]
initialized = true
script = ExtResource("17")

[sub_resource type="VisualShaderNodeFloatConstant" id="84"]
constant = 0.5

[sub_resource type="VisualShader" id="85"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_5;


// RotateUVAnimated
#include \"res://addons/shaderV/uv/animated/rotateAnimated.gdshaderinc\"

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// FloatConstant:9
	float n_out9p0 = 0.500000;


// Vector3Constant:10
	vec3 n_out10p0 = vec3(0.500000, 0.500000, 0.000000);


// Input:7
	float n_out7p0 = TIME;


	vec3 n_out8p0;
// RotateUVAnimated:8
	{
		n_out8p0 = vec3(_rotateUVAnimatedFunc(vec3(n_out3p0, 0.0).xy, n_out10p0.xy, 0.0, n_out9p0, n_out7p0), 0);
	}


// Texture2D:5
	vec4 n_out5p0 = texture(tex_frg_5, vec2(n_out8p0.xy));
	float n_out5p4 = n_out5p0.a;


// Output:0
	COLOR.rgb = vec3(n_out5p0.xyz);
	COLOR.a = n_out5p4;


}
"
graph_offset = Vector2(182, -41)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(580, 60)
nodes/fragment/3/node = SubResource("9")
nodes/fragment/3/position = Vector2(-260, -100)
nodes/fragment/5/node = SubResource("10")
nodes/fragment/5/position = Vector2(340, 0)
nodes/fragment/7/node = SubResource("77")
nodes/fragment/7/position = Vector2(-240, 160)
nodes/fragment/8/node = SubResource("83")
nodes/fragment/8/position = Vector2(100, 0)
nodes/fragment/9/node = SubResource("84")
nodes/fragment/9/position = Vector2(-120, -20)
nodes/fragment/10/node = SubResource("82")
nodes/fragment/10/position = Vector2(-260, 60)
nodes/fragment/connections = PackedInt32Array(5, 0, 0, 0, 3, 0, 8, 0, 7, 0, 8, 3, 9, 0, 8, 1, 10, 0, 8, 2, 8, 0, 5, 0, 5, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="86"]
shader = SubResource("85")

[sub_resource type="VisualShaderNodeFloatConstant" id="87"]
constant = 1.0

[sub_resource type="VisualShaderNodeCustom" id="88"]
default_input_values = [0, 1.0, 1, 1.0]
initialized = true
script = ExtResource("16")

[sub_resource type="VisualShaderNodeFloatConstant" id="89"]
constant = 10.0

[sub_resource type="VisualShaderNodeVec3Constant" id="90"]
constant = Vector3(0.5, 0.5, 0)

[sub_resource type="VisualShaderNodeCustom" id="91"]
default_input_values = [1, Vector3(0.5, 0.5, 0), 2, 0.0, 3, 0.0]
initialized = true
script = ExtResource("19")

[sub_resource type="VisualShader" id="92"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_5;


// SwirlUV
#include \"res://addons/shaderV/uv/animated/swirlUV.gdshaderinc\"

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// Vector3Constant:13
	vec3 n_out13p0 = vec3(0.500000, 0.500000, 0.000000);


// FloatConstant:10
	float n_out10p0 = 1.000000;


// FloatConstant:12
	float n_out12p0 = 10.000000;


	float n_out11p0;
// SinTIME:11
	float n_in11p0 = 1.00000;
	{
		n_out11p0 = n_out12p0 * sin(n_in11p0 * TIME);
	}


	vec3 n_out9p0;
// SwirlUV:9
	{
		n_out9p0.xy = _swirlUVFunc(vec3(n_out3p0, 0.0).xy, n_out11p0, n_out13p0.xy, n_out10p0);
	}


// Texture2D:5
	vec4 n_out5p0 = texture(tex_frg_5, vec2(n_out9p0.xy));
	float n_out5p4 = n_out5p0.a;


// Output:0
	COLOR.rgb = vec3(n_out5p0.xyz);
	COLOR.a = n_out5p4;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(540, 0)
nodes/fragment/3/node = SubResource("9")
nodes/fragment/3/position = Vector2(-40, -120)
nodes/fragment/5/node = SubResource("10")
nodes/fragment/5/position = Vector2(340, 0)
nodes/fragment/9/node = SubResource("91")
nodes/fragment/9/position = Vector2(140, 0)
nodes/fragment/10/node = SubResource("87")
nodes/fragment/10/position = Vector2(-80, 60)
nodes/fragment/11/node = SubResource("88")
nodes/fragment/11/position = Vector2(-80, 140)
nodes/fragment/12/node = SubResource("89")
nodes/fragment/12/position = Vector2(-280, 180)
nodes/fragment/13/node = SubResource("90")
nodes/fragment/13/position = Vector2(-220, -40)
nodes/fragment/connections = PackedInt32Array(5, 0, 0, 0, 3, 0, 9, 0, 10, 0, 9, 2, 11, 0, 9, 3, 12, 0, 11, 1, 13, 0, 9, 1, 9, 0, 5, 0, 5, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="93"]
shader = SubResource("92")

[sub_resource type="VisualShaderNodeCustom" id="94"]
default_input_values = [1, Vector3(0, 0, 0), 2, 0.0]
initialized = true
script = ExtResource("15")

[sub_resource type="VisualShaderNodeInput" id="95"]
input_name = "time"

[sub_resource type="VisualShaderNodeFloatConstant" id="96"]
constant = 0.5

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_n3ifg"]
output_port_for_preview = 0
expanded_output_ports = [0]
source = 5
texture = ExtResource("1")
texture_type = 1

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_sghnd"]
input_name = "texture"

[sub_resource type="VisualShader" id="97"]
code = "shader_type canvas_item;
render_mode blend_mix;



// TilingAndOffsetUVAnimated
#include \"res://addons/shaderV/uv/animated/tilingNoffsetAnimated.gdshaderinc\"

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// FloatConstant:15
	float n_out15p0 = 0.500000;


// Input:14
	float n_out14p0 = TIME;


	vec2 n_out13p0;
// TilingAndOffsetUVAnimated:13
	{
		n_out13p0.xy = _tilingNoffsetAnimatedFunc(vec3(n_out3p0, 0.0).xy, n_out14p0, vec3(n_out15p0).xy);
	}


	vec4 n_out16p0;
// Texture2D:16
	n_out16p0 = textureLod(TEXTURE, n_out13p0, n_out13p0.x);
	float n_out16p4 = n_out16p0.a;


// Output:0
	COLOR.rgb = vec3(n_out16p0.xyz);
	COLOR.a = n_out16p4;


}
"
graph_offset = Vector2(-172.177, -134.054)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(620, 60)
nodes/fragment/3/node = SubResource("9")
nodes/fragment/3/position = Vector2(-300, -60)
nodes/fragment/13/node = SubResource("94")
nodes/fragment/13/position = Vector2(60, 0)
nodes/fragment/14/node = SubResource("95")
nodes/fragment/14/position = Vector2(-280, 120)
nodes/fragment/15/node = SubResource("96")
nodes/fragment/15/position = Vector2(-160, 40)
nodes/fragment/16/node = SubResource("VisualShaderNodeTexture_n3ifg")
nodes/fragment/16/position = Vector2(360, 20)
nodes/fragment/17/node = SubResource("VisualShaderNodeInput_sghnd")
nodes/fragment/17/position = Vector2(40, 200)
nodes/fragment/connections = PackedInt32Array(15, 0, 13, 1, 14, 0, 13, 2, 16, 4, 0, 1, 17, 0, 16, 2, 16, 0, 0, 0, 3, 0, 13, 0, 13, 0, 16, 1, 13, 0, 16, 0)

[sub_resource type="ShaderMaterial" id="98"]
shader = SubResource("97")

[sub_resource type="VisualShaderNodeCustom" id="99"]
initialized = true
script = ExtResource("18")

[sub_resource type="VisualShader" id="100"]
code = "shader_type canvas_item;
render_mode blend_mix;




void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


	float n_out17p0;
// HashRandom1d:17
	{
		n_out17p0 = fract(sin(n_out3p0.x) * 1e4);
	}


// Output:0
	COLOR.rgb = vec3(n_out17p0);


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(560, 0)
nodes/fragment/3/node = SubResource("9")
nodes/fragment/3/position = Vector2(20, 0)
nodes/fragment/17/node = SubResource("99")
nodes/fragment/17/position = Vector2(360, 0)
nodes/fragment/connections = PackedInt32Array(3, 0, 17, 0, 17, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="101"]
shader = SubResource("100")

[sub_resource type="VisualShaderNodeCustom" id="102"]
initialized = true
script = ExtResource("20")

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_7v744"]
default_input_values = [0, 0.0, 1, 0.0, 2, 1.0]

[sub_resource type="VisualShader" id="103"]
code = "shader_type canvas_item;
render_mode blend_mix;




void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


	float n_out18p0;
// HashRandom2d:18
	{
		n_out18p0 = fract(1e4 * sin(17.0 * vec3(n_out3p0, 0.0).x + vec3(n_out3p0, 0.0).y * 0.1) * (0.1 + abs(sin(vec3(n_out3p0, 0.0).y * 13.0 + vec3(n_out3p0, 0.0).x))));
	}


// VectorCompose:20
	vec3 n_out20p0 = vec3(n_out18p0, n_out18p0, n_out18p0);


// Output:0
	COLOR.rgb = n_out20p0;


}
"
graph_offset = Vector2(250.823, -110.07)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(840, -20)
nodes/fragment/3/node = SubResource("9")
nodes/fragment/3/position = Vector2(-140, 0)
nodes/fragment/18/node = SubResource("102")
nodes/fragment/18/position = Vector2(240, 20)
nodes/fragment/20/node = SubResource("VisualShaderNodeVectorCompose_7v744")
nodes/fragment/20/position = Vector2(440, -20)
nodes/fragment/connections = PackedInt32Array(3, 0, 18, 0, 20, 0, 0, 0, 18, 0, 20, 0, 18, 0, 20, 1, 18, 0, 20, 2)

[sub_resource type="ShaderMaterial" id="104"]
shader = SubResource("103")

[sub_resource type="VisualShaderNodeCustom" id="105"]
initialized = true
script = ExtResource("21")

[sub_resource type="VisualShaderNodeVectorDecompose" id="VisualShaderNodeVectorDecompose_gortp"]
default_input_values = [0, Vector2(0, 0)]
op_type = 0

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_c6k4f"]
default_input_values = [0, 0.0, 1, 0.0, 2, 1.0]

[sub_resource type="VisualShader" id="106"]
code = "shader_type canvas_item;
render_mode blend_mix;



// HashRandom2dVec
#include \"res://addons/shaderV/tools/random/hash2dvector.gdshaderinc\"

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


	vec3 n_out19p0;
// HashRandom2dVec:19
	{
		n_out19p0 = vec3(_hash2v(vec3(n_out3p0, 0.0).xy), 0.0);
	}


// VectorDecompose:20
	float n_out20p0 = vec2(n_out19p0.xy).x;
	float n_out20p1 = vec2(n_out19p0.xy).y;


// VectorCompose:21
	float n_in21p2 = 1.00000;
	vec3 n_out21p0 = vec3(n_out20p0, n_out20p1, n_in21p2);


// Output:0
	COLOR.rgb = n_out21p0;


}
"
graph_offset = Vector2(88.5064, -73.1068)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(900, 40)
nodes/fragment/3/node = SubResource("9")
nodes/fragment/3/position = Vector2(-140, 0)
nodes/fragment/19/node = SubResource("105")
nodes/fragment/19/position = Vector2(240, 0)
nodes/fragment/20/node = SubResource("VisualShaderNodeVectorDecompose_gortp")
nodes/fragment/20/position = Vector2(440, 0)
nodes/fragment/21/node = SubResource("VisualShaderNodeVectorCompose_c6k4f")
nodes/fragment/21/position = Vector2(660, 20)
nodes/fragment/connections = PackedInt32Array(3, 0, 19, 0, 19, 0, 20, 0, 21, 0, 0, 0, 20, 0, 21, 0, 20, 1, 21, 1)

[sub_resource type="ShaderMaterial" id="107"]
shader = SubResource("106")

[sub_resource type="VisualShaderNodeCustom" id="609"]
initialized = true
script = ExtResource("22")

[sub_resource type="VisualShader" id="109"]
code = "shader_type canvas_item;
render_mode blend_mix;




void fragment() {
	float n_out2p0;
// RandomFloat:2
	{
		n_out2p0 = fract(sin(dot(UV.xy, vec2(12.9898, 78.233))) * 43758.5453123);
	}


// Output:0
	COLOR.rgb = vec3(n_out2p0);


}
"
graph_offset = Vector2(-104, -62)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(400, 0)
nodes/fragment/2/node = SubResource("609")
nodes/fragment/2/position = Vector2(200, 0)
nodes/fragment/connections = PackedInt32Array(2, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="110"]
shader = SubResource("109")

[sub_resource type="VisualShaderNodeInput" id="111"]
input_name = "uv"

[sub_resource type="VisualShaderNodeVec3Constant" id="115"]

[sub_resource type="VisualShaderNodeFloatConstant" id="116"]

[sub_resource type="VisualShaderNodeCustom" id="117"]
output_port_for_preview = 0
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(0, 0, 0), 2, 0.0]
initialized = true
script = ExtResource("24")

[sub_resource type="VisualShader" id="118"]
code = "shader_type canvas_item;
render_mode blend_mix;



// RandomGoldRatio
#include \"res://addons/shaderV/tools/random/randomGoldNoiseFloat.gdshaderinc\"

void fragment() {
// Input:21
	vec2 n_out21p0 = UV;


// Vector3Constant:24
	vec3 n_out24p0 = vec3(0.000000, 0.000000, 0.000000);


// FloatConstant:25
	float n_out25p0 = 0.000000;


	float n_out26p0;
// RandomGoldRatio:26
	{
		n_out26p0 = _randomGoldRatioFunc(vec3(n_out21p0, 0.0).xy, n_out24p0.xy, n_out25p0);
	}


// Output:0
	COLOR.rgb = vec3(n_out26p0);


}
"
graph_offset = Vector2(-68, -29)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(460, 0)
nodes/fragment/21/node = SubResource("111")
nodes/fragment/21/position = Vector2(-180, -100)
nodes/fragment/24/node = SubResource("115")
nodes/fragment/24/position = Vector2(-180, 0)
nodes/fragment/25/node = SubResource("116")
nodes/fragment/25/position = Vector2(-40, 120)
nodes/fragment/26/node = SubResource("117")
nodes/fragment/26/position = Vector2(200, 0)
nodes/fragment/connections = PackedInt32Array(21, 0, 26, 0, 24, 0, 26, 1, 25, 0, 26, 2, 26, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="119"]
shader = SubResource("118")

[sub_resource type="VisualShaderNodeCustom" id="120"]
default_input_values = [1, 0.0, 2, 1.0, 3, -1.0, 4, 1.0]
initialized = true
script = ExtResource("26")

[sub_resource type="VisualShaderNodeTexture" id="121"]
expanded_output_ports = [0]
source = 2

[sub_resource type="VisualShaderNodeFloatConstant" id="122"]

[sub_resource type="VisualShaderNodeFloatConstant" id="123"]
constant = 1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="124"]
constant = 1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="125"]
constant = -1.0

[sub_resource type="VisualShader" id="126"]
code = "shader_type canvas_item;
render_mode blend_mix;



// Remap
#include \"res://addons/shaderV/tools/remap.gdshaderinc\"

void fragment() {
// Input:21
	vec2 n_out21p0 = UV;


// FloatConstant:26
	float n_out26p0 = 0.000000;


// FloatConstant:27
	float n_out27p0 = 1.000000;


// FloatConstant:29
	float n_out29p0 = -1.000000;


// FloatConstant:28
	float n_out28p0 = 1.000000;


	vec3 n_out24p0;
// Remap:24
	{
		n_out24p0 = _remapFunc(vec3(n_out21p0, 0.0), vec2(n_out26p0, n_out27p0), vec2(n_out29p0, n_out28p0));
	}


	vec4 n_out25p0;
// Texture2D:25
	n_out25p0 = texture(TEXTURE, vec2(n_out24p0.xy));
	float n_out25p4 = n_out25p0.a;


// Output:0
	COLOR.rgb = vec3(n_out25p0.xyz);
	COLOR.a = n_out25p4;


}
"
graph_offset = Vector2(35.8955, -116.999)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(700, 20)
nodes/fragment/21/node = SubResource("111")
nodes/fragment/21/position = Vector2(-160, -100)
nodes/fragment/24/node = SubResource("120")
nodes/fragment/24/position = Vector2(200, 0)
nodes/fragment/25/node = SubResource("121")
nodes/fragment/25/position = Vector2(400, 0)
nodes/fragment/26/node = SubResource("122")
nodes/fragment/26/position = Vector2(-20, -20)
nodes/fragment/27/node = SubResource("123")
nodes/fragment/27/position = Vector2(-20, 60)
nodes/fragment/28/node = SubResource("124")
nodes/fragment/28/position = Vector2(-20, 220)
nodes/fragment/29/node = SubResource("125")
nodes/fragment/29/position = Vector2(-20, 140)
nodes/fragment/connections = PackedInt32Array(25, 0, 0, 0, 24, 0, 25, 0, 21, 0, 24, 0, 26, 0, 24, 1, 27, 0, 24, 2, 29, 0, 24, 3, 28, 0, 24, 4, 25, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="127"]
shader = SubResource("126")

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_wq77w"]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_gg36w"]

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_6oew3"]
default_input_values = [0, 1.0, 1, 1.0]
initialized = true
script = ExtResource("16")

[sub_resource type="VisualShader" id="VisualShader_gq6wd"]
code = "shader_type canvas_item;
render_mode blend_mix;




void fragment() {
// FloatConstant:2
	float n_out2p0 = 0.000000;


// FloatConstant:3
	float n_out3p0 = 0.000000;


	float n_out4p0;
// SinTIME:4
	{
		n_out4p0 = n_out3p0 * sin(n_out2p0 * TIME);
	}


// Output:0
	COLOR.rgb = vec3(n_out4p0);


}
"
graph_offset = Vector2(-65.6183, 45.7513)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(420, 200)
nodes/fragment/2/node = SubResource("VisualShaderNodeFloatConstant_wq77w")
nodes/fragment/2/position = Vector2(0, 160)
nodes/fragment/3/node = SubResource("VisualShaderNodeFloatConstant_gg36w")
nodes/fragment/3/position = Vector2(0, 260)
nodes/fragment/4/node = SubResource("VisualShaderNodeCustom_6oew3")
nodes/fragment/4/position = Vector2(220, 200)
nodes/fragment/connections = PackedInt32Array(4, 0, 0, 0, 3, 0, 4, 1, 2, 0, 4, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_bvkyk"]
shader = SubResource("VisualShader_gq6wd")

[sub_resource type="VisualShaderNodeCustom" id="128"]
default_input_values = [0, 1.0, 1, 1.0]
initialized = true
script = ExtResource("16")

[sub_resource type="VisualShaderNodeFloatConstant" id="129"]
constant = 1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="130"]
constant = 1.0

[sub_resource type="VisualShader" id="131"]
code = "shader_type canvas_item;
render_mode blend_mix;




void fragment() {
// FloatConstant:27
	float n_out27p0 = 1.000000;


// FloatConstant:28
	float n_out28p0 = 1.000000;


	float n_out26p0;
// SinTIME:26
	{
		n_out26p0 = n_out28p0 * sin(n_out27p0 * TIME);
	}


// Output:0
	COLOR.rgb = vec3(n_out26p0);


}
"
graph_offset = Vector2(198, -64)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(600, 0)
nodes/fragment/26/node = SubResource("128")
nodes/fragment/26/position = Vector2(340, 0)
nodes/fragment/27/node = SubResource("129")
nodes/fragment/27/position = Vector2(100, -40)
nodes/fragment/28/node = SubResource("130")
nodes/fragment/28/position = Vector2(100, 60)
nodes/fragment/connections = PackedInt32Array(26, 0, 0, 0, 28, 0, 26, 1, 27, 0, 26, 0)

[sub_resource type="ShaderMaterial" id="132"]
shader = SubResource("131")

[sub_resource type="VisualShaderNodeCustom" id="133"]
output_port_for_preview = 0
default_input_values = [0, 1.0, 1, 0.0]
initialized = true
script = ExtResource("25")

[sub_resource type="VisualShaderNodeFloatConstant" id="134"]
constant = 1.0

[sub_resource type="VisualShaderNodeInput" id="135"]
input_name = "time"

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_wkq5u"]
output_port_for_preview = 0
default_input_values = [0, 0.0, 1, 0.0, 2, 1.0]

[sub_resource type="VisualShaderNodeVectorDecompose" id="VisualShaderNodeVectorDecompose_b8o5j"]

[sub_resource type="VisualShader" id="136"]
code = "shader_type canvas_item;
render_mode blend_mix;



// vec2Compose
#include \"res://addons/shaderV/tools/vec2Compose.gdshaderinc\"

void fragment() {
// FloatConstant:3
	float n_out3p0 = 1.000000;


// Input:4
	float n_out4p0 = TIME;


	vec3 n_out2p0;
// vec2Compose:2
	{
		n_out2p0.xy = _vec2ComposeFunc(n_out3p0, n_out4p0);
	}


// VectorDecompose:7
	float n_out7p0 = n_out2p0.x;
	float n_out7p1 = n_out2p0.y;
	float n_out7p2 = n_out2p0.z;


// VectorCompose:6
	float n_in6p2 = 1.00000;
	vec3 n_out6p0 = vec3(n_out7p0, n_out7p1, n_in6p2);


// Output:0
	COLOR.rgb = n_out6p0;


}
"
graph_offset = Vector2(503, -99)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(1120, 140)
nodes/fragment/2/node = SubResource("133")
nodes/fragment/2/position = Vector2(340, 0)
nodes/fragment/3/node = SubResource("134")
nodes/fragment/3/position = Vector2(120, -40)
nodes/fragment/4/node = SubResource("135")
nodes/fragment/4/position = Vector2(40, 100)
nodes/fragment/6/node = SubResource("VisualShaderNodeVectorCompose_wkq5u")
nodes/fragment/6/position = Vector2(880, 100)
nodes/fragment/7/node = SubResource("VisualShaderNodeVectorDecompose_b8o5j")
nodes/fragment/7/position = Vector2(640, 100)
nodes/fragment/connections = PackedInt32Array(4, 0, 2, 1, 3, 0, 2, 0, 2, 0, 7, 0, 7, 0, 6, 0, 7, 1, 6, 1, 6, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="137"]
shader = SubResource("136")

[sub_resource type="VisualShaderNodeCustom" id="138"]
default_input_values = [2, -1.0, 3, 0.5]
initialized = true
script = ExtResource("27")

[sub_resource type="VisualShaderNodeInput" id="139"]
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id="140"]
input_name = "texture"

[sub_resource type="VisualShaderNodeFloatConstant" id="141"]
constant = -1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="142"]
constant = 1.0

[sub_resource type="VisualShader" id="143"]
code = "shader_type canvas_item;
render_mode blend_mix;



// BlurBasic
#include \"res://addons/shaderV/rgba/blur/blur9sample.gdshaderinc\"

void fragment() {
// Input:6
	vec2 n_out6p0 = UV;


// FloatConstant:8
	float n_out8p0 = -1.000000;


// FloatConstant:9
	float n_out9p0 = 1.000000;


	vec3 n_out5p0;
	float n_out5p1;
// BlurBasic:5
	{
		vec4 n_out5p0n_out5p1 = _blur9sampleFunc(TEXTURE, vec3(n_out6p0, 0.0).xy, n_out8p0, n_out9p0);
		n_out5p0 = n_out5p0n_out5p1.rgb;
		n_out5p1 = n_out5p0n_out5p1.a;
	}


// Output:0
	COLOR.rgb = n_out5p0;
	COLOR.a = n_out5p1;


}
"
graph_offset = Vector2(-115, -78)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(260, 0)
nodes/fragment/5/node = SubResource("138")
nodes/fragment/5/position = Vector2(0, 0)
nodes/fragment/6/node = SubResource("139")
nodes/fragment/6/position = Vector2(-360, -40)
nodes/fragment/7/node = SubResource("140")
nodes/fragment/7/position = Vector2(-320, -120)
nodes/fragment/8/node = SubResource("141")
nodes/fragment/8/position = Vector2(-220, 40)
nodes/fragment/9/node = SubResource("142")
nodes/fragment/9/position = Vector2(-220, 120)
nodes/fragment/connections = PackedInt32Array(6, 0, 5, 1, 7, 0, 5, 0, 5, 1, 0, 1, 8, 0, 5, 2, 9, 0, 5, 3, 5, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="144"]
shader = SubResource("143")

[sub_resource type="VisualShaderNodeFloatConstant" id="145"]
constant = 5.0

[sub_resource type="VisualShaderNodeFloatConstant" id="146"]
constant = 0.003

[sub_resource type="VisualShaderNodeFloatConstant" id="147"]
constant = -1.0

[sub_resource type="VisualShaderNodeCustom" id="148"]
default_input_values = [2, -1.0, 3, 5, 4, 0.001]
initialized = true
script = ExtResource("28")

[sub_resource type="VisualShader" id="149"]
code = "shader_type canvas_item;
render_mode blend_mix;



// BlurCustom
#include \"res://addons/shaderV/rgba/blur/blurCustom.gdshaderinc\"

void fragment() {
// Input:6
	vec2 n_out6p0 = UV;


// FloatConstant:12
	float n_out12p0 = -1.000000;


// FloatConstant:10
	float n_out10p0 = 5.000000;


// FloatConstant:11
	float n_out11p0 = 0.003000;


	vec3 n_out8p0;
	float n_out8p1;
// BlurCustom:8
	{
		vec4 n_out8p0n_out8p1 = _blurWithAmountFunc(TEXTURE, vec3(n_out6p0, 0.0).xy, n_out12p0, int(n_out10p0), n_out11p0);
		n_out8p0 = n_out8p0n_out8p1.rgb;
		n_out8p1 = n_out8p0n_out8p1.a;
	}


// Output:0
	COLOR.rgb = n_out8p0;
	COLOR.a = n_out8p1;


}
"
graph_offset = Vector2(-299.913, -345)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(240, -200)
nodes/fragment/6/node = SubResource("139")
nodes/fragment/6/position = Vector2(-380, -260)
nodes/fragment/7/node = SubResource("140")
nodes/fragment/7/position = Vector2(-340, -340)
nodes/fragment/8/node = SubResource("148")
nodes/fragment/8/position = Vector2(0, -200)
nodes/fragment/10/node = SubResource("145")
nodes/fragment/10/position = Vector2(-240, -100)
nodes/fragment/11/node = SubResource("146")
nodes/fragment/11/position = Vector2(-240, -20)
nodes/fragment/12/node = SubResource("147")
nodes/fragment/12/position = Vector2(-240, -180)
nodes/fragment/connections = PackedInt32Array(8, 1, 0, 1, 7, 0, 8, 0, 6, 0, 8, 1, 12, 0, 8, 2, 10, 0, 8, 3, 11, 0, 8, 4, 8, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="150"]
shader = SubResource("149")

[sub_resource type="VisualShaderNodeCustom" id="151"]
default_input_values = [2, -1.0, 3, Vector3(0.5, 0.5, 0), 4, 20.0, 5, 0.005]
initialized = true
script = ExtResource("29")

[sub_resource type="VisualShaderNodeFloatConstant" id="152"]
constant = 0.1

[sub_resource type="VisualShaderNodeFloatConstant" id="153"]
constant = -1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="154"]
constant = 20.0

[sub_resource type="VisualShaderNodeVec3Constant" id="155"]
constant = Vector3(0.5, 0.5, 0)

[sub_resource type="VisualShaderNodeCustom" id="156"]
default_input_values = [0, 1.0, 1, 1.0]
initialized = true
script = ExtResource("16")

[sub_resource type="VisualShader" id="157"]
code = "shader_type canvas_item;
render_mode blend_mix;



// ZoomBlur
#include \"res://addons/shaderV/rgba/blur/zoomBlur.gdshaderinc\"

void fragment() {
// Input:6
	vec2 n_out6p0 = UV;


// FloatConstant:13
	float n_out13p0 = -1.000000;


// Vector3Constant:15
	vec3 n_out15p0 = vec3(0.500000, 0.500000, 0.000000);


// FloatConstant:14
	float n_out14p0 = 20.000000;


// FloatConstant:12
	float n_out12p0 = 0.100000;


	float n_out9p0;
// SinTIME:9
	float n_in9p0 = 1.00000;
	{
		n_out9p0 = n_out12p0 * sin(n_in9p0 * TIME);
	}


	vec3 n_out11p0;
	float n_out11p1;
// ZoomBlur:11
	{
		vec4 n_out11p0n_out11p1 = _zoomBlurFunc(TEXTURE, vec3(n_out6p0, 0.0).xy, int(n_out14p0), n_out15p0.xy, n_out9p0, n_out13p0);
		n_out11p0 = n_out11p0n_out11p1.rgb;
		n_out11p1 = n_out11p0n_out11p1.a;
	}


// Output:0
	COLOR.rgb = n_out11p0;
	COLOR.a = n_out11p1;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(260, 0)
nodes/fragment/6/node = SubResource("139")
nodes/fragment/6/position = Vector2(-400, -100)
nodes/fragment/7/node = SubResource("140")
nodes/fragment/7/position = Vector2(-360, -180)
nodes/fragment/9/node = SubResource("156")
nodes/fragment/9/position = Vector2(-260, 240)
nodes/fragment/11/node = SubResource("151")
nodes/fragment/11/position = Vector2(0, 0)
nodes/fragment/12/node = SubResource("152")
nodes/fragment/12/position = Vector2(-520, 340)
nodes/fragment/13/node = SubResource("153")
nodes/fragment/13/position = Vector2(-260, -20)
nodes/fragment/14/node = SubResource("154")
nodes/fragment/14/position = Vector2(-260, 160)
nodes/fragment/15/node = SubResource("155")
nodes/fragment/15/position = Vector2(-400, 60)
nodes/fragment/connections = PackedInt32Array(6, 0, 11, 1, 12, 0, 9, 1, 9, 0, 11, 5, 13, 0, 11, 2, 14, 0, 11, 4, 7, 0, 11, 0, 11, 1, 0, 1, 15, 0, 11, 3, 11, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="158"]
shader = SubResource("157")

[sub_resource type="VisualShaderNodeCustom" id="159"]
default_input_values = [2, -1.0, 3, 1.0, 4, 1.0, 5, 1.0, 6, Vector3(1, 1, 1), 7, 1.0]
initialized = true
script = ExtResource("31")

[sub_resource type="VisualShaderNodeColorConstant" id="160"]
constant = Color(1, 0, 0, 1)

[sub_resource type="VisualShaderNodeFloatConstant" id="161"]
constant = -1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="162"]
constant = 1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="163"]
constant = 1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="164"]
constant = 1.0

[sub_resource type="VisualShader" id="165"]
code = "shader_type canvas_item;
render_mode blend_mix;



// GlowEmpty
#include \"res://addons/shaderV/rgba/glow/glowEmpty.gdshaderinc\"

void fragment() {
// Input:6
	vec2 n_out6p0 = UV;


// FloatConstant:15
	float n_out15p0 = -1.000000;


// FloatConstant:16
	float n_out16p0 = 1.000000;


// FloatConstant:17
	float n_out17p0 = 1.000000;


// FloatConstant:18
	float n_out18p0 = 1.000000;


// ColorConstant:14
	vec4 n_out14p0 = vec4(1.000000, 0.000000, 0.000000, 1.000000);


	vec3 n_out13p0;
	float n_out13p1;
// GlowEmpty:13
	float n_in13p7 = 1.00000;
	{
		vec4 n_out13p0n_out13p1 = _inoutGlowEmptyFunc(TEXTURE, vec3(n_out6p0, 0.0).xy, n_out15p0, n_out16p0, n_out17p0, n_out18p0, vec4(vec3(n_out14p0.xyz), n_in13p7));
		n_out13p0 = n_out13p0n_out13p1.rgb;
		n_out13p1 = n_out13p0n_out13p1.a;
	}


// Output:0
	COLOR.rgb = n_out13p0;
	COLOR.a = n_out13p1;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(200, 0)
nodes/fragment/6/node = SubResource("139")
nodes/fragment/6/position = Vector2(-420, -100)
nodes/fragment/7/node = SubResource("140")
nodes/fragment/7/position = Vector2(-380, -180)
nodes/fragment/13/node = SubResource("159")
nodes/fragment/13/position = Vector2(-40, 0)
nodes/fragment/14/node = SubResource("160")
nodes/fragment/14/position = Vector2(-240, 300)
nodes/fragment/15/node = SubResource("161")
nodes/fragment/15/position = Vector2(-280, -20)
nodes/fragment/16/node = SubResource("162")
nodes/fragment/16/position = Vector2(-280, 60)
nodes/fragment/17/node = SubResource("163")
nodes/fragment/17/position = Vector2(-280, 140)
nodes/fragment/18/node = SubResource("164")
nodes/fragment/18/position = Vector2(-280, 220)
nodes/fragment/connections = PackedInt32Array(13, 1, 0, 1, 7, 0, 13, 0, 6, 0, 13, 1, 14, 0, 13, 6, 15, 0, 13, 2, 16, 0, 13, 3, 17, 0, 13, 4, 18, 0, 13, 5, 13, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="166"]
shader = SubResource("165")

[sub_resource type="VisualShaderNodeCustom" id="167"]
default_input_values = [2, -1.0, 3, 1.0, 4, 1.0, 5, Vector3(1, 1, 1), 6, 1.0]
initialized = true
script = ExtResource("30")

[sub_resource type="VisualShaderNodeFloatConstant" id="168"]
constant = -1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="169"]
constant = 1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="170"]
constant = 1.0

[sub_resource type="VisualShader" id="171"]
code = "shader_type canvas_item;
render_mode blend_mix;



// InnerGlow
#include \"res://addons/shaderV/rgba/glow/innerGlow.gdshaderinc\"

void fragment() {
// Input:6
	vec2 n_out6p0 = UV;


// FloatConstant:16
	float n_out16p0 = -1.000000;


// FloatConstant:17
	float n_out17p0 = 1.000000;


// FloatConstant:18
	float n_out18p0 = 1.000000;


// ColorConstant:14
	vec4 n_out14p0 = vec4(1.000000, 0.000000, 0.000000, 1.000000);


	vec3 n_out15p0;
	float n_out15p1;
// InnerGlow:15
	float n_in15p6 = 1.00000;
	{
		vec4 n_out15p0n_out15p1 = _innerGlowFunc(TEXTURE, vec3(n_out6p0, 0.0).xy, n_out16p0, n_out17p0, n_out18p0, vec4(vec3(n_out14p0.xyz), n_in15p6));
		n_out15p0 = n_out15p0n_out15p1.rgb;
		n_out15p1 = n_out15p0n_out15p1.a;
	}


// Output:0
	COLOR.rgb = n_out15p0;
	COLOR.a = n_out15p1;


}
"
graph_offset = Vector2(-56, -47)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(200, 0)
nodes/fragment/6/node = SubResource("139")
nodes/fragment/6/position = Vector2(-420, -80)
nodes/fragment/7/node = SubResource("140")
nodes/fragment/7/position = Vector2(-380, -160)
nodes/fragment/14/node = SubResource("160")
nodes/fragment/14/position = Vector2(-220, 240)
nodes/fragment/15/node = SubResource("167")
nodes/fragment/15/position = Vector2(-40, 0)
nodes/fragment/16/node = SubResource("168")
nodes/fragment/16/position = Vector2(-280, 0)
nodes/fragment/17/node = SubResource("169")
nodes/fragment/17/position = Vector2(-280, 80)
nodes/fragment/18/node = SubResource("170")
nodes/fragment/18/position = Vector2(-280, 160)
nodes/fragment/connections = PackedInt32Array(7, 0, 15, 0, 6, 0, 15, 1, 14, 0, 15, 5, 16, 0, 15, 2, 17, 0, 15, 3, 18, 0, 15, 4, 15, 0, 0, 0, 15, 1, 0, 1)

[sub_resource type="ShaderMaterial" id="172"]
shader = SubResource("171")

[sub_resource type="VisualShaderNodeCustom" id="173"]
default_input_values = [2, -1.0, 3, 1.0, 4, 1.0, 5, Vector3(1, 1, 1), 6, 1.0]
initialized = true
script = ExtResource("32")

[sub_resource type="VisualShaderNodeInput" id="174"]
input_name = "texture"

[sub_resource type="VisualShaderNodeInput" id="175"]
input_name = "uv"

[sub_resource type="VisualShaderNodeColorConstant" id="176"]
constant = Color(1, 0, 0, 1)

[sub_resource type="VisualShaderNodeFloatConstant" id="177"]
constant = -1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="178"]
constant = 1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="179"]
constant = 1.0

[sub_resource type="VisualShader" id="180"]
code = "shader_type canvas_item;
render_mode blend_mix;



// InnerGlowEmpty
#include \"res://addons/shaderV/rgba/glow/innerGlowEmpty.gdshaderinc\"

void fragment() {
// Input:4
	vec2 n_out4p0 = UV;


// FloatConstant:6
	float n_out6p0 = -1.000000;


// FloatConstant:7
	float n_out7p0 = 1.000000;


// FloatConstant:8
	float n_out8p0 = 1.000000;


// ColorConstant:5
	vec4 n_out5p0 = vec4(1.000000, 0.000000, 0.000000, 1.000000);


	vec3 n_out2p0;
	float n_out2p1;
// InnerGlowEmpty:2
	float n_in2p6 = 1.00000;
	{
		vec4 n_out2p0n_out2p1 = _innerGlowEmptyFunc(TEXTURE, vec3(n_out4p0, 0.0).xy, n_out6p0, n_out7p0, n_out8p0, vec4(vec3(n_out5p0.xyz), n_in2p6));
		n_out2p0 = n_out2p0n_out2p1.rgb;
		n_out2p1 = n_out2p0n_out2p1.a;
	}


// Output:0
	COLOR.rgb = n_out2p0;
	COLOR.a = n_out2p1;


}
"
graph_offset = Vector2(-54, 27)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(400, 200)
nodes/fragment/2/node = SubResource("173")
nodes/fragment/2/position = Vector2(160, 200)
nodes/fragment/3/node = SubResource("174")
nodes/fragment/3/position = Vector2(-160, 60)
nodes/fragment/4/node = SubResource("175")
nodes/fragment/4/position = Vector2(-200, 140)
nodes/fragment/5/node = SubResource("176")
nodes/fragment/5/position = Vector2(-20, 460)
nodes/fragment/6/node = SubResource("177")
nodes/fragment/6/position = Vector2(-60, 220)
nodes/fragment/7/node = SubResource("178")
nodes/fragment/7/position = Vector2(-60, 300)
nodes/fragment/8/node = SubResource("179")
nodes/fragment/8/position = Vector2(-60, 380)
nodes/fragment/connections = PackedInt32Array(2, 1, 0, 1, 4, 0, 2, 1, 3, 0, 2, 0, 5, 0, 2, 5, 6, 0, 2, 2, 8, 0, 2, 4, 7, 0, 2, 3, 2, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="181"]
shader = SubResource("180")

[sub_resource type="VisualShaderNodeFloatConstant" id="182"]
constant = 1.0

[sub_resource type="VisualShaderNodeCustom" id="183"]
default_input_values = [2, -1.0, 3, 1.0, 4, 1.0, 5, Vector3(1, 1, 1), 6, 1.0]
initialized = true
script = ExtResource("33")

[sub_resource type="VisualShaderNodeColorConstant" id="184"]
constant = Color(1, 0, 0, 1)

[sub_resource type="VisualShaderNodeFloatConstant" id="185"]
constant = -1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="186"]
constant = 1.0

[sub_resource type="VisualShader" id="187"]
code = "shader_type canvas_item;
render_mode blend_mix;



// OuterGlow
#include \"res://addons/shaderV/rgba/glow/outerGlow.gdshaderinc\"

void fragment() {
// Input:4
	vec2 n_out4p0 = UV;


// FloatConstant:8
	float n_out8p0 = -1.000000;


// FloatConstant:9
	float n_out9p0 = 1.000000;


// FloatConstant:10
	float n_out10p0 = 1.000000;


// ColorConstant:7
	vec4 n_out7p0 = vec4(1.000000, 0.000000, 0.000000, 1.000000);


	vec3 n_out6p0;
	float n_out6p1;
// OuterGlow:6
	float n_in6p6 = 1.00000;
	{
		vec4 n_out6p0n_out6p1 = _outerGlowFunc(TEXTURE, vec3(n_out4p0, 0.0).xy, n_out8p0, n_out9p0, n_out10p0, vec4(vec3(n_out7p0.xyz), n_in6p6));
		n_out6p0 = n_out6p0n_out6p1.rgb;
		n_out6p1 = n_out6p0n_out6p1.a;
	}


// Output:0
	COLOR.rgb = n_out6p0;
	COLOR.a = n_out6p1;


}
"
graph_offset = Vector2(-422, 18)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(400, 200)
nodes/fragment/3/node = SubResource("174")
nodes/fragment/3/position = Vector2(-180, 60)
nodes/fragment/4/node = SubResource("175")
nodes/fragment/4/position = Vector2(-220, 140)
nodes/fragment/6/node = SubResource("183")
nodes/fragment/6/position = Vector2(160, 200)
nodes/fragment/7/node = SubResource("184")
nodes/fragment/7/position = Vector2(-80, 460)
nodes/fragment/8/node = SubResource("185")
nodes/fragment/8/position = Vector2(-80, 220)
nodes/fragment/9/node = SubResource("186")
nodes/fragment/9/position = Vector2(-80, 300)
nodes/fragment/10/node = SubResource("182")
nodes/fragment/10/position = Vector2(-80, 380)
nodes/fragment/connections = PackedInt32Array(6, 1, 0, 1, 3, 0, 6, 0, 4, 0, 6, 1, 7, 0, 6, 5, 8, 0, 6, 2, 9, 0, 6, 3, 10, 0, 6, 4, 6, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="188"]
shader = SubResource("187")

[sub_resource type="VisualShaderNodeFloatConstant" id="189"]
constant = -1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="190"]
constant = 1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="191"]
constant = 1.0

[sub_resource type="VisualShaderNodeCustom" id="192"]
default_input_values = [2, -1.0, 3, 1.0, 4, 1.0, 5, Vector3(1, 1, 1), 6, 1.0]
initialized = true
script = ExtResource("34")

[sub_resource type="VisualShaderNodeColorConstant" id="193"]
constant = Color(1, 0, 0, 1)

[sub_resource type="VisualShader" id="194"]
code = "shader_type canvas_item;
render_mode blend_mix;



// OuterGlowEmpty
#include \"res://addons/shaderV/rgba/glow/outerGlowEmpty.gdshaderinc\"

void fragment() {
// Input:4
	vec2 n_out4p0 = UV;


// FloatConstant:10
	float n_out10p0 = -1.000000;


// FloatConstant:11
	float n_out11p0 = 1.000000;


// FloatConstant:12
	float n_out12p0 = 1.000000;


// ColorConstant:9
	vec4 n_out9p0 = vec4(1.000000, 0.000000, 0.000000, 1.000000);


	vec3 n_out7p0;
	float n_out7p1;
// OuterGlowEmpty:7
	float n_in7p6 = 1.00000;
	{
		vec4 n_out7p0n_out7p1 = _outerGlowEmptyFunc(TEXTURE, vec3(n_out4p0, 0.0).xy, n_out10p0, n_out11p0, n_out12p0, vec4(vec3(n_out9p0.xyz), n_in7p6));
		n_out7p0 = n_out7p0n_out7p1.rgb;
		n_out7p1 = n_out7p0n_out7p1.a;
	}


// Output:0
	COLOR.rgb = n_out7p0;
	COLOR.a = n_out7p1;


}
"
graph_offset = Vector2(-220.103, 147.328)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(400, 200)
nodes/fragment/3/node = SubResource("174")
nodes/fragment/3/position = Vector2(-160, 40)
nodes/fragment/4/node = SubResource("175")
nodes/fragment/4/position = Vector2(-200, 120)
nodes/fragment/7/node = SubResource("192")
nodes/fragment/7/position = Vector2(180, 200)
nodes/fragment/9/node = SubResource("193")
nodes/fragment/9/position = Vector2(-60, 440)
nodes/fragment/10/node = SubResource("189")
nodes/fragment/10/position = Vector2(-60, 200)
nodes/fragment/11/node = SubResource("190")
nodes/fragment/11/position = Vector2(-60, 280)
nodes/fragment/12/node = SubResource("191")
nodes/fragment/12/position = Vector2(-60, 360)
nodes/fragment/connections = PackedInt32Array(7, 1, 0, 1, 3, 0, 7, 0, 4, 0, 7, 1, 9, 0, 7, 5, 10, 0, 7, 2, 11, 0, 7, 3, 12, 0, 7, 4, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="195"]
shader = SubResource("194")

[sub_resource type="VisualShaderNodeVec3Constant" id="196"]
constant = Vector3(8, 8, 0)

[sub_resource type="VisualShaderNodeColorConstant" id="197"]
expanded_output_ports = [0]
constant = Color(0, 1, 0.5, 1)

[sub_resource type="VisualShaderNodeCustom" id="198"]
default_input_values = [1, Vector3(8, 8, 0), 2, Vector3(1, 1, 1), 3, 1]
initialized = true
script = ExtResource("35")

[sub_resource type="VisualShader" id="199"]
code = "shader_type canvas_item;
render_mode blend_mix;



// CheckerboardShape
#include \"res://addons/shaderV/rgba/generate_shapes/chekerboardPattern.gdshaderinc\"

void fragment() {
// Input:4
	vec2 n_out4p0 = UV;


// Vector3Constant:10
	vec3 n_out10p0 = vec3(8.000000, 8.000000, 0.000000);


// ColorConstant:8
	vec4 n_out8p0 = vec4(0.000000, 1.000000, 0.500000, 1.000000);
	float n_out8p4 = n_out8p0.a;


	vec3 n_out9p0;
	float n_out9p1;
// CheckerboardShape:9
	{
		n_out9p0 = vec3(n_out8p0.xyz);
		n_out9p1 = _checkerboardPatternFunc(vec3(n_out4p0, 0.0).xy, n_out10p0.xy) * n_out8p4;
	}


// Output:0
	COLOR.rgb = n_out9p0;
	COLOR.a = n_out9p1;


}
"
graph_offset = Vector2(-151, 179)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(420, 220)
nodes/fragment/4/node = SubResource("175")
nodes/fragment/4/position = Vector2(-220, 120)
nodes/fragment/8/node = SubResource("197")
nodes/fragment/8/position = Vector2(-60, 320)
nodes/fragment/9/node = SubResource("198")
nodes/fragment/9/position = Vector2(180, 220)
nodes/fragment/10/node = SubResource("196")
nodes/fragment/10/position = Vector2(-220, 220)
nodes/fragment/connections = PackedInt32Array(9, 0, 0, 0, 9, 1, 0, 1, 8, 0, 9, 2, 10, 0, 9, 1, 4, 0, 9, 0, 8, 4, 9, 3)

[sub_resource type="ShaderMaterial" id="200"]
shader = SubResource("199")

[sub_resource type="VisualShaderNodeCustom" id="210"]
default_input_values = [1, Vector3(0.5, 0.5, 0), 2, Vector3(1, 1, 0), 3, -0.5, 4, 0.5, 5, 1.0, 6, Vector3(1, 1, 1), 7, 1.0]
initialized = true
script = ExtResource("37")

[sub_resource type="VisualShaderNodeFloatConstant" id="211"]
constant = -0.5

[sub_resource type="VisualShaderNodeFloatConstant" id="212"]
constant = 0.5

[sub_resource type="VisualShaderNodeFloatConstant" id="213"]
constant = 1.0

[sub_resource type="VisualShaderNodeColorConstant" id="214"]
constant = Color(1, 0, 0, 1)

[sub_resource type="VisualShaderNodeVec3Constant" id="215"]
constant = Vector3(0.5, 0.5, 0)

[sub_resource type="VisualShaderNodeVec3Constant" id="216"]
constant = Vector3(1, 1, 0)

[sub_resource type="VisualShader" id="217"]
code = "shader_type canvas_item;
render_mode blend_mix;



// CircleShape
#include \"res://addons/shaderV/rgba/generate_shapes/generateCircle.gdshaderinc\"

void fragment() {
// Input:4
	vec2 n_out4p0 = UV;


// Vector3Constant:23
	vec3 n_out23p0 = vec3(0.500000, 0.500000, 0.000000);


// Vector3Constant:24
	vec3 n_out24p0 = vec3(1.000000, 1.000000, 0.000000);


// FloatConstant:19
	float n_out19p0 = -0.500000;


// FloatConstant:20
	float n_out20p0 = 0.500000;


// FloatConstant:21
	float n_out21p0 = 1.000000;


// ColorConstant:22
	vec4 n_out22p0 = vec4(1.000000, 0.000000, 0.000000, 1.000000);


	vec3 n_out18p0;
	float n_out18p1;
// CircleShape:18
	float n_in18p7 = 1.00000;
	{
		n_out18p0 = vec3(n_out22p0.xyz);
		n_out18p1 = _generateCircleFunc(vec3(n_out4p0, 0.0).xy, n_out23p0.xy, n_out24p0.xy, n_out19p0, n_out20p0, n_out21p0).a * n_in18p7;
	}


// Output:0
	COLOR.rgb = n_out18p0;
	COLOR.a = n_out18p1;


}
"
graph_offset = Vector2(-157, 124)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(540, 180)
nodes/fragment/4/node = SubResource("175")
nodes/fragment/4/position = Vector2(-120, 0)
nodes/fragment/18/node = SubResource("210")
nodes/fragment/18/position = Vector2(320, 180)
nodes/fragment/19/node = SubResource("211")
nodes/fragment/19/position = Vector2(20, 280)
nodes/fragment/20/node = SubResource("212")
nodes/fragment/20/position = Vector2(20, 360)
nodes/fragment/21/node = SubResource("213")
nodes/fragment/21/position = Vector2(20, 440)
nodes/fragment/22/node = SubResource("214")
nodes/fragment/22/position = Vector2(20, 520)
nodes/fragment/23/node = SubResource("215")
nodes/fragment/23/position = Vector2(-120, 80)
nodes/fragment/24/node = SubResource("216")
nodes/fragment/24/position = Vector2(-120, 180)
nodes/fragment/connections = PackedInt32Array(4, 0, 18, 0, 19, 0, 18, 3, 20, 0, 18, 4, 21, 0, 18, 5, 22, 0, 18, 6, 23, 0, 18, 1, 24, 0, 18, 2, 18, 1, 0, 1, 18, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="218"]
shader = SubResource("217")

[sub_resource type="VisualShaderNodeCustom" id="201"]
default_input_values = [1, Vector3(0.5, 0.5, 0), 2, Vector3(1, 1, 0), 3, 0.0, 4, 0.5, 5, 0.5, 6, Vector3(1, 1, 1), 7, 1.0]
initialized = true
script = ExtResource("36")

[sub_resource type="VisualShaderNodeColorConstant" id="202"]
constant = Color(0.59375, 0, 1, 1)

[sub_resource type="VisualShaderNodeVec3Constant" id="203"]
constant = Vector3(1, 1, 0)

[sub_resource type="VisualShaderNodeFloatConstant" id="204"]

[sub_resource type="VisualShaderNodeFloatConstant" id="205"]
constant = 0.5

[sub_resource type="VisualShaderNodeFloatConstant" id="206"]
constant = 0.5

[sub_resource type="VisualShaderNodeVec3Constant" id="207"]
constant = Vector3(0.5, 0.5, 0)

[sub_resource type="VisualShader" id="208"]
code = "shader_type canvas_item;
render_mode blend_mix;



// CircleShape2
#include \"res://addons/shaderV/rgba/generate_shapes/generateCircle2.gdshaderinc\"

void fragment() {
// Input:4
	vec2 n_out4p0 = UV;


// Vector3Constant:18
	vec3 n_out18p0 = vec3(0.500000, 0.500000, 0.000000);


// Vector3Constant:14
	vec3 n_out14p0 = vec3(1.000000, 1.000000, 0.000000);


// FloatConstant:15
	float n_out15p0 = 0.000000;


// FloatConstant:16
	float n_out16p0 = 0.500000;


// FloatConstant:17
	float n_out17p0 = 0.500000;


// ColorConstant:12
	vec4 n_out12p0 = vec4(0.593750, 0.000000, 1.000000, 1.000000);


	vec3 n_out11p0;
	float n_out11p1;
// CircleShape2:11
	float n_in11p7 = 1.00000;
	{
		vec4 n_out11p0n_out11p1 = _generateCircle2Func(vec3(n_out4p0, 0.0).xy, n_out18p0.xy, n_out14p0.xy, n_out15p0, n_out16p0, n_out17p0, vec4(vec3(n_out12p0.xyz), n_in11p7));
		n_out11p0 = n_out11p0n_out11p1.rgb;
		n_out11p1 = n_out11p0n_out11p1.a;
	}


// Output:0
	COLOR.rgb = n_out11p0;
	COLOR.a = n_out11p1;


}
"
graph_offset = Vector2(-94.2341, 77.3223)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(540, 200)
nodes/fragment/4/node = SubResource("175")
nodes/fragment/4/position = Vector2(-120, -20)
nodes/fragment/11/node = SubResource("201")
nodes/fragment/11/position = Vector2(320, 200)
nodes/fragment/12/node = SubResource("202")
nodes/fragment/12/position = Vector2(60, 520)
nodes/fragment/14/node = SubResource("203")
nodes/fragment/14/position = Vector2(-120, 180)
nodes/fragment/15/node = SubResource("204")
nodes/fragment/15/position = Vector2(40, 280)
nodes/fragment/16/node = SubResource("205")
nodes/fragment/16/position = Vector2(40, 360)
nodes/fragment/17/node = SubResource("206")
nodes/fragment/17/position = Vector2(40, 440)
nodes/fragment/18/node = SubResource("207")
nodes/fragment/18/position = Vector2(-120, 80)
nodes/fragment/connections = PackedInt32Array(11, 1, 0, 1, 12, 0, 11, 6, 4, 0, 11, 0, 16, 0, 11, 4, 17, 0, 11, 5, 14, 0, 11, 2, 18, 0, 11, 1, 15, 0, 11, 3, 11, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="209"]
shader = SubResource("208")

[sub_resource type="VisualShaderNodeColorConstant" id="225"]
constant = Color(1, 0.867188, 0, 1)

[sub_resource type="VisualShaderNodeCustom" id="226"]
default_input_values = [1, Vector3(0.5, 0.5, 0), 2, 3, 3, Vector3(1, 1, 0), 4, 0.0, 5, 0.0, 6, Vector3(1, 1, 1), 7, 1.0]
initialized = true
script = ExtResource("39")

[sub_resource type="VisualShaderNodeVec3Constant" id="227"]
constant = Vector3(0.5, 0.6, 0)

[sub_resource type="VisualShaderNodeVec3Constant" id="228"]
constant = Vector3(1, 1, 0)

[sub_resource type="VisualShaderNodeFloatConstant" id="229"]
constant = 3.0

[sub_resource type="VisualShaderNodeFloatConstant" id="230"]
constant = 0.064

[sub_resource type="VisualShaderNodeFloatConstant" id="231"]
constant = 0.05

[sub_resource type="VisualShader" id="232"]
code = "shader_type canvas_item;
render_mode blend_mix;



// RegularPolygonShape
#include \"res://addons/shaderV/rgba/generate_shapes/generateRegularNgon.gdshaderinc\"

void fragment() {
// Input:4
	vec2 n_out4p0 = UV;


// Vector3Constant:28
	vec3 n_out28p0 = vec3(0.500000, 0.600000, 0.000000);


// FloatConstant:31
	float n_out31p0 = 3.000000;


// Vector3Constant:29
	vec3 n_out29p0 = vec3(1.000000, 1.000000, 0.000000);


// FloatConstant:32
	float n_out32p0 = 0.064000;


// FloatConstant:33
	float n_out33p0 = 0.050000;


// ColorConstant:26
	vec4 n_out26p0 = vec4(1.000000, 0.867188, 0.000000, 1.000000);


	vec3 n_out27p0;
	float n_out27p1;
// RegularPolygonShape:27
	float n_in27p7 = 1.00000;
	{
		n_out27p0 = vec3(n_out26p0.xyz);
		n_out27p1 = _polygonFunc(vec3(n_out4p0, 0.0).xy, n_out28p0.xy, n_out29p0.xy, n_out31p0, n_out32p0, n_out33p0) * n_in27p7;
	}


// Output:0
	COLOR.rgb = n_out27p0;
	COLOR.a = n_out27p1;


}
"
graph_offset = Vector2(-310.568, -28.3627)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(540, 160)
nodes/fragment/4/node = SubResource("175")
nodes/fragment/4/position = Vector2(-140, -80)
nodes/fragment/26/node = SubResource("225")
nodes/fragment/26/position = Vector2(0, 440)
nodes/fragment/27/node = SubResource("226")
nodes/fragment/27/position = Vector2(260, 160)
nodes/fragment/28/node = SubResource("227")
nodes/fragment/28/position = Vector2(-140, 0)
nodes/fragment/29/node = SubResource("228")
nodes/fragment/29/position = Vector2(-140, 180)
nodes/fragment/31/node = SubResource("229")
nodes/fragment/31/position = Vector2(0, 100)
nodes/fragment/32/node = SubResource("230")
nodes/fragment/32/position = Vector2(0, 280)
nodes/fragment/33/node = SubResource("231")
nodes/fragment/33/position = Vector2(0, 360)
nodes/fragment/connections = PackedInt32Array(27, 1, 0, 1, 4, 0, 27, 0, 28, 0, 27, 1, 31, 0, 27, 2, 29, 0, 27, 3, 32, 0, 27, 4, 33, 0, 27, 5, 26, 0, 27, 6, 27, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="233"]
shader = SubResource("232")

[sub_resource type="VisualShaderNodeColorConstant" id="234"]
constant = Color(0, 0.552138, 1, 1)

[sub_resource type="VisualShaderNodeVec3Constant" id="235"]
constant = Vector3(0.5, 0.5, 0)

[sub_resource type="VisualShaderNodeCustom" id="236"]
default_input_values = [1, Vector3(0.5, 0.5, 0), 2, 70.0, 3, 1.0, 4, 1.0, 5, 0.0, 6, 0.0, 7, Vector3(1, 1, 1), 8, 1.0]
initialized = true
script = ExtResource("40")

[sub_resource type="VisualShaderNodeFloatConstant" id="237"]
constant = 70.0

[sub_resource type="VisualShaderNodeFloatConstant" id="238"]
constant = 10.0

[sub_resource type="VisualShaderNodeFloatConstant" id="239"]
constant = 1.2

[sub_resource type="VisualShaderNodeFloatConstant" id="240"]
constant = -2.0

[sub_resource type="VisualShaderNodeInput" id="241"]
input_name = "time"

[sub_resource type="VisualShader" id="242"]
code = "shader_type canvas_item;
render_mode blend_mix;



// SpiralShape
#include \"res://addons/shaderV/rgba/generate_shapes/generateSpiral.gdshaderinc\"

void fragment() {
// Input:4
	vec2 n_out4p0 = UV;


// Vector3Constant:38
	vec3 n_out38p0 = vec3(0.500000, 0.500000, 0.000000);


// FloatConstant:41
	float n_out41p0 = 70.000000;


// FloatConstant:42
	float n_out42p0 = 10.000000;


// FloatConstant:43
	float n_out43p0 = 1.200000;


// FloatConstant:44
	float n_out44p0 = -2.000000;


// Input:45
	float n_out45p0 = TIME;


// ColorConstant:37
	vec4 n_out37p0 = vec4(0.000000, 0.552138, 1.000000, 1.000000);


	vec3 n_out40p0;
	float n_out40p1;
// SpiralShape:40
	float n_in40p8 = 1.00000;
	{
		vec4 n_out40p0n_out40p1 = _generateSpiralFunc(vec3(n_out4p0, 0.0).xy, n_out38p0.xy, n_out41p0, n_out42p0, n_out44p0, n_out43p0, n_out45p0, vec4(vec3(n_out37p0.xyz), n_in40p8));
		n_out40p0 = n_out40p0n_out40p1.rgb;
		n_out40p1 = n_out40p0n_out40p1.a;
	}


// Output:0
	COLOR.rgb = n_out40p0;
	COLOR.a = n_out40p1;


}
"
graph_offset = Vector2(-271.496, -54.4786)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(580, 200)
nodes/fragment/4/node = SubResource("175")
nodes/fragment/4/position = Vector2(-140, -40)
nodes/fragment/37/node = SubResource("234")
nodes/fragment/37/position = Vector2(0, 540)
nodes/fragment/38/node = SubResource("235")
nodes/fragment/38/position = Vector2(-140, 40)
nodes/fragment/40/node = SubResource("236")
nodes/fragment/40/position = Vector2(340, 200)
nodes/fragment/41/node = SubResource("237")
nodes/fragment/41/position = Vector2(0, 140)
nodes/fragment/42/node = SubResource("238")
nodes/fragment/42/position = Vector2(0, 220)
nodes/fragment/43/node = SubResource("239")
nodes/fragment/43/position = Vector2(0, 300)
nodes/fragment/44/node = SubResource("240")
nodes/fragment/44/position = Vector2(0, 380)
nodes/fragment/45/node = SubResource("241")
nodes/fragment/45/position = Vector2(-120, 460)
nodes/fragment/connections = PackedInt32Array(4, 0, 40, 0, 38, 0, 40, 1, 41, 0, 40, 2, 42, 0, 40, 3, 43, 0, 40, 4, 44, 0, 40, 5, 45, 0, 40, 6, 37, 0, 40, 7, 40, 1, 0, 1, 40, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="243"]
shader = SubResource("242")

[sub_resource type="VisualShaderNodeInput" id="245"]
input_name = "uv"

[sub_resource type="VisualShaderNodeFloatConstant" id="246"]
constant = 21.0

[sub_resource type="VisualShaderNodeFloatConstant" id="247"]
constant = 0.3

[sub_resource type="VisualShaderNodeFloatConstant" id="248"]
constant = 0.2

[sub_resource type="VisualShaderNodeInput" id="249"]
input_name = "time"

[sub_resource type="VisualShaderNodeColorConstant" id="250"]
constant = Color(0, 1, 0.557237, 1)

[sub_resource type="VisualShaderNodeCustom" id="611"]
default_input_values = [1, 21, 2, 0.5, 3, 1, 4, 0, 5, Vector3(1, 1, 1), 6, 1.0]
initialized = true
script = ExtResource("41")

[sub_resource type="VisualShader" id="251"]
code = "shader_type canvas_item;
render_mode blend_mix;



// ScanLinesSharpShape
#include \"res://addons/shaderV/rgba/generate_shapes/scanLinesSharp.gdshaderinc\"

void fragment() {
// Input:47
	vec2 n_out47p0 = UV;


// FloatConstant:48
	float n_out48p0 = 21.000000;


// FloatConstant:49
	float n_out49p0 = 0.300000;


// FloatConstant:50
	float n_out50p0 = 0.200000;


// Input:51
	float n_out51p0 = TIME;


// ColorConstant:52
	vec4 n_out52p0 = vec4(0.000000, 1.000000, 0.557237, 1.000000);


	vec3 n_out53p0;
	float n_out53p1;
// ScanLinesSharpShape:53
	float n_in53p6 = 1.00000;
	{
		n_out53p0 = vec3(n_out52p0.xyz);
		n_out53p1 = _scanLinesSharpFunc(vec3(n_out47p0, 0.0).xy, n_out48p0, n_out49p0, n_out50p0, n_out51p0) * float(n_in53p6);
	}


// Output:0
	COLOR.rgb = n_out53p0;
	COLOR.a = n_out53p1;


}
"
graph_offset = Vector2(36, 196)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(660, 220)
nodes/fragment/47/node = SubResource("245")
nodes/fragment/47/position = Vector2(-40, 0)
nodes/fragment/48/node = SubResource("246")
nodes/fragment/48/position = Vector2(100, 80)
nodes/fragment/49/node = SubResource("247")
nodes/fragment/49/position = Vector2(100, 160)
nodes/fragment/50/node = SubResource("248")
nodes/fragment/50/position = Vector2(100, 240)
nodes/fragment/51/node = SubResource("249")
nodes/fragment/51/position = Vector2(-20, 320)
nodes/fragment/52/node = SubResource("250")
nodes/fragment/52/position = Vector2(100, 400)
nodes/fragment/53/node = SubResource("611")
nodes/fragment/53/position = Vector2(380, 220)
nodes/fragment/connections = PackedInt32Array(53, 1, 0, 1, 47, 0, 53, 0, 48, 0, 53, 1, 49, 0, 53, 2, 50, 0, 53, 3, 51, 0, 53, 4, 52, 0, 53, 5, 53, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="252"]
shader = SubResource("251")

[sub_resource type="VisualShaderNodeColorConstant" id="253"]
constant = Color(0.623529, 0.439216, 1, 1)

[sub_resource type="VisualShaderNodeCustom" id="254"]
default_input_values = [1, 0.5, 2, 20.0, 3, Vector3(1, 1, 1), 4, 1.0]
initialized = true
script = ExtResource("42")

[sub_resource type="VisualShaderNodeFloatConstant" id="255"]
constant = 0.3

[sub_resource type="VisualShaderNodeFloatConstant" id="256"]
constant = 15.0

[sub_resource type="VisualShader" id="257"]
code = "shader_type canvas_item;
render_mode blend_mix;



// RandomStripesShape
#include \"res://addons/shaderV/rgba/generate_shapes/stripesRandom.gdshaderinc\"

void fragment() {
// Input:47
	vec2 n_out47p0 = UV;


// FloatConstant:55
	float n_out55p0 = 0.300000;


// FloatConstant:56
	float n_out56p0 = 15.000000;


// ColorConstant:53
	vec4 n_out53p0 = vec4(0.623529, 0.439216, 1.000000, 1.000000);


	vec3 n_out54p0;
	float n_out54p1;
// RandomStripesShape:54
	float n_in54p4 = 1.00000;
	{
		n_out54p0 = vec3(n_out53p0.xyz);
		n_out54p1 = _generateRandomStripesFunc(vec3(n_out47p0, 0.0).xy, n_out55p0, n_out56p0) * float(n_in54p4);
	}


// Output:0
	COLOR.rgb = n_out54p0;
	COLOR.a = n_out54p1;


}
"
graph_offset = Vector2(237.627, 299.737)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(660, 220)
nodes/fragment/47/node = SubResource("245")
nodes/fragment/47/position = Vector2(0, 140)
nodes/fragment/53/node = SubResource("253")
nodes/fragment/53/position = Vector2(140, 380)
nodes/fragment/54/node = SubResource("254")
nodes/fragment/54/position = Vector2(420, 220)
nodes/fragment/55/node = SubResource("255")
nodes/fragment/55/position = Vector2(140, 220)
nodes/fragment/56/node = SubResource("256")
nodes/fragment/56/position = Vector2(140, 300)
nodes/fragment/connections = PackedInt32Array(47, 0, 54, 0, 53, 0, 54, 3, 55, 0, 54, 1, 56, 0, 54, 2, 54, 0, 0, 0, 54, 1, 0, 1)

[sub_resource type="ShaderMaterial" id="258"]
shader = SubResource("257")

[sub_resource type="VisualShaderNodeCustom" id="259"]
output_port_for_preview = 0
default_input_values = [1, Vector3(0, 0, 0), 2, 5]
initialized = true
script = ExtResource("43")

[sub_resource type="VisualShaderNodeVec3Constant" id="260"]

[sub_resource type="VisualShaderNodeFloatConstant" id="261"]
constant = 10.0

[sub_resource type="VisualShader" id="262"]
code = "shader_type canvas_item;
render_mode blend_mix;



// GenericNoise2D
#include \"res://addons/shaderV/rgba/noise/generic2d.gdshaderinc\"

void fragment() {
// Input:47
	vec2 n_out47p0 = UV;


// Vector3Constant:56
	vec3 n_out56p0 = vec3(0.000000, 0.000000, 0.000000);


// FloatConstant:57
	float n_out57p0 = 10.000000;


	float n_out55p0;
// GenericNoise2D:55
	{
		n_out55p0 = _genericNoise2D((vec3(n_out47p0, 0.0).xy + n_out56p0.xy) * n_out57p0);
	}


// Output:0
	COLOR.rgb = vec3(n_out55p0);


}
"
graph_offset = Vector2(41.1867, 31.5944)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(660, 220)
nodes/fragment/47/node = SubResource("245")
nodes/fragment/47/position = Vector2(60, 140)
nodes/fragment/55/node = SubResource("259")
nodes/fragment/55/position = Vector2(440, 220)
nodes/fragment/56/node = SubResource("260")
nodes/fragment/56/position = Vector2(60, 220)
nodes/fragment/57/node = SubResource("261")
nodes/fragment/57/position = Vector2(200, 320)
nodes/fragment/connections = PackedInt32Array(47, 0, 55, 0, 56, 0, 55, 1, 57, 0, 55, 2, 55, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="263"]
shader = SubResource("262")

[sub_resource type="VisualShaderNodeCustom" id="264"]
default_input_values = [1, Vector3(0, 0, 0), 2, 5, 3, Vector3(0, 0, 0)]
initialized = true
script = ExtResource("44")

[sub_resource type="VisualShaderNodeFloatConstant" id="265"]
constant = 10.0

[sub_resource type="VisualShaderNodeVec3Constant" id="266"]

[sub_resource type="VisualShaderNodeVec3Constant" id="267"]

[sub_resource type="VisualShader" id="268"]
code = "shader_type canvas_item;
render_mode blend_mix;



// PerlinNoise2D
#include \"res://addons/shaderV/rgba/noise/perlin2d.gdshaderinc\"

void fragment() {
// Input:47
	vec2 n_out47p0 = UV;


// Vector3Constant:68
	vec3 n_out68p0 = vec3(0.000000, 0.000000, 0.000000);


// FloatConstant:67
	float n_out67p0 = 10.000000;


// Vector3Constant:69
	vec3 n_out69p0 = vec3(0.000000, 0.000000, 0.000000);


	float n_out66p0;
// PerlinNoise2D:66
	{
		n_out66p0 = _perlin2dNoiseFunc((vec3(n_out47p0, 0.0).xy+n_out68p0.xy)*n_out67p0, n_out69p0.xy);
	}


// Output:0
	COLOR.rgb = vec3(n_out66p0);


}
"
graph_offset = Vector2(237, 169)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(700, 220)
nodes/fragment/47/node = SubResource("245")
nodes/fragment/47/position = Vector2(60, 120)
nodes/fragment/66/node = SubResource("264")
nodes/fragment/66/position = Vector2(480, 220)
nodes/fragment/67/node = SubResource("265")
nodes/fragment/67/position = Vector2(200, 300)
nodes/fragment/68/node = SubResource("266")
nodes/fragment/68/position = Vector2(60, 200)
nodes/fragment/69/node = SubResource("267")
nodes/fragment/69/position = Vector2(60, 380)
nodes/fragment/connections = PackedInt32Array(47, 0, 66, 0, 67, 0, 66, 2, 69, 0, 66, 3, 68, 0, 66, 1, 66, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="269"]
shader = SubResource("268")

[sub_resource type="VisualShaderNodeCustom" id="270"]
default_input_values = [1, Vector3(0, 0, 0), 2, 5, 3, 0]
initialized = true
script = ExtResource("45")

[sub_resource type="VisualShaderNodeFloatConstant" id="271"]
constant = 10.0

[sub_resource type="VisualShaderNodeVec3Constant" id="272"]

[sub_resource type="VisualShaderNodeInput" id="273"]
input_name = "time"

[sub_resource type="VisualShader" id="274"]
code = "shader_type canvas_item;
render_mode blend_mix;



// PerlinNoise3D
#include \"res://addons/shaderV/rgba/noise/perlin3d.gdshaderinc\"

void fragment() {
// Input:47
	vec2 n_out47p0 = UV;


// Vector3Constant:64
	vec3 n_out64p0 = vec3(0.000000, 0.000000, 0.000000);


// FloatConstant:63
	float n_out63p0 = 10.000000;


// Input:65
	float n_out65p0 = TIME;


	float n_out62p0;
// PerlinNoise3D:62
	{
		n_out62p0 = _perlin3dNoiseFunc(vec3((vec3(n_out47p0, 0.0).xy+n_out64p0.xy) * n_out63p0, n_out65p0));
	}


// Output:0
	COLOR.rgb = vec3(n_out62p0);


}
"
graph_offset = Vector2(59.0211, 97.2226)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(680, 280)
nodes/fragment/47/node = SubResource("245")
nodes/fragment/47/position = Vector2(100, 180)
nodes/fragment/62/node = SubResource("270")
nodes/fragment/62/position = Vector2(480, 280)
nodes/fragment/63/node = SubResource("271")
nodes/fragment/63/position = Vector2(220, 360)
nodes/fragment/64/node = SubResource("272")
nodes/fragment/64/position = Vector2(80, 260)
nodes/fragment/65/node = SubResource("273")
nodes/fragment/65/position = Vector2(100, 440)
nodes/fragment/connections = PackedInt32Array(47, 0, 62, 0, 63, 0, 62, 2, 64, 0, 62, 1, 65, 0, 62, 3, 62, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="275"]
shader = SubResource("274")

[sub_resource type="VisualShaderNodeCustom" id="276"]
default_input_values = [1, Vector3(0, 0, 0), 2, 5, 3, Vector3(0, 0, 0), 4, 0]
initialized = true
script = ExtResource("46")

[sub_resource type="VisualShaderNodeFloatConstant" id="277"]
constant = 10.0

[sub_resource type="VisualShaderNodeVec3Constant" id="278"]

[sub_resource type="VisualShaderNodeVec3Constant" id="279"]
constant = Vector3(1, 10, 0)

[sub_resource type="VisualShader" id="280"]
code = "shader_type canvas_item;
render_mode blend_mix;



// PerlinPeriodicNoise3D
#include \"res://addons/shaderV/rgba/noise/perlinPeriodic3d.gdshaderinc\"

void fragment() {
// Input:47
	vec2 n_out47p0 = UV;


// Vector3Constant:68
	vec3 n_out68p0 = vec3(0.000000, 0.000000, 0.000000);


// FloatConstant:67
	float n_out67p0 = 10.000000;


// Vector3Constant:69
	vec3 n_out69p0 = vec3(1.000000, 10.000000, 0.000000);


// Input:65
	float n_out65p0 = TIME;


	float n_out66p0;
// PerlinPeriodicNoise3D:66
	{
		n_out66p0 = _perlin3dPeriodicNoiseFunc(vec3((vec3(n_out47p0, 0.0).xy + n_out68p0.xy) * n_out67p0, n_out65p0), n_out69p0);
	}


// Output:0
	COLOR.rgb = vec3(n_out66p0);


}
"
graph_offset = Vector2(278, 221)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(720, 280)
nodes/fragment/47/node = SubResource("245")
nodes/fragment/47/position = Vector2(80, 160)
nodes/fragment/65/node = SubResource("273")
nodes/fragment/65/position = Vector2(100, 540)
nodes/fragment/66/node = SubResource("276")
nodes/fragment/66/position = Vector2(460, 280)
nodes/fragment/67/node = SubResource("277")
nodes/fragment/67/position = Vector2(220, 340)
nodes/fragment/68/node = SubResource("278")
nodes/fragment/68/position = Vector2(80, 240)
nodes/fragment/69/node = SubResource("279")
nodes/fragment/69/position = Vector2(80, 420)
nodes/fragment/connections = PackedInt32Array(47, 0, 66, 0, 67, 0, 66, 2, 68, 0, 66, 1, 69, 0, 66, 3, 65, 0, 66, 4, 66, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="281"]
shader = SubResource("280")

[sub_resource type="VisualShaderNodeCustom" id="282"]
default_input_values = [1, Vector3(0, 0, 0), 2, 5, 3, 1.0, 4, 0]
initialized = true
script = ExtResource("47")

[sub_resource type="VisualShaderNodeFloatConstant" id="283"]
constant = 10.0

[sub_resource type="VisualShaderNodeVec3Constant" id="284"]

[sub_resource type="VisualShaderNodeFloatConstant" id="285"]
constant = 1.0

[sub_resource type="VisualShader" id="286"]
code = "shader_type canvas_item;
render_mode blend_mix;



// PerlinNoise4D
#include \"res://addons/shaderV/rgba/noise/perlin4d.gdshaderinc\"

void fragment() {
// Input:47
	vec2 n_out47p0 = UV;


// Vector3Constant:72
	vec3 n_out72p0 = vec3(0.000000, 0.000000, 0.000000);


// FloatConstant:71
	float n_out71p0 = 10.000000;


// FloatConstant:73
	float n_out73p0 = 1.000000;


// Input:65
	float n_out65p0 = TIME;


	float n_out70p0;
// PerlinNoise4D:70
	{
		n_out70p0 = _perlin4dNoiseFunc(vec4((vec3(n_out47p0, 0.0).xy + n_out72p0.xy) * n_out71p0, n_out73p0, n_out65p0));
	}


// Output:0
	COLOR.rgb = vec3(n_out70p0);


}
"
graph_offset = Vector2(-42.9457, 76.4218)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(720, 280)
nodes/fragment/47/node = SubResource("245")
nodes/fragment/47/position = Vector2(80, 180)
nodes/fragment/65/node = SubResource("273")
nodes/fragment/65/position = Vector2(100, 520)
nodes/fragment/70/node = SubResource("282")
nodes/fragment/70/position = Vector2(500, 280)
nodes/fragment/71/node = SubResource("283")
nodes/fragment/71/position = Vector2(220, 360)
nodes/fragment/72/node = SubResource("284")
nodes/fragment/72/position = Vector2(80, 260)
nodes/fragment/73/node = SubResource("285")
nodes/fragment/73/position = Vector2(220, 440)
nodes/fragment/connections = PackedInt32Array(47, 0, 70, 0, 71, 0, 70, 2, 65, 0, 70, 4, 73, 0, 70, 3, 70, 0, 0, 0, 72, 0, 70, 1)

[sub_resource type="ShaderMaterial" id="287"]
shader = SubResource("286")

[sub_resource type="VisualShaderNodeInput" id="288"]
input_name = "uv"

[sub_resource type="VisualShaderNodeFloatConstant" id="289"]
constant = 10.0

[sub_resource type="VisualShaderNodeVec3Constant" id="290"]

[sub_resource type="VisualShaderNodeCustom" id="291"]
default_input_values = [1, Vector3(0, 0, 0), 2, 5]
initialized = true
script = ExtResource("48")

[sub_resource type="VisualShader" id="292"]
code = "shader_type canvas_item;
render_mode blend_mix;



// SimplexNoise2D
#include \"res://addons/shaderV/rgba/noise/simplex2d.gdshaderinc\"

void fragment() {
// Input:47
	vec2 n_out47p0 = UV;


// Vector3Constant:72
	vec3 n_out72p0 = vec3(0.000000, 0.000000, 0.000000);


// FloatConstant:71
	float n_out71p0 = 10.000000;


	float n_out74p0;
// SimplexNoise2D:74
	{
		n_out74p0 = _simplex2dNoiseFunc((vec3(n_out47p0, 0.0).xy+n_out72p0.xy)*n_out71p0);
	}


// Output:0
	COLOR.rgb = vec3(n_out74p0);


}
"
graph_offset = Vector2(304, 210)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(720, 280)
nodes/fragment/47/node = SubResource("288")
nodes/fragment/47/position = Vector2(100, 200)
nodes/fragment/71/node = SubResource("289")
nodes/fragment/71/position = Vector2(240, 380)
nodes/fragment/72/node = SubResource("290")
nodes/fragment/72/position = Vector2(100, 280)
nodes/fragment/74/node = SubResource("291")
nodes/fragment/74/position = Vector2(500, 280)
nodes/fragment/connections = PackedInt32Array(47, 0, 74, 0, 72, 0, 74, 1, 71, 0, 74, 2, 74, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="293"]
shader = SubResource("292")

[sub_resource type="VisualShaderNodeFloatConstant" id="294"]
constant = 10.0

[sub_resource type="VisualShaderNodeVec3Constant" id="295"]

[sub_resource type="VisualShaderNodeCustom" id="296"]
default_input_values = [1, Vector3(0, 0, 0), 2, 5, 3, 0]
initialized = true
script = ExtResource("49")

[sub_resource type="VisualShaderNodeInput" id="297"]
input_name = "time"

[sub_resource type="VisualShader" id="298"]
code = "shader_type canvas_item;
render_mode blend_mix;



// SimplexNoise3D
#include \"res://addons/shaderV/rgba/noise/simplex3d.gdshaderinc\"

void fragment() {
// Input:47
	vec2 n_out47p0 = UV;


// Vector3Constant:76
	vec3 n_out76p0 = vec3(0.000000, 0.000000, 0.000000);


// FloatConstant:75
	float n_out75p0 = 10.000000;


// Input:78
	float n_out78p0 = TIME;


	float n_out77p0;
// SimplexNoise3D:77
	{
		n_out77p0 = _simplex3dNoiseFunc(vec3((vec3(n_out47p0, 0.0).xy + n_out76p0.xy) * n_out75p0, n_out78p0));
	}


// Output:0
	COLOR.rgb = vec3(n_out77p0);


}
"
graph_offset = Vector2(244, 228)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(720, 280)
nodes/fragment/47/node = SubResource("288")
nodes/fragment/47/position = Vector2(80, 180)
nodes/fragment/75/node = SubResource("294")
nodes/fragment/75/position = Vector2(220, 360)
nodes/fragment/76/node = SubResource("295")
nodes/fragment/76/position = Vector2(80, 260)
nodes/fragment/77/node = SubResource("296")
nodes/fragment/77/position = Vector2(500, 280)
nodes/fragment/78/node = SubResource("297")
nodes/fragment/78/position = Vector2(100, 440)
nodes/fragment/connections = PackedInt32Array(47, 0, 77, 0, 76, 0, 77, 1, 75, 0, 77, 2, 78, 0, 77, 3, 77, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="299"]
shader = SubResource("298")

[sub_resource type="VisualShaderNodeVec3Constant" id="300"]

[sub_resource type="VisualShaderNodeCustom" id="301"]
default_input_values = [1, Vector3(0, 0, 0), 2, 5, 3, 1, 4, 0]
initialized = true
script = ExtResource("50")

[sub_resource type="VisualShaderNodeFloatConstant" id="302"]
constant = 10.0

[sub_resource type="VisualShaderNodeFloatConstant" id="303"]
constant = 1.0

[sub_resource type="VisualShader" id="304"]
code = "shader_type canvas_item;
render_mode blend_mix;



// SimplexNoise4D
#include \"res://addons/shaderV/rgba/noise/simplex4d.gdshaderinc\"

void fragment() {
// Input:47
	vec2 n_out47p0 = UV;


// Vector3Constant:80
	vec3 n_out80p0 = vec3(0.000000, 0.000000, 0.000000);


// FloatConstant:82
	float n_out82p0 = 10.000000;


// FloatConstant:83
	float n_out83p0 = 1.000000;


// Input:78
	float n_out78p0 = TIME;


	float n_out81p0;
// SimplexNoise4D:81
	{
		n_out81p0 = _simplex4dNoiseFunc(vec4((vec3(n_out47p0, 0.0).xy + n_out80p0.xy) * n_out82p0, n_out83p0, n_out78p0));
	}


// Output:0
	COLOR.rgb = vec3(n_out81p0);


}
"
graph_offset = Vector2(394, 329)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(840, 400)
nodes/fragment/47/node = SubResource("288")
nodes/fragment/47/position = Vector2(160, 260)
nodes/fragment/78/node = SubResource("297")
nodes/fragment/78/position = Vector2(180, 600)
nodes/fragment/80/node = SubResource("300")
nodes/fragment/80/position = Vector2(160, 340)
nodes/fragment/81/node = SubResource("301")
nodes/fragment/81/position = Vector2(600, 400)
nodes/fragment/82/node = SubResource("302")
nodes/fragment/82/position = Vector2(300, 440)
nodes/fragment/83/node = SubResource("303")
nodes/fragment/83/position = Vector2(300, 520)
nodes/fragment/connections = PackedInt32Array(47, 0, 81, 0, 80, 0, 81, 1, 82, 0, 81, 2, 83, 0, 81, 3, 78, 0, 81, 4, 81, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="305"]
shader = SubResource("304")

[sub_resource type="VisualShaderNodeCustom" id="306"]
default_input_values = [1, Vector3(0, 0, 0), 2, 5, 3, 1]
initialized = true
script = ExtResource("51")

[sub_resource type="VisualShaderNodeVec3Constant" id="307"]

[sub_resource type="VisualShaderNodeFloatConstant" id="308"]
constant = 10.0

[sub_resource type="VisualShaderNodeFloatConstant" id="309"]
constant = 1.0

[sub_resource type="VisualShader" id="310"]
code = "shader_type canvas_item;
render_mode blend_mix;



// WorleyNoise2D
#include \"res://addons/shaderV/rgba/noise/worley2d.gdshaderinc\"

void fragment() {
// Input:47
	vec2 n_out47p0 = UV;


// Vector3Constant:85
	vec3 n_out85p0 = vec3(0.000000, 0.000000, 0.000000);


// FloatConstant:86
	float n_out86p0 = 10.000000;


// FloatConstant:87
	float n_out87p0 = 1.000000;


	float n_out84p0;
	float n_out84p1;
// WorleyNoise2D:84
	{
		vec2 n_out84p0n_out84p1 = _cellular2dNoiseFunc((vec3(n_out47p0, 0.0).xy+n_out85p0.xy)*n_out86p0, min(max(n_out87p0, 0.0), 1.0));
		n_out84p0 = n_out84p0n_out84p1.x;
		n_out84p1 = n_out84p0n_out84p1.y;
	}


// Output:0
	COLOR.rgb = vec3(n_out84p0);


}
"
graph_offset = Vector2(3.74271, 11.8198)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(740, 280)
nodes/fragment/47/node = SubResource("288")
nodes/fragment/47/position = Vector2(100, 140)
nodes/fragment/84/node = SubResource("306")
nodes/fragment/84/position = Vector2(500, 280)
nodes/fragment/85/node = SubResource("307")
nodes/fragment/85/position = Vector2(90, 230)
nodes/fragment/86/node = SubResource("308")
nodes/fragment/86/position = Vector2(230, 330)
nodes/fragment/87/node = SubResource("309")
nodes/fragment/87/position = Vector2(230, 410)
nodes/fragment/connections = PackedInt32Array(85, 0, 84, 1, 86, 0, 84, 2, 87, 0, 84, 3, 47, 0, 84, 0, 84, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="311"]
shader = SubResource("310")

[sub_resource type="VisualShaderNodeCustom" id="312"]
default_input_values = [1, Vector3(0, 0, 0), 2, 5, 3, 1]
initialized = true
script = ExtResource("52")

[sub_resource type="VisualShaderNodeVec3Constant" id="313"]

[sub_resource type="VisualShaderNodeFloatConstant" id="314"]
constant = 10.0

[sub_resource type="VisualShaderNodeFloatConstant" id="315"]
constant = 1.0

[sub_resource type="VisualShader" id="316"]
code = "shader_type canvas_item;
render_mode blend_mix;



// WorleyNoise2x2
#include \"res://addons/shaderV/rgba/noise/worley2x2.gdshaderinc\"

void fragment() {
// Input:47
	vec2 n_out47p0 = UV;


// Vector3Constant:89
	vec3 n_out89p0 = vec3(0.000000, 0.000000, 0.000000);


// FloatConstant:90
	float n_out90p0 = 10.000000;


// FloatConstant:91
	float n_out91p0 = 1.000000;


	float n_out88p0;
// WorleyNoise2x2:88
	{
		n_out88p0 = _cellular2x2NoiseFunc((vec3(n_out47p0, 0.0).xy+n_out89p0.xy)*n_out90p0, min(max(n_out91p0, 0.0), 1.0));
	}


// Output:0
	COLOR.rgb = vec3(n_out88p0);


}
"
graph_offset = Vector2(240, 220)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(740, 280)
nodes/fragment/47/node = SubResource("288")
nodes/fragment/47/position = Vector2(100, 140)
nodes/fragment/88/node = SubResource("312")
nodes/fragment/88/position = Vector2(520, 280)
nodes/fragment/89/node = SubResource("313")
nodes/fragment/89/position = Vector2(100, 240)
nodes/fragment/90/node = SubResource("314")
nodes/fragment/90/position = Vector2(240, 340)
nodes/fragment/91/node = SubResource("315")
nodes/fragment/91/position = Vector2(240, 420)
nodes/fragment/connections = PackedInt32Array(47, 0, 88, 0, 89, 0, 88, 1, 90, 0, 88, 2, 91, 0, 88, 3, 88, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="317"]
shader = SubResource("316")

[sub_resource type="VisualShaderNodeCustom" id="318"]
default_input_values = [1, Vector3(0, 0, 0), 2, 5, 3, 1, 4, 0]
initialized = true
script = ExtResource("53")

[sub_resource type="VisualShaderNodeVec3Constant" id="319"]

[sub_resource type="VisualShaderNodeFloatConstant" id="320"]
constant = 10.0

[sub_resource type="VisualShaderNodeFloatConstant" id="321"]
constant = 1.0

[sub_resource type="VisualShaderNodeInput" id="322"]
input_name = "time"

[sub_resource type="VisualShader" id="323"]
code = "shader_type canvas_item;
render_mode blend_mix;



// WorleyNoise2x2x2
#include \"res://addons/shaderV/rgba/noise/worley2x2x2.gdshaderinc\"

void fragment() {
// Input:47
	vec2 n_out47p0 = UV;


// Vector3Constant:93
	vec3 n_out93p0 = vec3(0.000000, 0.000000, 0.000000);


// FloatConstant:94
	float n_out94p0 = 10.000000;


// FloatConstant:95
	float n_out95p0 = 1.000000;


// Input:96
	float n_out96p0 = TIME;


	float n_out92p0;
// WorleyNoise2x2x2:92
	{
		n_out92p0 = _cellular2x2x2NoiseFunc(vec3((vec3(n_out47p0, 0.0).xy + n_out93p0.xy) * n_out94p0, n_out96p0), min(max(n_out95p0, 0.0), 1.0));
	}


// Output:0
	COLOR.rgb = vec3(n_out92p0);


}
"
graph_offset = Vector2(-10.3489, 46.022)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(760, 280)
nodes/fragment/47/node = SubResource("288")
nodes/fragment/47/position = Vector2(120, 140)
nodes/fragment/92/node = SubResource("318")
nodes/fragment/92/position = Vector2(520, 280)
nodes/fragment/93/node = SubResource("319")
nodes/fragment/93/position = Vector2(120, 220)
nodes/fragment/94/node = SubResource("320")
nodes/fragment/94/position = Vector2(260, 320)
nodes/fragment/95/node = SubResource("321")
nodes/fragment/95/position = Vector2(260, 400)
nodes/fragment/96/node = SubResource("322")
nodes/fragment/96/position = Vector2(140, 480)
nodes/fragment/connections = PackedInt32Array(47, 0, 92, 0, 93, 0, 92, 1, 94, 0, 92, 2, 95, 0, 92, 3, 96, 0, 92, 4, 92, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="324"]
shader = SubResource("323")

[sub_resource type="VisualShaderNodeFloatConstant" id="325"]
constant = 1.0

[sub_resource type="VisualShaderNodeCustom" id="326"]
default_input_values = [1, Vector3(0, 0, 0), 2, 5, 3, 1, 4, 0]
initialized = true
script = ExtResource("54")

[sub_resource type="VisualShaderNodeVec3Constant" id="327"]

[sub_resource type="VisualShaderNodeFloatConstant" id="328"]
constant = 10.0

[sub_resource type="VisualShader" id="329"]
code = "shader_type canvas_item;
render_mode blend_mix;



// WorleyNoise3D
#include \"res://addons/shaderV/rgba/noise/worley3d.gdshaderinc\"

void fragment() {
// Input:47
	vec2 n_out47p0 = UV;


// Vector3Constant:98
	vec3 n_out98p0 = vec3(0.000000, 0.000000, 0.000000);


// FloatConstant:99
	float n_out99p0 = 10.000000;


// FloatConstant:100
	float n_out100p0 = 1.000000;


// Input:96
	float n_out96p0 = TIME;


	float n_out97p0;
	float n_out97p1;
// WorleyNoise3D:97
	{
		vec2 n_out97p0n_out97p1 = _cellular3dNoiseFunc(vec3((vec3(n_out47p0, 0.0).xy+n_out98p0.xy)*n_out99p0, n_out96p0), min(max(n_out100p0, 0.0), 1.0));
		n_out97p0 = n_out97p0n_out97p1.x;
		n_out97p1 = n_out97p0n_out97p1.y;
	}


// Output:0
	COLOR.rgb = vec3(n_out97p0);


}
"
graph_offset = Vector2(285, 205)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(760, 280)
nodes/fragment/47/node = SubResource("288")
nodes/fragment/47/position = Vector2(120, 140)
nodes/fragment/96/node = SubResource("322")
nodes/fragment/96/position = Vector2(140, 500)
nodes/fragment/97/node = SubResource("326")
nodes/fragment/97/position = Vector2(540, 280)
nodes/fragment/98/node = SubResource("327")
nodes/fragment/98/position = Vector2(120, 220)
nodes/fragment/99/node = SubResource("328")
nodes/fragment/99/position = Vector2(260, 320)
nodes/fragment/100/node = SubResource("325")
nodes/fragment/100/position = Vector2(260, 400)
nodes/fragment/connections = PackedInt32Array(47, 0, 97, 0, 98, 0, 97, 1, 99, 0, 97, 2, 100, 0, 97, 3, 96, 0, 97, 4, 97, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="330"]
shader = SubResource("329")

[sub_resource type="VisualShaderNodeTexture" id="332"]
expanded_output_ports = [0]
source = 2

[sub_resource type="VisualShaderNodeFloatConstant" id="333"]
constant = 0.5

[sub_resource type="VisualShaderNodeFloatConstant" id="334"]
constant = 2.0

[sub_resource type="VisualShaderNodeFloatConstant" id="335"]
constant = 10.0

[sub_resource type="VisualShaderNodeCustom" id="610"]
default_input_values = [1, 1.0, 2, 1.0, 3, 1.0]
initialized = true
script = ExtResource("23")

[sub_resource type="VisualShader" id="336"]
code = "shader_type canvas_item;
render_mode blend_mix;



// BCSAdjustment
#include \"res://addons/shaderV/rgba/BCSAdjustment.gdshaderinc\"

void fragment() {
	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(TEXTURE, UV);
	float n_out3p4 = n_out3p0.a;


// FloatConstant:4
	float n_out4p0 = 0.500000;


// FloatConstant:5
	float n_out5p0 = 2.000000;


// FloatConstant:6
	float n_out6p0 = 10.000000;


	vec3 n_out7p0;
// BCSAdjustment:7
	{
		n_out7p0 = _applyBCS(vec3(n_out3p0.xyz), vec3(n_out4p0, n_out5p0, n_out6p0));
	}


// Output:0
	COLOR.rgb = n_out7p0;
	COLOR.a = n_out3p4;


}
"
graph_offset = Vector2(-208.508, -133.703)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(400, -60)
nodes/fragment/3/node = SubResource("332")
nodes/fragment/3/position = Vector2(-200, 140)
nodes/fragment/4/node = SubResource("333")
nodes/fragment/4/position = Vector2(-140, -60)
nodes/fragment/5/node = SubResource("334")
nodes/fragment/5/position = Vector2(-140, 0)
nodes/fragment/6/node = SubResource("335")
nodes/fragment/6/position = Vector2(-140, 60)
nodes/fragment/7/node = SubResource("610")
nodes/fragment/7/position = Vector2(140, -60)
nodes/fragment/connections = PackedInt32Array(3, 0, 7, 0, 4, 0, 7, 1, 5, 0, 7, 2, 6, 0, 7, 3, 7, 0, 0, 0, 3, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="337"]
shader = SubResource("336")

[sub_resource type="VisualShaderNodeCustom" id="338"]
default_input_values = [1, 0.5]
initialized = true
script = ExtResource("56")

[sub_resource type="VisualShaderNodeFloatConstant" id="339"]
constant = 0.5

[sub_resource type="VisualShader" id="340"]
code = "shader_type canvas_item;
render_mode blend_mix;



// BlackAndWhite
#include \"res://addons/shaderV/rgba/blackNwhite.gdshaderinc\"

void fragment() {
	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(TEXTURE, UV);
	float n_out3p4 = n_out3p0.a;


// FloatConstant:8
	float n_out8p0 = 0.500000;


	vec3 n_out7p0;
// BlackAndWhite:7
	{
		n_out7p0 = blackNwhite(vec3(n_out3p0.xyz), n_out8p0);
	}


// Output:0
	COLOR.rgb = n_out7p0;
	COLOR.a = n_out3p4;


}
"
graph_offset = Vector2(-98.9422, -5.88431)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(400, 200)
nodes/fragment/3/node = SubResource("332")
nodes/fragment/3/position = Vector2(-160, 200)
nodes/fragment/7/node = SubResource("338")
nodes/fragment/7/position = Vector2(140, 60)
nodes/fragment/8/node = SubResource("339")
nodes/fragment/8/position = Vector2(-160, 80)
nodes/fragment/connections = PackedInt32Array(3, 0, 7, 0, 8, 0, 7, 1, 7, 0, 0, 0, 3, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="341"]
shader = SubResource("340")

[sub_resource type="VisualShaderNodeTexture" id="342"]
texture = ExtResource("57")

[sub_resource type="VisualShaderNodeFloatConstant" id="343"]
constant = 0.7

[sub_resource type="VisualShaderNodeCustom" id="344"]
default_input_values = [1, 1.0, 3, 1.0, 4, 1.0]
initialized = true
script = ExtResource("58")

[sub_resource type="VisualShader" id="345"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_10;


// BlendAwithB
#include \"res://addons/shaderV/rgba/blendAwithB.gdshaderinc\"

void fragment() {
	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(TEXTURE, UV);
	float n_out3p4 = n_out3p0.a;


// Texture2D:10
	vec4 n_out10p0 = texture(tex_frg_10, UV);


// FloatConstant:11
	float n_out11p0 = 0.700000;


	vec3 n_out9p0;
	float n_out9p1;
// BlendAwithB:9
	float n_in9p1 = 1.00000;
	float n_in9p3 = 1.00000;
	{
		vec4 n_out9p0n_out9p1 = _blendAwithBFunc(vec4(vec3(n_out3p0.xyz), n_in9p1), vec4(vec3(n_out10p0.xyz), n_in9p3), n_out11p0);
		n_out9p0 = n_out9p0n_out9p1.rgb;
		n_out9p1 = n_out9p0n_out9p1.a;
	}


// Output:0
	COLOR.rgb = n_out9p0;
	COLOR.a = n_out9p1;


}
"
graph_offset = Vector2(-204.802, -46.8099)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(360, 60)
nodes/fragment/3/node = SubResource("332")
nodes/fragment/3/position = Vector2(-180, 0)
nodes/fragment/9/node = SubResource("344")
nodes/fragment/9/position = Vector2(100, 60)
nodes/fragment/10/node = SubResource("342")
nodes/fragment/10/position = Vector2(-440, 0)
nodes/fragment/11/node = SubResource("343")
nodes/fragment/11/position = Vector2(-120, 200)
nodes/fragment/connections = PackedInt32Array(3, 0, 9, 0, 9, 1, 0, 1, 10, 0, 9, 2, 11, 0, 9, 4, 9, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="346"]
shader = SubResource("345")

[sub_resource type="VisualShaderNodeCustom" id="347"]
default_input_values = [2, 1.0]
initialized = true
script = ExtResource("59")

[sub_resource type="VisualShaderNodeFloatConstant" id="348"]
constant = 0.5

[sub_resource type="VisualShader" id="349"]
code = "shader_type canvas_item;
render_mode blend_mix;



// Bloom
#include \"res://addons/shaderV/rgba/bloom.gdshaderinc\"

void fragment() {
	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(TEXTURE, UV);
	float n_out3p4 = n_out3p0.a;


// FloatConstant:13
	float n_out13p0 = 0.500000;


	vec3 n_out12p0;
	float n_out12p1;
// Bloom:12
	{
		vec4 n_out12p0n_out12p1 = _bloomFunc(vec4(vec3(n_out3p0.xyz), n_out3p4), n_out13p0);
		n_out12p0 = n_out12p0n_out12p1.rgb;
		n_out12p1 = n_out12p0n_out12p1.a;
	}


// Output:0
	COLOR.rgb = n_out12p0;
	COLOR.a = n_out12p1;


}
"
graph_offset = Vector2(-256.704, -93.2689)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(400, 0)
nodes/fragment/3/node = SubResource("332")
nodes/fragment/3/position = Vector2(-60, -60)
nodes/fragment/12/node = SubResource("347")
nodes/fragment/12/position = Vector2(200, 0)
nodes/fragment/13/node = SubResource("348")
nodes/fragment/13/position = Vector2(0, 160)
nodes/fragment/connections = PackedInt32Array(12, 1, 0, 1, 3, 0, 12, 0, 13, 0, 12, 2, 12, 0, 0, 0, 3, 4, 12, 1)

[sub_resource type="ShaderMaterial" id="350"]
shader = SubResource("349")

[sub_resource type="VisualShaderNodeCustom" id="351"]
default_input_values = [2, -1.0, 3, 0.05, 4, 0.0]
initialized = true
script = ExtResource("60")

[sub_resource type="VisualShaderNodeFloatConstant" id="352"]
constant = 0.02

[sub_resource type="VisualShaderNodeInput" id="353"]
input_name = "texture"

[sub_resource type="VisualShaderNodeInput" id="354"]
input_name = "uv"

[sub_resource type="VisualShaderNodeFloatConstant" id="355"]
constant = -1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="356"]

[sub_resource type="VisualShader" id="357"]
code = "shader_type canvas_item;
render_mode blend_mix;



// ChromaticAberration
#include \"res://addons/shaderV/rgba/chromaticAberration.gdshaderinc\"

void fragment() {
// Input:18
	vec2 n_out18p0 = UV;


// FloatConstant:19
	float n_out19p0 = -1.000000;


// FloatConstant:15
	float n_out15p0 = 0.020000;


// FloatConstant:20
	float n_out20p0 = 0.000000;


	vec3 n_out14p0;
	float n_out14p1;
// ChromaticAberration:14
	{
		vec4 n_out14p0n_out14p1 = _chromaticAberrationFunc(TEXTURE, vec3(n_out18p0, 0.0).xy, vec3(n_out15p0, n_out20p0, n_out19p0));
		n_out14p0 = n_out14p0n_out14p1.rgb;
		n_out14p1 = n_out14p0n_out14p1.a;
	}


// Output:0
	COLOR.rgb = n_out14p0;
	COLOR.a = n_out14p1;


}
"
graph_offset = Vector2(-244, -169)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(460, 0)
nodes/fragment/14/node = SubResource("351")
nodes/fragment/14/position = Vector2(200, 0)
nodes/fragment/15/node = SubResource("352")
nodes/fragment/15/position = Vector2(-60, 140)
nodes/fragment/17/node = SubResource("353")
nodes/fragment/17/position = Vector2(-160, -100)
nodes/fragment/18/node = SubResource("354")
nodes/fragment/18/position = Vector2(-200, -20)
nodes/fragment/19/node = SubResource("355")
nodes/fragment/19/position = Vector2(-60, 60)
nodes/fragment/20/node = SubResource("356")
nodes/fragment/20/position = Vector2(-60, 220)
nodes/fragment/connections = PackedInt32Array(14, 1, 0, 1, 15, 0, 14, 3, 17, 0, 14, 0, 18, 0, 14, 1, 20, 0, 14, 4, 19, 0, 14, 2, 14, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="358"]
shader = SubResource("357")

[sub_resource type="VisualShaderNodeCustom" id="359"]
initialized = true
script = ExtResource("61")

[sub_resource type="VisualShaderNodeFloatConstant" id="360"]
constant = 2.0

[sub_resource type="VisualShaderNodeTexture" id="361"]
expanded_output_ports = [0]
source = 2

[sub_resource type="VisualShaderNodeCustom" id="362"]
default_input_values = [1, Vector3(1, 1, 0), 2, Vector3(0.5, 0.5, 0)]
initialized = true
script = ExtResource("7")

[sub_resource type="VisualShaderNodeInput" id="363"]
input_name = "uv"

[sub_resource type="VisualShaderNodeFloatConstant" id="364"]
constant = 2.0

[sub_resource type="VisualShaderNodeExpression" id="365"]
size = Vector2(627, 196)
expression = "Sometimes texture may show out of its true borders
(for example, when using lod).
To fix it, use ClampAlphaBorder node.
Set 'alpha' port from \"Texture2D\" node to 'Alpha' port of \"Output\"
node to see the difference."

[sub_resource type="VisualShader" id="366"]
code = "shader_type canvas_item;
render_mode blend_mix;



// ScaleUV
#include \"res://addons/shaderV/uv/scaleUV.gdshaderinc\"
// ClampAlphaBorder
#include \"res://addons/shaderV/rgba/clamp.gdshaderinc\"

void fragment() {
// Input:25
	vec2 n_out25p0 = UV;


// FloatConstant:26
	float n_out26p0 = 2.000000;


	vec3 n_out24p0;
// ScaleUV:24
	vec3 n_in24p2 = vec3(0.50000, 0.50000, 0.00000);
	{
		n_out24p0.xy = _scaleUV(vec3(n_out25p0, 0.0).xy, vec3(n_out26p0).xy, n_in24p2.xy);
	}


// FloatConstant:22
	float n_out22p0 = 2.000000;


	vec4 n_out23p0;
// Texture2D:23
	n_out23p0 = textureLod(TEXTURE, vec2(n_out24p0.xy), n_out22p0);
	float n_out23p4 = n_out23p0.a;


	float n_out21p0;
// ClampAlphaBorder:21
	{
		n_out21p0 = _clampAlphaBorderFunc(n_out23p4, (n_out24p0).xy);
	}


// Output:0
	COLOR.rgb = vec3(n_out23p0.xyz);
	COLOR.a = n_out21p0;


}
"
graph_offset = Vector2(-284.537, -146.443)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(700, -80)
nodes/fragment/21/node = SubResource("359")
nodes/fragment/21/position = Vector2(380, -140)
nodes/fragment/22/node = SubResource("360")
nodes/fragment/22/position = Vector2(-140, 60)
nodes/fragment/23/node = SubResource("361")
nodes/fragment/23/position = Vector2(80, -20)
nodes/fragment/24/node = SubResource("362")
nodes/fragment/24/position = Vector2(-120, -80)
nodes/fragment/25/node = SubResource("363")
nodes/fragment/25/position = Vector2(-460, -120)
nodes/fragment/26/node = SubResource("364")
nodes/fragment/26/position = Vector2(-320, -40)
nodes/fragment/27/node = SubResource("365")
nodes/fragment/27/position = Vector2(180, -400)
nodes/fragment/27/size = Vector2(627, 196)
nodes/fragment/27/input_ports = ""
nodes/fragment/27/output_ports = ""
nodes/fragment/27/expression = "Sometimes texture may show out of its true borders
(for example, when using lod).
To fix it, use ClampAlphaBorder node.
Set 'alpha' port from \"Texture2D\" node to 'Alpha' port of \"Output\"
node to see the difference."
nodes/fragment/connections = PackedInt32Array(22, 0, 23, 1, 25, 0, 24, 0, 24, 0, 23, 0, 26, 0, 24, 1, 24, 0, 21, 1, 21, 0, 0, 1, 23, 0, 0, 0, 23, 4, 21, 0)

[sub_resource type="ShaderMaterial" id="367"]
shader = SubResource("366")

[sub_resource type="VisualShaderNodeCustom" id="368"]
output_port_for_preview = 0
initialized = true
script = ExtResource("62")

[sub_resource type="VisualShaderNodeTexture" id="369"]
source = 2

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_khtr3"]
parameter_name = "Texture2DParameter"

[sub_resource type="VisualShader" id="371"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D Texture2DParameter;


// ColorCorrectionAdjustment
#include \"res://addons/shaderV/rgba/colorCorrectionAdjustment.gdshaderinc\"

void fragment() {
	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(TEXTURE, UV);


	vec3 n_out2p0;
// ColorCorrectionAdjustment:2
	{
		n_out2p0 = _applyColorCorrectionFunc(vec3(n_out3p0.xyz), Texture2DParameter);
	}


// Output:0
	COLOR.rgb = n_out2p0;


}
"
graph_offset = Vector2(-274.167, 34.9918)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(400, 200)
nodes/fragment/2/node = SubResource("368")
nodes/fragment/2/position = Vector2(80, 200)
nodes/fragment/3/node = SubResource("369")
nodes/fragment/3/position = Vector2(-200, 140)
nodes/fragment/5/node = SubResource("VisualShaderNodeTexture2DParameter_khtr3")
nodes/fragment/5/position = Vector2(-280, 300)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 0, 2, 0, 0, 0, 5, 0, 2, 1)

[sub_resource type="Gradient" id="Gradient_g5r4v"]
colors = PackedColorArray(0, 0.183333, 1, 1, 1, 0, 0, 1)

[sub_resource type="GradientTexture2D" id="GradientTexture2D_147bn"]
gradient = SubResource("Gradient_g5r4v")
fill_from = Vector2(0, 1)

[sub_resource type="ShaderMaterial" id="372"]
shader = SubResource("371")
shader_parameter/Texture2DParameter = SubResource("GradientTexture2D_147bn")

[sub_resource type="VisualShaderNodeInput" id="370"]
input_name = "texture"

[sub_resource type="VisualShaderNodeCustom" id="373"]
default_input_values = [2, -1.0, 3, 0.005, 4, 1.0]
initialized = true
script = ExtResource("63")

[sub_resource type="VisualShaderNodeInput" id="374"]
input_name = "uv"

[sub_resource type="VisualShaderNodeFloatConstant" id="375"]
constant = -1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="376"]
constant = 0.005

[sub_resource type="VisualShaderNodeFloatConstant" id="377"]
constant = 1.0

[sub_resource type="VisualShader" id="378"]
code = "shader_type canvas_item;
render_mode blend_mix;



// Emboss
#include \"res://addons/shaderV/rgba/emboss.gdshaderinc\"

void fragment() {
// Input:6
	vec2 n_out6p0 = UV;


// FloatConstant:7
	float n_out7p0 = -1.000000;


// FloatConstant:8
	float n_out8p0 = 0.005000;


// FloatConstant:9
	float n_out9p0 = 1.000000;


	vec3 n_out5p0;
	float n_out5p1;
// Emboss:5
	{
		vec4 n_out5p0n_out5p1 = _embossFunc(TEXTURE, vec3(n_out6p0, 0.0).xy, n_out7p0, vec2(n_out8p0), n_out9p0);
		n_out5p0 = n_out5p0n_out5p1.rgb;
		n_out5p1 = n_out5p0n_out5p1.a;
	}


// Output:0
	COLOR.rgb = n_out5p0;
	COLOR.a = n_out5p1;


}
"
graph_offset = Vector2(-222, 203)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(400, 200)
nodes/fragment/4/node = SubResource("370")
nodes/fragment/4/position = Vector2(-140, 80)
nodes/fragment/5/node = SubResource("373")
nodes/fragment/5/position = Vector2(180, 200)
nodes/fragment/6/node = SubResource("374")
nodes/fragment/6/position = Vector2(-180, 160)
nodes/fragment/7/node = SubResource("375")
nodes/fragment/7/position = Vector2(-40, 240)
nodes/fragment/8/node = SubResource("376")
nodes/fragment/8/position = Vector2(-40, 320)
nodes/fragment/9/node = SubResource("377")
nodes/fragment/9/position = Vector2(-40, 400)
nodes/fragment/connections = PackedInt32Array(4, 0, 5, 0, 5, 1, 0, 1, 6, 0, 5, 1, 7, 0, 5, 2, 9, 0, 5, 4, 8, 0, 5, 3, 5, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="379"]
shader = SubResource("378")

[sub_resource type="VisualShaderNodeCustom" id="380"]
default_input_values = [1, Vector3(0, 1, 0), 2, 0.3, 3, Vector3(1, 1, 0), 4, 1.0, 5, Vector3(1, 0.5, 0), 6, 1.0, 7, Vector3(1, 0, 0), 8, 1.0, 9, 0, 10, 0.4, 11, 0.2, 12, 0.0]
initialized = true
script = ExtResource("64")

[sub_resource type="VisualShaderNodeCustom" id="381"]
default_input_values = [0, 1.0, 1, 0.0]
initialized = true
script = ExtResource("25")

[sub_resource type="VisualShaderNodeFloatConstant" id="382"]
constant = 1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="383"]
constant = 1.96

[sub_resource type="VisualShaderNodeFloatConstant" id="384"]
constant = 0.3

[sub_resource type="VisualShaderNodeInput" id="385"]
input_name = "time"

[sub_resource type="VisualShaderNodeColorConstant" id="386"]
constant = Color(1, 1, 0, 1)

[sub_resource type="VisualShaderNodeColorConstant" id="387"]
constant = Color(1, 0.501961, 0, 1)

[sub_resource type="VisualShaderNodeColorConstant" id="388"]
constant = Color(1, 0, 0, 1)

[sub_resource type="VisualShaderNodeFloatConstant" id="389"]

[sub_resource type="VisualShaderNodeFloatConstant" id="390"]
constant = 0.4

[sub_resource type="VisualShaderNodeFloatConstant" id="391"]
constant = 0.2

[sub_resource type="VisualShader" id="392"]
code = "shader_type canvas_item;
render_mode blend_mix;



// vec2Compose
#include \"res://addons/shaderV/tools/vec2Compose.gdshaderinc\"
// FireFX
#include \"res://addons/shaderV/rgba/fireFX.gdshaderinc\"

void fragment() {
// Input:6
	vec2 n_out6p0 = UV;


// FloatConstant:12
	float n_out12p0 = 1.000000;


// FloatConstant:13
	float n_out13p0 = 1.960000;


	vec3 n_out11p0;
// vec2Compose:11
	{
		n_out11p0.xy = _vec2ComposeFunc(n_out12p0, n_out13p0);
	}


// FloatConstant:14
	float n_out14p0 = 0.300000;


// ColorConstant:16
	vec4 n_out16p0 = vec4(1.000000, 1.000000, 0.000000, 1.000000);


// ColorConstant:17
	vec4 n_out17p0 = vec4(1.000000, 0.501961, 0.000000, 1.000000);


// ColorConstant:18
	vec4 n_out18p0 = vec4(1.000000, 0.000000, 0.000000, 1.000000);


// FloatConstant:19
	float n_out19p0 = 0.000000;


// FloatConstant:20
	float n_out20p0 = 0.400000;


// FloatConstant:21
	float n_out21p0 = 0.200000;


// Input:15
	float n_out15p0 = TIME;


	vec3 n_out10p0;
	float n_out10p1;
// FireFX:10
	float n_in10p4 = 1.00000;
	float n_in10p6 = 1.00000;
	float n_in10p8 = 1.00000;
	{
		vec4 n_out10p0n_out10p1 = _fireFXFunc(vec3(n_out6p0, 0.0).xy, n_out11p0.xy, n_out14p0, n_out15p0, vec4(vec3(n_out16p0.xyz), n_in10p4), vec4(vec3(n_out17p0.xyz), n_in10p6), vec4(vec3(n_out18p0.xyz), n_in10p8), n_out19p0, n_out20p0, n_out21p0);
		n_out10p0 = n_out10p0n_out10p1.rgb;
		n_out10p1 = n_out10p0n_out10p1.a;
	}


// Output:0
	COLOR.rgb = n_out10p0;
	COLOR.a = n_out10p1;


}
"
graph_offset = Vector2(-252.507, 83.2718)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(740, 400)
nodes/fragment/6/node = SubResource("374")
nodes/fragment/6/position = Vector2(20, 180)
nodes/fragment/10/node = SubResource("380")
nodes/fragment/10/position = Vector2(400, 400)
nodes/fragment/11/node = SubResource("381")
nodes/fragment/11/position = Vector2(180, 280)
nodes/fragment/12/node = SubResource("382")
nodes/fragment/12/position = Vector2(-100, 260)
nodes/fragment/13/node = SubResource("383")
nodes/fragment/13/position = Vector2(-100, 340)
nodes/fragment/14/node = SubResource("384")
nodes/fragment/14/position = Vector2(180, 380)
nodes/fragment/15/node = SubResource("385")
nodes/fragment/15/position = Vector2(20, 980)
nodes/fragment/16/node = SubResource("386")
nodes/fragment/16/position = Vector2(-20, 440)
nodes/fragment/17/node = SubResource("387")
nodes/fragment/17/position = Vector2(-20, 520)
nodes/fragment/18/node = SubResource("388")
nodes/fragment/18/position = Vector2(-20, 600)
nodes/fragment/19/node = SubResource("389")
nodes/fragment/19/position = Vector2(-20, 720)
nodes/fragment/20/node = SubResource("390")
nodes/fragment/20/position = Vector2(-20, 800)
nodes/fragment/21/node = SubResource("391")
nodes/fragment/21/position = Vector2(-20, 880)
nodes/fragment/connections = PackedInt32Array(6, 0, 10, 0, 10, 1, 0, 1, 14, 0, 10, 2, 15, 0, 10, 12, 18, 0, 10, 7, 19, 0, 10, 9, 20, 0, 10, 10, 21, 0, 10, 11, 16, 0, 10, 3, 17, 0, 10, 5, 10, 0, 0, 0, 11, 0, 10, 1, 13, 0, 11, 1, 12, 0, 11, 0)

[sub_resource type="ShaderMaterial" id="393"]
shader = SubResource("392")

[sub_resource type="VisualShaderNodeCustom" id="394"]
default_input_values = [1, Vector3(1, 1, 1), 2, 1.0, 3, Vector3(1, 1, 1), 4, 1.0, 5, Vector3(1, 1, 1), 6, 1.0, 7, Vector3(1, 1, 1), 8, 1.0]
initialized = true
script = ExtResource("65")

[sub_resource type="VisualShaderNodeColorConstant" id="395"]
expanded_output_ports = [0]
constant = Color(1, 1, 0, 1)

[sub_resource type="VisualShaderNodeColorConstant" id="396"]
expanded_output_ports = [0]
constant = Color(0, 0, 1, 1)

[sub_resource type="VisualShaderNodeColorConstant" id="397"]
expanded_output_ports = [0]
constant = Color(1, 0, 0, 1)

[sub_resource type="VisualShaderNodeColorConstant" id="398"]
expanded_output_ports = [0]
constant = Color(0.0990133, 1, 0, 1)

[sub_resource type="VisualShader" id="399"]
code = "shader_type canvas_item;
render_mode blend_mix;



// Gradient4Corners
#include \"res://addons/shaderV/rgba/gradient4corners.gdshaderinc\"

void fragment() {
// Input:6
	vec2 n_out6p0 = UV;


// ColorConstant:23
	vec4 n_out23p0 = vec4(1.000000, 1.000000, 0.000000, 1.000000);
	float n_out23p4 = n_out23p0.a;


// ColorConstant:24
	vec4 n_out24p0 = vec4(0.000000, 0.000000, 1.000000, 1.000000);
	float n_out24p4 = n_out24p0.a;


// ColorConstant:25
	vec4 n_out25p0 = vec4(1.000000, 0.000000, 0.000000, 1.000000);
	float n_out25p4 = n_out25p0.a;


// ColorConstant:26
	vec4 n_out26p0 = vec4(0.099013, 1.000000, 0.000000, 1.000000);
	float n_out26p4 = n_out26p0.a;


	vec3 n_out22p0;
	float n_out22p1;
// Gradient4Corners:22
	{
		vec4 n_out22p0n_out22p1 = _gradient4cornersFunc(vec3(n_out6p0, 0.0).xy, vec4(vec3(n_out23p0.xyz), n_out23p4), vec4(vec3(n_out24p0.xyz), n_out24p4), vec4(vec3(n_out25p0.xyz), n_out25p4), vec4(vec3(n_out26p0.xyz), n_out26p4));
		n_out22p0 = n_out22p0n_out22p1.rgb;
		n_out22p1 = n_out22p0n_out22p1.a;
	}


// Output:0
	COLOR.rgb = n_out22p0;
	COLOR.a = n_out22p1;


}
"
graph_offset = Vector2(256.859, 118.584)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(1060, 400)
nodes/fragment/6/node = SubResource("374")
nodes/fragment/6/position = Vector2(360, 300)
nodes/fragment/22/node = SubResource("394")
nodes/fragment/22/position = Vector2(800, 400)
nodes/fragment/23/node = SubResource("395")
nodes/fragment/23/position = Vector2(500, 380)
nodes/fragment/24/node = SubResource("396")
nodes/fragment/24/position = Vector2(500, 540)
nodes/fragment/25/node = SubResource("397")
nodes/fragment/25/position = Vector2(500, 720)
nodes/fragment/26/node = SubResource("398")
nodes/fragment/26/position = Vector2(500, 900)
nodes/fragment/connections = PackedInt32Array(22, 1, 0, 1, 6, 0, 22, 0, 23, 0, 22, 1, 24, 0, 22, 3, 25, 0, 22, 5, 26, 0, 22, 7, 22, 0, 0, 0, 26, 4, 22, 8, 25, 4, 22, 6, 24, 4, 22, 4, 23, 4, 22, 2)

[sub_resource type="ShaderMaterial" id="400"]
shader = SubResource("399")

[sub_resource type="VisualShaderNodeCustom" id="401"]
default_input_values = [1, 1.0, 2, 0.0, 3, false]
initialized = true
script = ExtResource("66")

[sub_resource type="VisualShaderNodeTexture" id="402"]
expanded_output_ports = [0]
source = 2

[sub_resource type="VisualShaderNodeBooleanConstant" id="403"]
constant = true

[sub_resource type="VisualShaderNodeTexture2DParameter" id="404"]
parameter_name = "gradient"

[sub_resource type="VisualShaderNodeCustom" id="405"]
default_input_values = [0, 1.0]
initialized = true
script = ExtResource("78")

[sub_resource type="VisualShaderNodeFloatConstant" id="406"]
constant = 0.3

[sub_resource type="VisualShader" id="407"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D gradient;


// GradientMapping
#include \"res://addons/shaderV/rgba/gradientMapping.gdshaderinc\"

void fragment() {
	vec4 n_out28p0;
// Texture2D:28
	n_out28p0 = texture(TEXTURE, UV);
	float n_out28p4 = n_out28p0.a;


// FloatConstant:33
	float n_out33p0 = 0.300000;


	float n_out32p0;
// ScaledTIME:32
	{
		n_out32p0 = n_out33p0 * TIME;
	}


// BooleanConstant:30
	bool n_out30p0 = true;


	vec3 n_out27p0;
	float n_out27p1;
// GradientMapping:27
	{
		vec4 n_out27p0n_out27p1 = _gradientMappingFunc(vec3(n_out28p0.xyz), n_out32p0, gradient, n_out30p0);
		n_out27p0 = n_out27p0n_out27p1.rgb;
		n_out27p1 = n_out27p0n_out27p1.a * n_out28p4;
	}


// Output:0
	COLOR.rgb = n_out27p0;
	COLOR.a = n_out27p1;


}
"
graph_offset = Vector2(-69.8232, 113.43)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(1040, 400)
nodes/fragment/27/node = SubResource("401")
nodes/fragment/27/position = Vector2(800, 400)
nodes/fragment/28/node = SubResource("402")
nodes/fragment/28/position = Vector2(460, 240)
nodes/fragment/30/node = SubResource("403")
nodes/fragment/30/position = Vector2(520, 540)
nodes/fragment/31/node = SubResource("404")
nodes/fragment/31/position = Vector2(420, 620)
nodes/fragment/32/node = SubResource("405")
nodes/fragment/32/position = Vector2(540, 460)
nodes/fragment/33/node = SubResource("406")
nodes/fragment/33/position = Vector2(260, 420)
nodes/fragment/connections = PackedInt32Array(28, 0, 27, 0, 30, 0, 27, 3, 27, 1, 0, 1, 27, 0, 0, 0, 28, 4, 27, 1, 31, 0, 27, 4, 33, 0, 32, 0, 32, 0, 27, 2)

[sub_resource type="Gradient" id="408"]
offsets = PackedFloat32Array(0, 0.174242, 0.336134, 0.504202, 0.705882, 0.865546, 1)
colors = PackedColorArray(1, 0, 0, 1, 1, 0.726563, 0, 1, 0.640625, 1, 0, 1, 0, 1, 1, 1, 0, 0.132813, 1, 1, 1, 0, 0.984375, 1, 1, 1, 1, 1)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_y2syp"]
gradient = SubResource("408")

[sub_resource type="ShaderMaterial" id="410"]
shader = SubResource("407")
shader_parameter/gradient = SubResource("GradientTexture1D_y2syp")

[sub_resource type="VisualShaderNodeCustom" id="411"]
default_input_values = [1, 1.0]
initialized = true
script = ExtResource("67")

[sub_resource type="VisualShaderNodeTexture" id="412"]
output_port_for_preview = 0
expanded_output_ports = [0]
source = 2

[sub_resource type="VisualShaderNodeFloatConstant" id="413"]
constant = 1.0

[sub_resource type="VisualShader" id="414"]
code = "shader_type canvas_item;
render_mode blend_mix;



// GrayscalePlus
#include \"res://addons/shaderV/rgba/grayscale.gdshaderinc\"

void fragment() {
	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(TEXTURE, UV);
	float n_out3p4 = n_out3p0.a;


// FloatConstant:4
	float n_out4p0 = 1.000000;


	vec3 n_out2p0;
// GrayscalePlus:2
	{
		n_out2p0 = _grayscaleFunc(vec3(n_out3p0.xyz), n_out4p0);
	}


// Output:0
	COLOR.rgb = n_out2p0;
	COLOR.a = n_out3p4;


}
"
graph_offset = Vector2(-81.0399, 23.8775)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(600, 140)
nodes/fragment/2/node = SubResource("411")
nodes/fragment/2/position = Vector2(360, 120)
nodes/fragment/3/node = SubResource("412")
nodes/fragment/3/position = Vector2(0, 220)
nodes/fragment/4/node = SubResource("413")
nodes/fragment/4/position = Vector2(60, 140)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 0, 2, 0, 0, 0, 4, 0, 2, 1, 3, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="415"]
shader = SubResource("414")

[sub_resource type="VisualShaderNodeCustom" id="416"]
initialized = true
script = ExtResource("68")

[sub_resource type="VisualShader" id="417"]
code = "shader_type canvas_item;
render_mode blend_mix;



// Hue
#include \"res://addons/shaderV/rgba/hue.gdshaderinc\"

void fragment() {
	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(TEXTURE, UV);
	float n_out3p4 = n_out3p0.a;


	vec3 n_out5p0;
// Hue:5
	{
		n_out5p0 = _hueFunc(n_out3p0.x);
	}


// Output:0
	COLOR.rgb = n_out5p0;
	COLOR.a = n_out3p4;


}
"
graph_offset = Vector2(-169.795, 33.3148)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(600, 200)
nodes/fragment/3/node = SubResource("412")
nodes/fragment/3/position = Vector2(0, 200)
nodes/fragment/5/node = SubResource("416")
nodes/fragment/5/position = Vector2(320, 180)
nodes/fragment/connections = PackedInt32Array(3, 0, 5, 0, 5, 0, 0, 0, 3, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="418"]
shader = SubResource("417")

[sub_resource type="VisualShaderNodeCustom" id="419"]
default_input_values = [2, 1.0]
initialized = true
script = ExtResource("69")

[sub_resource type="VisualShaderNodeFloatConstant" id="420"]
constant = 1.0

[sub_resource type="VisualShader" id="421"]
code = "shader_type canvas_item;
render_mode blend_mix;



// InverseColor
#include \"res://addons/shaderV/rgba/inverseColor.gdshaderinc\"

void fragment() {
	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(TEXTURE, UV);
	float n_out3p4 = n_out3p0.a;


// FloatConstant:7
	float n_out7p0 = 1.000000;


	vec3 n_out6p0;
	float n_out6p1;
// InverseColor:6
	{
		n_out6p0 = _inverseColorFunc(vec3(n_out3p0.xyz), n_out7p0);
		n_out6p1 = n_out3p4;
	}


// Output:0
	COLOR.rgb = n_out6p0;
	COLOR.a = n_out6p1;


}
"
graph_offset = Vector2(-162.479, 72.6859)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(600, 200)
nodes/fragment/3/node = SubResource("412")
nodes/fragment/3/position = Vector2(80, 180)
nodes/fragment/6/node = SubResource("419")
nodes/fragment/6/position = Vector2(380, 200)
nodes/fragment/7/node = SubResource("420")
nodes/fragment/7/position = Vector2(140, 380)
nodes/fragment/connections = PackedInt32Array(3, 0, 6, 0, 6, 1, 0, 1, 7, 0, 6, 2, 6, 0, 0, 0, 3, 4, 6, 1)

[sub_resource type="ShaderMaterial" id="422"]
shader = SubResource("421")

[sub_resource type="VisualShaderNodeCustom" id="423"]
default_input_values = [1, 1, 2, 1]
initialized = true
script = ExtResource("70")

[sub_resource type="VisualShaderNodeTexture" id="424"]
expanded_output_ports = [0]
texture = ExtResource("57")

[sub_resource type="VisualShader" id="425"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_9;


// MaskAlpha
#include \"res://addons/shaderV/rgba/maskAlpha.gdshaderinc\"

void fragment() {
	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(TEXTURE, UV);
	float n_out3p4 = n_out3p0.a;


// Texture2D:9
	vec4 n_out9p0 = texture(tex_frg_9, UV);
	float n_out9p4 = n_out9p0.a;


	vec3 n_out8p0;
	float n_out8p1;
// MaskAlpha:8
	{
		n_out8p0 = _maskAlphaFunc(vec4(vec3(n_out3p0.xyz), n_out3p4), n_out9p4).rgb;
		n_out8p1 = _maskAlphaFunc(vec4(vec3(n_out3p0.xyz), n_out3p4), n_out9p4).a;
	}


// Output:0
	COLOR.rgb = n_out8p0;
	COLOR.a = n_out8p1;


}
"
graph_offset = Vector2(-307.936, -137.162)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(620, 0)
nodes/fragment/3/node = SubResource("412")
nodes/fragment/3/position = Vector2(100, -140)
nodes/fragment/8/node = SubResource("423")
nodes/fragment/8/position = Vector2(400, 0)
nodes/fragment/9/node = SubResource("424")
nodes/fragment/9/position = Vector2(100, 60)
nodes/fragment/connections = PackedInt32Array(3, 0, 8, 0, 8, 1, 0, 1, 8, 0, 0, 0, 9, 4, 8, 2, 3, 4, 8, 1)

[sub_resource type="ShaderMaterial" id="426"]
shader = SubResource("425")

[sub_resource type="VisualShaderNodeCustom" id="427"]
default_input_values = [1, 8.0]
initialized = true
script = ExtResource("71")

[sub_resource type="VisualShaderNodeFloatConstant" id="428"]
constant = 3.0

[sub_resource type="VisualShader" id="429"]
code = "shader_type canvas_item;
render_mode blend_mix;



// Posterize
#include \"res://addons/shaderV/rgba/posterize.gdshaderinc\"

void fragment() {
	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(TEXTURE, UV);
	float n_out3p4 = n_out3p0.a;


// FloatConstant:11
	float n_out11p0 = 3.000000;


	vec3 n_out10p0;
// Posterize:10
	{
		n_out10p0 = _posterizeFunc(vec3(n_out3p0.xyz), n_out11p0);
	}


// Output:0
	COLOR.rgb = n_out10p0;
	COLOR.a = n_out3p4;


}
"
graph_offset = Vector2(-144, -146.56)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(580, -20)
nodes/fragment/3/node = SubResource("412")
nodes/fragment/3/position = Vector2(100, 0)
nodes/fragment/10/node = SubResource("427")
nodes/fragment/10/position = Vector2(400, -140)
nodes/fragment/11/node = SubResource("428")
nodes/fragment/11/position = Vector2(140, -120)
nodes/fragment/connections = PackedInt32Array(11, 0, 10, 1, 3, 0, 10, 0, 10, 0, 0, 0, 3, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="430"]
shader = SubResource("429")

[sub_resource type="VisualShaderNodeCustom" id="431"]
output_port_for_preview = 0
default_input_values = [1, 1.0, 2, 1.0, 3, 1.0]
initialized = true
script = ExtResource("72")

[sub_resource type="VisualShaderNodeFloatConstant" id="432"]
constant = 0.891

[sub_resource type="VisualShaderNodeFloatConstant" id="433"]
constant = 1.005

[sub_resource type="VisualShaderNodeFloatConstant" id="434"]
constant = 0.869

[sub_resource type="VisualShader" id="435"]
code = "shader_type canvas_item;
render_mode blend_mix;



// ShiftHSV
#include \"res://addons/shaderV/rgba/shiftHSV.gdshaderinc\"

void fragment() {
	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(TEXTURE, UV);
	float n_out3p4 = n_out3p0.a;


// FloatConstant:13
	float n_out13p0 = 0.891000;


// FloatConstant:14
	float n_out14p0 = 1.005000;


// FloatConstant:15
	float n_out15p0 = 0.869000;


	vec3 n_out12p0;
// ShiftHSV:12
	{
		n_out12p0 = _hsvChangeHSVChangeFunc(vec3(n_out3p0.xyz), n_out13p0, n_out14p0, n_out15p0);
	}


// Output:0
	COLOR.rgb = n_out12p0;
	COLOR.a = n_out3p4;


}
"
graph_offset = Vector2(2.4173, -266.144)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(680, 0)
nodes/fragment/3/node = SubResource("412")
nodes/fragment/3/position = Vector2(40, 0)
nodes/fragment/12/node = SubResource("431")
nodes/fragment/12/position = Vector2(420, -160)
nodes/fragment/13/node = SubResource("432")
nodes/fragment/13/position = Vector2(180, -200)
nodes/fragment/14/node = SubResource("433")
nodes/fragment/14/position = Vector2(180, -140)
nodes/fragment/15/node = SubResource("434")
nodes/fragment/15/position = Vector2(180, -80)
nodes/fragment/connections = PackedInt32Array(15, 0, 12, 3, 14, 0, 12, 2, 3, 0, 12, 0, 3, 4, 0, 1, 13, 0, 12, 1, 12, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="436"]
shader = SubResource("435")

[sub_resource type="VisualShaderNodeCustom" id="437"]
default_input_values = [3, 0.0, 4, 0.0, 5, 0.0, 6, 0.0, 7, 0.0, 8, 0.0, 9, Vector3(1, 1, 1)]
initialized = true
script = ExtResource("73")

[sub_resource type="VisualShaderNodeInput" id="438"]
input_name = "uv"

[sub_resource type="VisualShaderNodeColorConstant" id="439"]
constant = Color(0, 0.833388, 1, 1)

[sub_resource type="VisualShaderNodeFloatConstant" id="440"]
constant = 0.5

[sub_resource type="VisualShaderNodeFloatConstant" id="441"]
constant = 0.7

[sub_resource type="VisualShaderNodeFloatConstant" id="442"]
constant = 0.4

[sub_resource type="VisualShaderNodeFloatConstant" id="443"]
constant = 2.0

[sub_resource type="VisualShaderNodeFloatConstant" id="444"]
constant = 2.0

[sub_resource type="VisualShaderNodeFloatConstant" id="445"]
constant = 1.0

[sub_resource type="VisualShader" id="446"]
code = "shader_type canvas_item;
render_mode blend_mix;



// ShineFX
#include \"res://addons/shaderV/rgba/shineFX.gdshaderinc\"

void fragment() {
// Input:17
	vec2 n_out17p0 = UV;


	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(TEXTURE, UV);
	float n_out3p4 = n_out3p0.a;


// FloatConstant:19
	float n_out19p0 = 0.500000;


// FloatConstant:20
	float n_out20p0 = 0.700000;


// FloatConstant:21
	float n_out21p0 = 0.400000;


// FloatConstant:22
	float n_out22p0 = 2.000000;


// FloatConstant:23
	float n_out23p0 = 2.000000;


// FloatConstant:24
	float n_out24p0 = 1.000000;


// ColorConstant:18
	vec4 n_out18p0 = vec4(0.000000, 0.833388, 1.000000, 1.000000);


	vec3 n_out16p0;
	float n_out16p1;
// ShineFX:16
	{
		n_out16p1 = n_out3p4;
		n_out16p0 = _shineFunc(vec4(vec3(n_out3p0.xyz), n_out3p4), vec3(n_out17p0, 0.0).xy, n_out19p0, n_out20p0, n_out21p0, n_out22p0, n_out23p0, n_out24p0, vec3(n_out18p0.xyz)).rgb;
	}


// Output:0
	COLOR.rgb = n_out16p0;
	COLOR.a = n_out16p1;


}
"
graph_offset = Vector2(8.33194, -215.869)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(820, 0)
nodes/fragment/3/node = SubResource("412")
nodes/fragment/3/position = Vector2(240, -220)
nodes/fragment/16/node = SubResource("437")
nodes/fragment/16/position = Vector2(600, 0)
nodes/fragment/17/node = SubResource("438")
nodes/fragment/17/position = Vector2(160, -320)
nodes/fragment/18/node = SubResource("439")
nodes/fragment/18/position = Vector2(300, 360)
nodes/fragment/19/node = SubResource("440")
nodes/fragment/19/position = Vector2(300, -20)
nodes/fragment/20/node = SubResource("441")
nodes/fragment/20/position = Vector2(300, 40)
nodes/fragment/21/node = SubResource("442")
nodes/fragment/21/position = Vector2(300, 100)
nodes/fragment/22/node = SubResource("443")
nodes/fragment/22/position = Vector2(300, 160)
nodes/fragment/23/node = SubResource("444")
nodes/fragment/23/position = Vector2(300, 220)
nodes/fragment/24/node = SubResource("445")
nodes/fragment/24/position = Vector2(300, 280)
nodes/fragment/connections = PackedInt32Array(3, 0, 16, 1, 16, 1, 0, 1, 17, 0, 16, 0, 18, 0, 16, 9, 19, 0, 16, 3, 20, 0, 16, 4, 21, 0, 16, 5, 22, 0, 16, 6, 23, 0, 16, 7, 24, 0, 16, 8, 16, 0, 0, 0, 3, 4, 16, 2)

[sub_resource type="ShaderMaterial" id="447"]
shader = SubResource("446")

[sub_resource type="VisualShaderNodeCustom" id="448"]
default_input_values = [1, 1.0, 2, Vector3(1, 1, 1), 3, 1]
initialized = true
script = ExtResource("74")

[sub_resource type="VisualShaderNodeColorConstant" id="449"]
expanded_output_ports = [0]
constant = Color(0.46875, 0.0585938, 0.337372, 1)

[sub_resource type="VisualShader" id="450"]
code = "shader_type canvas_item;
render_mode blend_mix;




void fragment() {
	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(TEXTURE, UV);
	float n_out3p4 = n_out3p0.a;


// ColorConstant:26
	vec4 n_out26p0 = vec4(0.468750, 0.058594, 0.337372, 1.000000);
	float n_out26p4 = n_out26p0.a;


	vec3 n_out25p0;
	float n_out25p1;
// TintRGBA:25
	{
		n_out25p0 = vec3(n_out3p0.xyz) * vec3(n_out26p0.xyz);
		n_out25p1 = n_out3p4 * n_out26p4;
	}


// Output:0
	COLOR.rgb = n_out25p0;
	COLOR.a = n_out25p1;


}
"
graph_offset = Vector2(-142.104, -217.975)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(800, -100)
nodes/fragment/3/node = SubResource("412")
nodes/fragment/3/position = Vector2(120, -180)
nodes/fragment/25/node = SubResource("448")
nodes/fragment/25/position = Vector2(540, -100)
nodes/fragment/26/node = SubResource("449")
nodes/fragment/26/position = Vector2(260, 60)
nodes/fragment/connections = PackedInt32Array(3, 0, 25, 0, 25, 0, 0, 0, 25, 1, 0, 1, 26, 0, 25, 2, 26, 4, 25, 3, 3, 4, 25, 1)

[sub_resource type="ShaderMaterial" id="451"]
shader = SubResource("450")

[sub_resource type="VisualShaderNodeCustom" id="452"]
default_input_values = [1, 0.0, 2, 1.0]
initialized = true
script = ExtResource("75")

[sub_resource type="VisualShaderNodeFloatConstant" id="453"]
constant = 0.6

[sub_resource type="VisualShaderNodeFloatConstant" id="454"]
constant = 2.0

[sub_resource type="VisualShader" id="455"]
code = "shader_type canvas_item;
render_mode blend_mix;



// Tonemap
#include \"res://addons/shaderV/rgba/tonemap.gdshaderinc\"

void fragment() {
	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(TEXTURE, UV);
	float n_out3p4 = n_out3p0.a;


// FloatConstant:28
	float n_out28p0 = 0.600000;


// FloatConstant:29
	float n_out29p0 = 2.000000;


	vec3 n_out27p0;
// Tonemap:27
	{
		n_out27p0 = _tonemapFunc(vec3(n_out3p0.xyz), n_out28p0, n_out29p0);
	}


// Output:0
	COLOR.rgb = n_out27p0;
	COLOR.a = n_out3p4;


}
"
graph_offset = Vector2(331.087, -354.391)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(800, -200)
nodes/fragment/3/node = SubResource("412")
nodes/fragment/3/position = Vector2(200, -200)
nodes/fragment/27/node = SubResource("452")
nodes/fragment/27/position = Vector2(500, -340)
nodes/fragment/28/node = SubResource("453")
nodes/fragment/28/position = Vector2(240, -360)
nodes/fragment/29/node = SubResource("454")
nodes/fragment/29/position = Vector2(240, -280)
nodes/fragment/connections = PackedInt32Array(3, 0, 27, 0, 28, 0, 27, 1, 29, 0, 27, 2, 27, 0, 0, 0, 3, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="456"]
shader = SubResource("455")

[sub_resource type="VisualShaderNodeCustom" id="457"]
default_input_values = [1, 1.5]
initialized = true
script = ExtResource("76")

[sub_resource type="VisualShaderNodeFloatConstant" id="458"]
constant = 1.5

[sub_resource type="VisualShader" id="459"]
code = "shader_type canvas_item;
render_mode blend_mix;



// TurnCGA4Palette
#include \"res://addons/shaderV/rgba/turnCGA4Palette.gdshaderinc\"

void fragment() {
	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(TEXTURE, UV);
	float n_out3p4 = n_out3p0.a;


// FloatConstant:31
	float n_out31p0 = 1.500000;


	vec3 n_out30p0;
// TurnCGA4Palette:30
	{
		n_out30p0 = _cg4PaletteFunc(vec3(n_out3p0.xyz), n_out31p0);
	}


// Output:0
	COLOR.rgb = n_out30p0;
	COLOR.a = n_out3p4;


}
"
graph_offset = Vector2(181.043, -362.087)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(800, -200)
nodes/fragment/3/node = SubResource("412")
nodes/fragment/3/position = Vector2(280, -200)
nodes/fragment/30/node = SubResource("457")
nodes/fragment/30/position = Vector2(560, -340)
nodes/fragment/31/node = SubResource("458")
nodes/fragment/31/position = Vector2(280, -280)
nodes/fragment/connections = PackedInt32Array(3, 0, 30, 0, 31, 0, 30, 1, 30, 0, 0, 0, 3, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="460"]
shader = SubResource("459")

[sub_resource type="VisualShaderNodeFloatConstant" id="461"]
constant = 1.6

[sub_resource type="VisualShaderNodeCustom" id="462"]
default_input_values = [1, 1.5]
initialized = true
script = ExtResource("77")

[sub_resource type="VisualShader" id="463"]
code = "shader_type canvas_item;
render_mode blend_mix;



// TurnGameBoyPalette
#include \"res://addons/shaderV/rgba/turnGBPalette.gdshaderinc\"

void fragment() {
	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(TEXTURE, UV);
	float n_out3p4 = n_out3p0.a;


// FloatConstant:32
	float n_out32p0 = 1.600000;


	vec3 n_out33p0;
// TurnGameBoyPalette:33
	{
		n_out33p0 = _gameboyPaletteFunc(vec3(n_out3p0.xyz), n_out32p0);
	}


// Output:0
	COLOR.rgb = n_out33p0;
	COLOR.a = n_out3p4;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(800, -200)
nodes/fragment/3/node = SubResource("412")
nodes/fragment/3/position = Vector2(280, -200)
nodes/fragment/32/node = SubResource("461")
nodes/fragment/32/position = Vector2(280, -280)
nodes/fragment/33/node = SubResource("462")
nodes/fragment/33/position = Vector2(540, -300)
nodes/fragment/connections = PackedInt32Array(32, 0, 33, 1, 3, 0, 33, 0, 33, 0, 0, 0, 3, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="464"]
shader = SubResource("463")

[sub_resource type="VisualShaderNodeFloatConstant" id="465"]
constant = 2.0

[sub_resource type="VisualShaderNodeCustom" id="466"]
default_input_values = [1, 6, 2, Vector3(2, 2, 0), 3, 2, 4, 0.8, 5, 0.5, 6, 0.3, 7, Vector3(0.5, 0.5, 0)]
initialized = true
script = ExtResource("79")

[sub_resource type="VisualShaderNodeInput" id="467"]
input_name = "uv"

[sub_resource type="VisualShaderNodeFloatConstant" id="468"]
constant = 6.0

[sub_resource type="VisualShaderNodeFloatConstant" id="469"]
constant = 2.0

[sub_resource type="VisualShaderNodeFloatConstant" id="470"]
constant = 0.8

[sub_resource type="VisualShaderNodeFloatConstant" id="471"]
constant = 0.5

[sub_resource type="VisualShaderNodeFloatConstant" id="472"]
constant = 0.3

[sub_resource type="VisualShaderNodeVec3Constant" id="473"]
constant = Vector3(0.5, 0.5, 0)

[sub_resource type="VisualShader" id="474"]
resource_local_to_scene = true
code = "shader_type canvas_item;
render_mode blend_mix;



// FractalGenericNoise2D
#include \"res://addons/shaderV/rgba/noise/fractal/generic2d_fractal.gdshaderinc\"

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// FloatConstant:4
	float n_out4p0 = 6.000000;


// FloatConstant:10
	float n_out10p0 = 2.000000;


// FloatConstant:5
	float n_out5p0 = 2.000000;


// FloatConstant:6
	float n_out6p0 = 0.800000;


// FloatConstant:7
	float n_out7p0 = 0.500000;


// FloatConstant:8
	float n_out8p0 = 0.300000;


// Vector3Constant:9
	vec3 n_out9p0 = vec3(0.500000, 0.500000, 0.000000);


	float n_out2p0;
// FractalGenericNoise2D:2
	{
		n_out2p0 = _genericNoise2DFBM(vec3(n_out3p0, 0.0).xy, int(n_out4p0), vec3(n_out10p0).xy, n_out5p0, n_out6p0, n_out7p0, n_out8p0, n_out9p0.xy);
	}


// Output:0
	COLOR.rgb = vec3(n_out2p0);


}
"
graph_offset = Vector2(-116.618, -6.67545)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(400, 200)
nodes/fragment/2/node = SubResource("466")
nodes/fragment/2/position = Vector2(140, 200)
nodes/fragment/3/node = SubResource("467")
nodes/fragment/3/position = Vector2(-280, -20)
nodes/fragment/4/node = SubResource("468")
nodes/fragment/4/position = Vector2(-140, 60)
nodes/fragment/5/node = SubResource("469")
nodes/fragment/5/position = Vector2(-140, 220)
nodes/fragment/6/node = SubResource("470")
nodes/fragment/6/position = Vector2(-140, 300)
nodes/fragment/7/node = SubResource("471")
nodes/fragment/7/position = Vector2(-140, 380)
nodes/fragment/8/node = SubResource("472")
nodes/fragment/8/position = Vector2(-140, 460)
nodes/fragment/9/node = SubResource("473")
nodes/fragment/9/position = Vector2(-300, 540)
nodes/fragment/10/node = SubResource("465")
nodes/fragment/10/position = Vector2(-140, 140)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 0, 4, 0, 2, 1, 6, 0, 2, 4, 7, 0, 2, 5, 8, 0, 2, 6, 9, 0, 2, 7, 5, 0, 2, 3, 10, 0, 2, 2, 2, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="475"]
shader = SubResource("474")

[sub_resource type="VisualShaderNodeVec3Constant" id="476"]
constant = Vector3(2, 2, 0)

[sub_resource type="VisualShaderNodeVec3Constant" id="477"]
constant = Vector3(0.5, 0.5, 0)

[sub_resource type="VisualShaderNodeCustom" id="478"]
default_input_values = [1, 6, 2, Vector3(2, 2, 0), 3, 2, 4, 0.8, 5, 0.5, 6, 0.6, 7, Vector3(0.5, 0.5, 0)]
initialized = true
script = ExtResource("80")

[sub_resource type="VisualShaderNodeFloatConstant" id="479"]
constant = 6.0

[sub_resource type="VisualShaderNodeFloatConstant" id="480"]
constant = 2.0

[sub_resource type="VisualShaderNodeFloatConstant" id="481"]
constant = 0.8

[sub_resource type="VisualShaderNodeFloatConstant" id="482"]
constant = 0.5

[sub_resource type="VisualShaderNodeFloatConstant" id="483"]
constant = 0.6

[sub_resource type="VisualShader" id="484"]
resource_local_to_scene = true
code = "shader_type canvas_item;
render_mode blend_mix;



// FractalPerlinNoise2D
#include \"res://addons/shaderV/rgba/noise/fractal/perlin2d_fractal.gdshaderinc\"

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// FloatConstant:5
	float n_out5p0 = 6.000000;


// Vector3Constant:10
	vec3 n_out10p0 = vec3(2.000000, 2.000000, 0.000000);


// FloatConstant:6
	float n_out6p0 = 2.000000;


// FloatConstant:7
	float n_out7p0 = 0.800000;


// FloatConstant:8
	float n_out8p0 = 0.500000;


// FloatConstant:9
	float n_out9p0 = 0.600000;


// Vector3Constant:11
	vec3 n_out11p0 = vec3(0.500000, 0.500000, 0.000000);


	float n_out4p0;
// FractalPerlinNoise2D:4
	{
		n_out4p0 = _perlinNoise2DFBM(vec3(n_out3p0, 0.0).xy, int(n_out5p0), n_out10p0.xy, n_out6p0, n_out7p0, n_out8p0, n_out9p0, n_out11p0.xy);
	}


// Output:0
	COLOR.rgb = vec3(n_out4p0);


}
"
graph_offset = Vector2(-231.063, 38.8457)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(400, 200)
nodes/fragment/3/node = SubResource("467")
nodes/fragment/3/position = Vector2(-260, -40)
nodes/fragment/4/node = SubResource("478")
nodes/fragment/4/position = Vector2(160, 200)
nodes/fragment/5/node = SubResource("479")
nodes/fragment/5/position = Vector2(-120, 40)
nodes/fragment/6/node = SubResource("480")
nodes/fragment/6/position = Vector2(-100, 220)
nodes/fragment/7/node = SubResource("481")
nodes/fragment/7/position = Vector2(-100, 300)
nodes/fragment/8/node = SubResource("482")
nodes/fragment/8/position = Vector2(-100, 380)
nodes/fragment/9/node = SubResource("483")
nodes/fragment/9/position = Vector2(-100, 460)
nodes/fragment/10/node = SubResource("476")
nodes/fragment/10/position = Vector2(-260, 120)
nodes/fragment/11/node = SubResource("477")
nodes/fragment/11/position = Vector2(-240, 540)
nodes/fragment/connections = PackedInt32Array(3, 0, 4, 0, 5, 0, 4, 1, 6, 0, 4, 3, 7, 0, 4, 4, 8, 0, 4, 5, 9, 0, 4, 6, 10, 0, 4, 2, 11, 0, 4, 7, 4, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="485"]
shader = SubResource("484")

[sub_resource type="VisualShaderNodeFloatConstant" id="486"]
constant = 0.3

[sub_resource type="VisualShaderNodeFloatConstant" id="487"]
constant = 1.0

[sub_resource type="VisualShaderNodeVec3Constant" id="488"]
constant = Vector3(0.5, 0.5, 0)

[sub_resource type="VisualShaderNodeCustom" id="489"]
default_input_values = [1, 6, 2, Vector3(2, 2, 0), 3, 2, 4, 0.8, 5, 0.5, 6, 0.3, 7, Vector3(0.5, 0.5, 0), 8, 1, 9, false]
initialized = true
script = ExtResource("81")

[sub_resource type="VisualShaderNodeBooleanConstant" id="490"]

[sub_resource type="VisualShaderNodeVec3Constant" id="491"]
constant = Vector3(2, 2, 0)

[sub_resource type="VisualShaderNodeFloatConstant" id="492"]
constant = 6.0

[sub_resource type="VisualShaderNodeInput" id="493"]
input_name = "uv"

[sub_resource type="VisualShaderNodeFloatConstant" id="494"]
constant = 2.0

[sub_resource type="VisualShaderNodeFloatConstant" id="495"]
constant = 0.8

[sub_resource type="VisualShaderNodeFloatConstant" id="496"]
constant = 0.5

[sub_resource type="VisualShader" id="497"]
code = "shader_type canvas_item;
render_mode blend_mix;



// FractalWorleyNoise2D
#include \"res://addons/shaderV/rgba/noise/fractal/worley2d_fractal.gdshaderinc\"

void fragment() {
// Input:5
	vec2 n_out5p0 = UV;


// FloatConstant:4
	float n_out4p0 = 6.000000;


// Vector3Constant:3
	vec3 n_out3p0 = vec3(2.000000, 2.000000, 0.000000);


// FloatConstant:7
	float n_out7p0 = 2.000000;


// FloatConstant:8
	float n_out8p0 = 0.800000;


// FloatConstant:9
	float n_out9p0 = 0.500000;


// FloatConstant:10
	float n_out10p0 = 0.300000;


// Vector3Constant:12
	vec3 n_out12p0 = vec3(0.500000, 0.500000, 0.000000);


// FloatConstant:11
	float n_out11p0 = 1.000000;


// BooleanConstant:14
	bool n_out14p0 = false;


	float n_out13p0;
// FractalWorleyNoise2D:13
	{
		n_out13p0 = _cellularNoise2DFBM(vec3(n_out5p0, 0.0).xy, int(n_out4p0), n_out3p0.xy, n_out7p0, n_out8p0, n_out9p0, n_out10p0, n_out12p0.xy, n_out11p0, n_out14p0);
	}


// Output:0
	COLOR.rgb = vec3(n_out13p0);


}
"
graph_offset = Vector2(-354.809, -74.2784)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(460, 200)
nodes/fragment/3/node = SubResource("491")
nodes/fragment/3/position = Vector2(-220, 160)
nodes/fragment/4/node = SubResource("492")
nodes/fragment/4/position = Vector2(-80, 100)
nodes/fragment/5/node = SubResource("493")
nodes/fragment/5/position = Vector2(-240, 20)
nodes/fragment/7/node = SubResource("494")
nodes/fragment/7/position = Vector2(-80, 240)
nodes/fragment/8/node = SubResource("495")
nodes/fragment/8/position = Vector2(-80, 300)
nodes/fragment/9/node = SubResource("496")
nodes/fragment/9/position = Vector2(-80, 360)
nodes/fragment/10/node = SubResource("486")
nodes/fragment/10/position = Vector2(-80, 420)
nodes/fragment/11/node = SubResource("487")
nodes/fragment/11/position = Vector2(-80, 560)
nodes/fragment/12/node = SubResource("488")
nodes/fragment/12/position = Vector2(-220, 480)
nodes/fragment/13/node = SubResource("489")
nodes/fragment/13/position = Vector2(180, 200)
nodes/fragment/14/node = SubResource("490")
nodes/fragment/14/position = Vector2(-80, 620)
nodes/fragment/connections = PackedInt32Array(5, 0, 13, 0, 4, 0, 13, 1, 3, 0, 13, 2, 7, 0, 13, 3, 8, 0, 13, 4, 9, 0, 13, 5, 10, 0, 13, 6, 12, 0, 13, 7, 11, 0, 13, 8, 14, 0, 13, 9, 13, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="498"]
shader = SubResource("497")

[sub_resource type="VisualShaderNodeVec3Constant" id="499"]
constant = Vector3(0.5, 0.5, 0)

[sub_resource type="VisualShaderNodeVec3Constant" id="500"]
constant = Vector3(2, 2, 0)

[sub_resource type="VisualShaderNodeCustom" id="501"]
default_input_values = [1, 6, 2, Vector3(2, 2, 0), 3, 2, 4, 0.8, 5, 0.5, 6, 0.5, 7, Vector3(0.5, 0.5, 0)]
initialized = true
script = ExtResource("82")

[sub_resource type="VisualShaderNodeInput" id="502"]
input_name = "uv"

[sub_resource type="VisualShaderNodeFloatConstant" id="503"]
constant = 6.0

[sub_resource type="VisualShaderNodeFloatConstant" id="504"]
constant = 2.0

[sub_resource type="VisualShaderNodeFloatConstant" id="505"]
constant = 0.8

[sub_resource type="VisualShaderNodeFloatConstant" id="506"]
constant = 0.5

[sub_resource type="VisualShaderNodeFloatConstant" id="507"]
constant = 0.5

[sub_resource type="VisualShader" id="508"]
code = "shader_type canvas_item;
render_mode blend_mix;



// FractalSimplexNoise2D
#include \"res://addons/shaderV/rgba/noise/fractal/simplex2d_fractal.gdshaderinc\"

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// FloatConstant:4
	float n_out4p0 = 6.000000;


// Vector3Constant:12
	vec3 n_out12p0 = vec3(2.000000, 2.000000, 0.000000);


// FloatConstant:5
	float n_out5p0 = 2.000000;


// FloatConstant:6
	float n_out6p0 = 0.800000;


// FloatConstant:7
	float n_out7p0 = 0.500000;


// FloatConstant:8
	float n_out8p0 = 0.500000;


// Vector3Constant:10
	vec3 n_out10p0 = vec3(0.500000, 0.500000, 0.000000);


	float n_out2p0;
// FractalSimplexNoise2D:2
	{
		n_out2p0 = _simplexNoise2DFBM(vec3(n_out3p0, 0.0).xy, int(n_out4p0), n_out12p0.xy, n_out5p0, n_out6p0, n_out7p0, n_out8p0, n_out10p0.xy);
	}


// Output:0
	COLOR.rgb = vec3(n_out2p0);


}
"
graph_offset = Vector2(-202.473, 86.5394)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(600, 200)
nodes/fragment/2/node = SubResource("501")
nodes/fragment/2/position = Vector2(320, 200)
nodes/fragment/3/node = SubResource("502")
nodes/fragment/3/position = Vector2(-80, 20)
nodes/fragment/4/node = SubResource("503")
nodes/fragment/4/position = Vector2(60, 100)
nodes/fragment/5/node = SubResource("504")
nodes/fragment/5/position = Vector2(60, 240)
nodes/fragment/6/node = SubResource("505")
nodes/fragment/6/position = Vector2(60, 300)
nodes/fragment/7/node = SubResource("506")
nodes/fragment/7/position = Vector2(60, 360)
nodes/fragment/8/node = SubResource("507")
nodes/fragment/8/position = Vector2(60, 420)
nodes/fragment/10/node = SubResource("499")
nodes/fragment/10/position = Vector2(-80, 480)
nodes/fragment/12/node = SubResource("500")
nodes/fragment/12/position = Vector2(-80, 160)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 0, 4, 0, 2, 1, 10, 0, 2, 7, 5, 0, 2, 3, 6, 0, 2, 4, 7, 0, 2, 5, 8, 0, 2, 6, 12, 0, 2, 2, 2, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="509"]
shader = SubResource("508")

[sub_resource type="VisualShaderNodeFloatConstant" id="510"]
constant = 0.8

[sub_resource type="VisualShaderNodeFloatConstant" id="511"]
constant = 2.0

[sub_resource type="VisualShaderNodeVec3Constant" id="512"]
constant = Vector3(2, 2, 0)

[sub_resource type="VisualShaderNodeFloatConstant" id="513"]
constant = 6.0

[sub_resource type="VisualShaderNodeCustom" id="514"]
default_input_values = [1, 6, 2, Vector3(2, 2, 0), 3, 2, 4, 0.8, 5, 0.5, 6, 0.3, 7, Vector3(0.5, 0.5, 0), 8, 1, 9, false, 10, 0]
initialized = true
script = ExtResource("83")

[sub_resource type="VisualShaderNodeInput" id="515"]
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id="516"]
input_name = "time"

[sub_resource type="VisualShaderNodeBooleanConstant" id="517"]

[sub_resource type="VisualShaderNodeFloatConstant" id="518"]
constant = 1.0

[sub_resource type="VisualShaderNodeVec3Constant" id="519"]
constant = Vector3(0.5, 0.5, 0)

[sub_resource type="VisualShaderNodeFloatConstant" id="520"]
constant = 0.3

[sub_resource type="VisualShaderNodeFloatConstant" id="521"]
constant = 0.5

[sub_resource type="VisualShader" id="522"]
code = "shader_type canvas_item;
render_mode blend_mix;



// FractalWorleyNoise3D
#include \"res://addons/shaderV/rgba/noise/fractal/worley3d_fractal.gdshaderinc\"

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// FloatConstant:13
	float n_out13p0 = 6.000000;


// Vector3Constant:12
	vec3 n_out12p0 = vec3(2.000000, 2.000000, 0.000000);


// FloatConstant:11
	float n_out11p0 = 2.000000;


// FloatConstant:10
	float n_out10p0 = 0.800000;


// FloatConstant:9
	float n_out9p0 = 0.500000;


// FloatConstant:8
	float n_out8p0 = 0.300000;


// Vector3Constant:7
	vec3 n_out7p0 = vec3(0.500000, 0.500000, 0.000000);


// FloatConstant:6
	float n_out6p0 = 1.000000;


// BooleanConstant:5
	bool n_out5p0 = false;


// Input:4
	float n_out4p0 = TIME;


	float n_out2p0;
// FractalWorleyNoise3D:2
	{
		n_out2p0 = _cellularNoise3DFBM(vec3(n_out3p0, 0.0).xy, int(n_out13p0), n_out12p0.xy, n_out11p0, n_out10p0, n_out9p0, n_out8p0, n_out7p0.xy, n_out6p0, n_out5p0, n_out4p0);
	}


// Output:0
	COLOR.rgb = vec3(n_out2p0);


}
"
graph_offset = Vector2(-189.109, 35.1915)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(600, 200)
nodes/fragment/2/node = SubResource("514")
nodes/fragment/2/position = Vector2(340, 200)
nodes/fragment/3/node = SubResource("515")
nodes/fragment/3/position = Vector2(-60, -20)
nodes/fragment/4/node = SubResource("516")
nodes/fragment/4/position = Vector2(-40, 640)
nodes/fragment/5/node = SubResource("517")
nodes/fragment/5/position = Vector2(60, 560)
nodes/fragment/6/node = SubResource("518")
nodes/fragment/6/position = Vector2(80, 500)
nodes/fragment/7/node = SubResource("519")
nodes/fragment/7/position = Vector2(-80, 420)
nodes/fragment/8/node = SubResource("520")
nodes/fragment/8/position = Vector2(80, 360)
nodes/fragment/9/node = SubResource("521")
nodes/fragment/9/position = Vector2(80, 300)
nodes/fragment/10/node = SubResource("510")
nodes/fragment/10/position = Vector2(80, 240)
nodes/fragment/11/node = SubResource("511")
nodes/fragment/11/position = Vector2(80, 180)
nodes/fragment/12/node = SubResource("512")
nodes/fragment/12/position = Vector2(-60, 100)
nodes/fragment/13/node = SubResource("513")
nodes/fragment/13/position = Vector2(80, 40)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 0, 4, 0, 2, 10, 5, 0, 2, 9, 6, 0, 2, 8, 7, 0, 2, 7, 8, 0, 2, 6, 9, 0, 2, 5, 10, 0, 2, 4, 11, 0, 2, 3, 12, 0, 2, 2, 13, 0, 2, 1, 2, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="523"]
shader = SubResource("522")

[sub_resource type="VisualShaderNodeFloatConstant" id="524"]
constant = 0.6

[sub_resource type="VisualShaderNodeVec3Constant" id="525"]
constant = Vector3(2, 2, 0)

[sub_resource type="VisualShaderNodeVec3Constant" id="526"]
constant = Vector3(0.5, 0.5, 0)

[sub_resource type="VisualShaderNodeInput" id="527"]
input_name = "uv"

[sub_resource type="VisualShaderNodeCustom" id="528"]
default_input_values = [1, 6, 2, Vector3(2, 2, 0), 3, 2, 4, 0.8, 5, 0.5, 6, 0.6, 7, Vector3(0.5, 0.5, 0), 8, 0]
initialized = true
script = ExtResource("84")

[sub_resource type="VisualShaderNodeInput" id="529"]
input_name = "time"

[sub_resource type="VisualShaderNodeFloatConstant" id="530"]
constant = 6.0

[sub_resource type="VisualShaderNodeFloatConstant" id="531"]
constant = 2.0

[sub_resource type="VisualShaderNodeFloatConstant" id="532"]
constant = 0.8

[sub_resource type="VisualShaderNodeFloatConstant" id="533"]
constant = 0.5

[sub_resource type="VisualShader" id="534"]
code = "shader_type canvas_item;
render_mode blend_mix;



// FractalPerlinNoise3D
#include \"res://addons/shaderV/rgba/noise/fractal/perlin3d_fractal.gdshaderinc\"

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// FloatConstant:6
	float n_out6p0 = 6.000000;


// Vector3Constant:11
	vec3 n_out11p0 = vec3(2.000000, 2.000000, 0.000000);


// FloatConstant:7
	float n_out7p0 = 2.000000;


// FloatConstant:8
	float n_out8p0 = 0.800000;


// FloatConstant:9
	float n_out9p0 = 0.500000;


// FloatConstant:10
	float n_out10p0 = 0.600000;


// Vector3Constant:12
	vec3 n_out12p0 = vec3(0.500000, 0.500000, 0.000000);


// Input:5
	float n_out5p0 = TIME;


	float n_out4p0;
// FractalPerlinNoise3D:4
	{
		n_out4p0 = _perlinNoise3DFBM(vec3(n_out3p0, 0.0).xy, int(n_out6p0), n_out11p0.xy, n_out7p0, n_out8p0, n_out9p0, n_out10p0, n_out12p0.xy, n_out5p0);
	}


// Output:0
	COLOR.rgb = vec3(n_out4p0);


}
"
graph_offset = Vector2(-325.64, -4.4259)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(420, 200)
nodes/fragment/3/node = SubResource("527")
nodes/fragment/3/position = Vector2(-260, 0)
nodes/fragment/4/node = SubResource("528")
nodes/fragment/4/position = Vector2(160, 200)
nodes/fragment/5/node = SubResource("529")
nodes/fragment/5/position = Vector2(-260, 520)
nodes/fragment/6/node = SubResource("530")
nodes/fragment/6/position = Vector2(-120, 60)
nodes/fragment/7/node = SubResource("531")
nodes/fragment/7/position = Vector2(-120, 200)
nodes/fragment/8/node = SubResource("532")
nodes/fragment/8/position = Vector2(-120, 260)
nodes/fragment/9/node = SubResource("533")
nodes/fragment/9/position = Vector2(-120, 320)
nodes/fragment/10/node = SubResource("524")
nodes/fragment/10/position = Vector2(-120, 380)
nodes/fragment/11/node = SubResource("525")
nodes/fragment/11/position = Vector2(-260, 120)
nodes/fragment/12/node = SubResource("526")
nodes/fragment/12/position = Vector2(-280, 440)
nodes/fragment/connections = PackedInt32Array(3, 0, 4, 0, 6, 0, 4, 1, 7, 0, 4, 3, 8, 0, 4, 4, 9, 0, 4, 5, 10, 0, 4, 6, 11, 0, 4, 2, 12, 0, 4, 7, 5, 0, 4, 8, 4, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="535"]
shader = SubResource("534")

[sub_resource type="VisualShaderNodeFloatConstant" id="536"]
constant = 0.5

[sub_resource type="VisualShaderNodeFloatConstant" id="537"]
constant = 0.6

[sub_resource type="VisualShaderNodeCustom" id="538"]
default_input_values = [1, 6, 2, Vector3(2, 2, 0), 3, 2, 4, 0.8, 5, 0.5, 6, 0.6, 7, Vector3(0.5, 0.5, 0), 8, 0]
initialized = true
script = ExtResource("85")

[sub_resource type="VisualShaderNodeInput" id="539"]
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id="540"]
input_name = "time"

[sub_resource type="VisualShaderNodeFloatConstant" id="541"]
constant = 6.0

[sub_resource type="VisualShaderNodeVec3Constant" id="542"]
constant = Vector3(2, 2, 0)

[sub_resource type="VisualShaderNodeVec3Constant" id="543"]
constant = Vector3(0.5, 0.5, 0)

[sub_resource type="VisualShaderNodeFloatConstant" id="544"]
constant = 2.0

[sub_resource type="VisualShaderNodeFloatConstant" id="545"]
constant = 0.8

[sub_resource type="VisualShader" id="546"]
code = "shader_type canvas_item;
render_mode blend_mix;



// FractalSimplexNoise3D
#include \"res://addons/shaderV/rgba/noise/fractal/simplex3d_fractal.gdshaderinc\"

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// FloatConstant:5
	float n_out5p0 = 6.000000;


// Vector3Constant:6
	vec3 n_out6p0 = vec3(2.000000, 2.000000, 0.000000);


// FloatConstant:8
	float n_out8p0 = 2.000000;


// FloatConstant:9
	float n_out9p0 = 0.800000;


// FloatConstant:10
	float n_out10p0 = 0.500000;


// FloatConstant:11
	float n_out11p0 = 0.600000;


// Vector3Constant:7
	vec3 n_out7p0 = vec3(0.500000, 0.500000, 0.000000);


// Input:4
	float n_out4p0 = TIME;


	float n_out2p0;
// FractalSimplexNoise3D:2
	{
		n_out2p0 = _simplexNoise3DFBM(vec3(n_out3p0, 0.0).xy, int(n_out5p0), n_out6p0.xy, n_out8p0, n_out9p0, n_out10p0, n_out11p0, n_out7p0.xy, n_out4p0);
	}


// Output:0
	COLOR.rgb = vec3(n_out2p0);


}
"
graph_offset = Vector2(-346.405, 163.275)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(400, 200)
nodes/fragment/2/node = SubResource("538")
nodes/fragment/2/position = Vector2(140, 200)
nodes/fragment/3/node = SubResource("539")
nodes/fragment/3/position = Vector2(-260, 0)
nodes/fragment/4/node = SubResource("540")
nodes/fragment/4/position = Vector2(-240, 520)
nodes/fragment/5/node = SubResource("541")
nodes/fragment/5/position = Vector2(-120, 60)
nodes/fragment/6/node = SubResource("542")
nodes/fragment/6/position = Vector2(-260, 120)
nodes/fragment/7/node = SubResource("543")
nodes/fragment/7/position = Vector2(-260, 440)
nodes/fragment/8/node = SubResource("544")
nodes/fragment/8/position = Vector2(-120, 200)
nodes/fragment/9/node = SubResource("545")
nodes/fragment/9/position = Vector2(-120, 260)
nodes/fragment/10/node = SubResource("536")
nodes/fragment/10/position = Vector2(-120, 320)
nodes/fragment/11/node = SubResource("537")
nodes/fragment/11/position = Vector2(-120, 380)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 0, 5, 0, 2, 1, 6, 0, 2, 2, 4, 0, 2, 8, 7, 0, 2, 7, 8, 0, 2, 3, 9, 0, 2, 4, 10, 0, 2, 5, 11, 0, 2, 6, 2, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="547"]
shader = SubResource("546")

[sub_resource type="VisualShaderNodeFloatConstant" id="548"]
constant = 0.6

[sub_resource type="VisualShaderNodeVec3Constant" id="549"]
constant = Vector3(0.5, 0.5, 0)

[sub_resource type="VisualShaderNodeFloatConstant" id="550"]
constant = 1.0

[sub_resource type="VisualShaderNodeCustom" id="551"]
default_input_values = [1, 6, 2, Vector3(2, 2, 0), 3, 2, 4, 0.8, 5, 0.5, 6, 0.6, 7, Vector3(0.5, 0.5, 0), 8, 0, 9, 0]
initialized = true
script = ExtResource("86")

[sub_resource type="VisualShaderNodeInput" id="552"]
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id="553"]
input_name = "time"

[sub_resource type="VisualShaderNodeFloatConstant" id="554"]
constant = 6.0

[sub_resource type="VisualShaderNodeFloatConstant" id="555"]
constant = 2.0

[sub_resource type="VisualShaderNodeFloatConstant" id="556"]
constant = 0.8

[sub_resource type="VisualShaderNodeFloatConstant" id="557"]
constant = 0.5

[sub_resource type="VisualShaderNodeVec3Constant" id="558"]
constant = Vector3(2, 2, 0)

[sub_resource type="VisualShader" id="559"]
code = "shader_type canvas_item;
render_mode blend_mix;



// FractalPerlinNoise4D
#include \"res://addons/shaderV/rgba/noise/fractal/perlin4d_fractal.gdshaderinc\"

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// FloatConstant:5
	float n_out5p0 = 6.000000;


// Vector3Constant:9
	vec3 n_out9p0 = vec3(2.000000, 2.000000, 0.000000);


// FloatConstant:6
	float n_out6p0 = 2.000000;


// FloatConstant:7
	float n_out7p0 = 0.800000;


// FloatConstant:8
	float n_out8p0 = 0.500000;


// FloatConstant:10
	float n_out10p0 = 0.600000;


// Vector3Constant:11
	vec3 n_out11p0 = vec3(0.500000, 0.500000, 0.000000);


// FloatConstant:12
	float n_out12p0 = 1.000000;


// Input:4
	float n_out4p0 = TIME;


	float n_out2p0;
// FractalPerlinNoise4D:2
	{
		n_out2p0 = _perlinNoise4DFBM(vec3(n_out3p0, 0.0).xy, int(n_out5p0), n_out9p0.xy, n_out6p0, n_out7p0, n_out8p0, n_out10p0, n_out11p0.xy, n_out4p0, n_out12p0);
	}


// Output:0
	COLOR.rgb = vec3(n_out2p0);


}
"
graph_offset = Vector2(-371.857, 241.222)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(460, 200)
nodes/fragment/2/node = SubResource("551")
nodes/fragment/2/position = Vector2(200, 200)
nodes/fragment/3/node = SubResource("552")
nodes/fragment/3/position = Vector2(-200, -20)
nodes/fragment/4/node = SubResource("553")
nodes/fragment/4/position = Vector2(-180, 580)
nodes/fragment/5/node = SubResource("554")
nodes/fragment/5/position = Vector2(-60, 60)
nodes/fragment/6/node = SubResource("555")
nodes/fragment/6/position = Vector2(-60, 200)
nodes/fragment/7/node = SubResource("556")
nodes/fragment/7/position = Vector2(-60, 260)
nodes/fragment/8/node = SubResource("557")
nodes/fragment/8/position = Vector2(-60, 320)
nodes/fragment/9/node = SubResource("558")
nodes/fragment/9/position = Vector2(-200, 120)
nodes/fragment/10/node = SubResource("548")
nodes/fragment/10/position = Vector2(-60, 380)
nodes/fragment/11/node = SubResource("549")
nodes/fragment/11/position = Vector2(-200, 440)
nodes/fragment/12/node = SubResource("550")
nodes/fragment/12/position = Vector2(-60, 520)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 0, 4, 0, 2, 9, 5, 0, 2, 1, 9, 0, 2, 2, 6, 0, 2, 3, 7, 0, 2, 4, 8, 0, 2, 5, 10, 0, 2, 6, 11, 0, 2, 7, 12, 0, 2, 8, 2, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="560"]
shader = SubResource("559")

[sub_resource type="VisualShaderNodeFloatConstant" id="561"]
constant = 0.5

[sub_resource type="VisualShaderNodeFloatConstant" id="562"]
constant = 0.6

[sub_resource type="VisualShaderNodeFloatConstant" id="563"]
constant = 1.0

[sub_resource type="VisualShaderNodeCustom" id="564"]
default_input_values = [1, 6, 2, Vector3(2, 2, 0), 3, 2, 4, 0.8, 5, 0.5, 6, 0.6, 7, Vector3(0.5, 0.5, 0), 8, 0, 9, 0]
initialized = true
script = ExtResource("87")

[sub_resource type="VisualShaderNodeInput" id="565"]
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id="566"]
input_name = "time"

[sub_resource type="VisualShaderNodeFloatConstant" id="567"]
constant = 6.0

[sub_resource type="VisualShaderNodeVec3Constant" id="568"]
constant = Vector3(2, 2, 0)

[sub_resource type="VisualShaderNodeFloatConstant" id="569"]
constant = 2.0

[sub_resource type="VisualShaderNodeFloatConstant" id="570"]
constant = 0.8

[sub_resource type="VisualShaderNodeVec3Constant" id="571"]
constant = Vector3(0.5, 0.5, 0)

[sub_resource type="VisualShader" id="572"]
code = "shader_type canvas_item;
render_mode blend_mix;



// FractalSimplexNoise4D
#include \"res://addons/shaderV/rgba/noise/fractal/simplex4d_fractal.gdshaderinc\"

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// FloatConstant:5
	float n_out5p0 = 6.000000;


// Vector3Constant:6
	vec3 n_out6p0 = vec3(2.000000, 2.000000, 0.000000);


// FloatConstant:7
	float n_out7p0 = 2.000000;


// FloatConstant:8
	float n_out8p0 = 0.800000;


// FloatConstant:10
	float n_out10p0 = 0.500000;


// FloatConstant:11
	float n_out11p0 = 0.600000;


// Vector3Constant:9
	vec3 n_out9p0 = vec3(0.500000, 0.500000, 0.000000);


// FloatConstant:12
	float n_out12p0 = 1.000000;


// Input:4
	float n_out4p0 = TIME;


	float n_out2p0;
// FractalSimplexNoise4D:2
	{
		n_out2p0 = _simplexNoise4DFBM(vec3(n_out3p0, 0.0).xy, int(n_out5p0), n_out6p0.xy, n_out7p0, n_out8p0, n_out10p0, n_out11p0, n_out9p0.xy, n_out4p0, n_out12p0);
	}


// Output:0
	COLOR.rgb = vec3(n_out2p0);


}
"
graph_offset = Vector2(-245.436, 47.5641)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(480, 200)
nodes/fragment/2/node = SubResource("564")
nodes/fragment/2/position = Vector2(200, 200)
nodes/fragment/3/node = SubResource("565")
nodes/fragment/3/position = Vector2(-180, 0)
nodes/fragment/4/node = SubResource("566")
nodes/fragment/4/position = Vector2(-160, 580)
nodes/fragment/5/node = SubResource("567")
nodes/fragment/5/position = Vector2(-40, 60)
nodes/fragment/6/node = SubResource("568")
nodes/fragment/6/position = Vector2(-180, 120)
nodes/fragment/7/node = SubResource("569")
nodes/fragment/7/position = Vector2(-40, 200)
nodes/fragment/8/node = SubResource("570")
nodes/fragment/8/position = Vector2(-40, 260)
nodes/fragment/9/node = SubResource("571")
nodes/fragment/9/position = Vector2(-200, 440)
nodes/fragment/10/node = SubResource("561")
nodes/fragment/10/position = Vector2(-40, 320)
nodes/fragment/11/node = SubResource("562")
nodes/fragment/11/position = Vector2(-40, 380)
nodes/fragment/12/node = SubResource("563")
nodes/fragment/12/position = Vector2(-40, 520)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 0, 4, 0, 2, 9, 7, 0, 2, 3, 5, 0, 2, 1, 6, 0, 2, 2, 8, 0, 2, 4, 10, 0, 2, 5, 11, 0, 2, 6, 9, 0, 2, 7, 12, 0, 2, 8, 2, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="573"]
shader = SubResource("572")

[sub_resource type="VisualShaderNodeCustom" id="574"]
default_input_values = [2, Vector3(64, 64, 0), 3, 10, 4, false, 5, false, 6, false]
initialized = true
script = ExtResource("88")

[sub_resource type="VisualShaderNodeInput" id="575"]
input_name = "texture"

[sub_resource type="VisualShaderNodeInput" id="576"]
input_name = "uv"

[sub_resource type="VisualShaderNodeVec3Constant" id="577"]
constant = Vector3(68, 68, 0)

[sub_resource type="VisualShaderNodeFloatConstant" id="578"]
constant = 10.0

[sub_resource type="VisualShaderNodeBooleanConstant" id="579"]

[sub_resource type="VisualShaderNodeBooleanConstant" id="580"]

[sub_resource type="VisualShaderNodeBooleanConstant" id="581"]

[sub_resource type="VisualShader" id="582"]
code = "shader_type canvas_item;
render_mode blend_mix;



// NormalFromHeightmap
#include \"res://addons/shaderV/rgba/normalFromHeightmap.gdshaderinc\"

void fragment() {
// Input:4
	vec2 n_out4p0 = UV;


// Vector3Constant:5
	vec3 n_out5p0 = vec3(68.000000, 68.000000, 0.000000);


// FloatConstant:6
	float n_out6p0 = 10.000000;


// BooleanConstant:7
	bool n_out7p0 = false;


// BooleanConstant:8
	bool n_out8p0 = false;


// BooleanConstant:9
	bool n_out9p0 = false;


	vec3 n_out2p0;
// NormalFromHeightmap:2
	{
		n_out2p0 = _normalFromHeightmapFunc(vec3(n_out4p0, 0.0).xy, TEXTURE, n_out5p0.xy, n_out6p0, n_out7p0, n_out8p0, n_out9p0);
	}


// Output:0
	COLOR.rgb = n_out2p0;


}
"
graph_offset = Vector2(-300.192, -48.4031)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(420, 200)
nodes/fragment/2/node = SubResource("574")
nodes/fragment/2/position = Vector2(80, 200)
nodes/fragment/3/node = SubResource("575")
nodes/fragment/3/position = Vector2(-260, 40)
nodes/fragment/4/node = SubResource("576")
nodes/fragment/4/position = Vector2(-300, 120)
nodes/fragment/5/node = SubResource("577")
nodes/fragment/5/position = Vector2(-300, 180)
nodes/fragment/6/node = SubResource("578")
nodes/fragment/6/position = Vector2(-160, 260)
nodes/fragment/7/node = SubResource("579")
nodes/fragment/7/position = Vector2(-180, 320)
nodes/fragment/8/node = SubResource("580")
nodes/fragment/8/position = Vector2(-180, 380)
nodes/fragment/9/node = SubResource("581")
nodes/fragment/9/position = Vector2(-180, 440)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 0, 4, 0, 2, 1, 5, 0, 2, 2, 6, 0, 2, 3, 7, 0, 2, 4, 8, 0, 2, 5, 9, 0, 2, 6, 2, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="583"]
shader = SubResource("582")

[sub_resource type="VisualShaderNodeCustom" id="584"]
output_port_for_preview = 0
default_input_values = [0, Vector3(1, 1, 0)]
expanded_output_ports = [0]
initialized = true
script = ExtResource("89")

[sub_resource type="VisualShaderNodeCustom" id="585"]
output_port_for_preview = 0
default_input_values = [0, Vector3(1, 1, 1)]
expanded_output_ports = [0]
initialized = true
script = ExtResource("91")

[sub_resource type="VisualShaderNodeCustom" id="586"]
output_port_for_preview = 0
default_input_values = [0, Vector3(1, 1, 0)]
expanded_output_ports = [0]
initialized = true
script = ExtResource("92")

[sub_resource type="VisualShaderNodeCustom" id="587"]
output_port_for_preview = 0
default_input_values = [0, Vector3(1, 1, 1)]
expanded_output_ports = [0]
initialized = true
script = ExtResource("90")

[sub_resource type="VisualShaderNodeInput" id="588"]
output_port_for_preview = 0
expanded_output_ports = [0]
input_name = "uv"

[sub_resource type="VisualShader" id="589"]
code = "shader_type canvas_item;
render_mode blend_mix;



// CartesianToSpherical
#include \"res://addons/shaderV/tools/transformCoordinates/cartesianToSpherical.gdshaderinc\"
// SphericalToCartesian
#include \"res://addons/shaderV/tools/transformCoordinates/sphericalToCartesian.gdshaderinc\"

void fragment() {
// Input:6
	vec2 n_out6p0 = UV;
	float n_out6p1 = n_out6p0.r;
	float n_out6p2 = n_out6p0.g;


	vec3 n_out3p0;
// CartesianToSpherical:3
	{
		n_out3p0 = _cartesianToSphericalFunc(vec3(n_out6p0, 0.0));
	}


	vec3 n_out5p0;
// SphericalToCartesian:5
	{
		n_out5p0 = _sphericalToCartesianFunc(n_out3p0);
	}


// Output:0
	COLOR.rgb = n_out5p0;


}
"
graph_offset = Vector2(-421.011, -248.045)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(680, -20)
nodes/fragment/2/node = SubResource("584")
nodes/fragment/2/position = Vector2(-20, -200)
nodes/fragment/3/node = SubResource("585")
nodes/fragment/3/position = Vector2(-120, 140)
nodes/fragment/4/node = SubResource("586")
nodes/fragment/4/position = Vector2(240, -200)
nodes/fragment/5/node = SubResource("587")
nodes/fragment/5/position = Vector2(260, 140)
nodes/fragment/6/node = SubResource("588")
nodes/fragment/6/position = Vector2(-540, -80)
nodes/fragment/connections = PackedInt32Array(3, 0, 5, 0, 2, 0, 4, 0, 5, 0, 0, 0, 6, 0, 2, 0, 6, 0, 3, 0)

[sub_resource type="ShaderMaterial" id="590"]
shader = SubResource("589")

[sub_resource type="VisualShaderNodeCustom" id="591"]
default_input_values = [1, Vector3(8, 8, 0), 2, Vector3(0.2, 0.2, 0), 3, Vector3(0.01, 0.01, 0), 4, Vector3(1, 1, 1), 5, 1.0, 6, Vector3(0, 0, 0), 7, 0.0]
initialized = true
script = ExtResource("93")

[sub_resource type="VisualShaderNodeColorConstant" id="592"]
constant = Color(1, 0, 0, 1)

[sub_resource type="VisualShaderNodeColorConstant" id="593"]
constant = Color(1, 1, 0, 0)

[sub_resource type="VisualShaderNodeVec3Constant" id="594"]
constant = Vector3(0.05, 0.05, 0)

[sub_resource type="VisualShaderNodeInput" id="595"]
input_name = "uv"

[sub_resource type="VisualShaderNodeVec3Constant" id="596"]
constant = Vector3(0.2, 0.2, 0)

[sub_resource type="VisualShaderNodeVec3Constant" id="597"]
constant = Vector3(8, 8, 0)

[sub_resource type="VisualShader" id="598"]
code = "shader_type canvas_item;
render_mode blend_mix;



// GridShape
#include \"res://addons/shaderV/rgba/generate_shapes/gridShape.gdshaderinc\"

void fragment() {
// Input:6
	vec2 n_out6p0 = UV;


// Vector3Constant:8
	vec3 n_out8p0 = vec3(8.000000, 8.000000, 0.000000);


// Vector3Constant:7
	vec3 n_out7p0 = vec3(0.200000, 0.200000, 0.000000);


// Vector3Constant:5
	vec3 n_out5p0 = vec3(0.050000, 0.050000, 0.000000);


// ColorConstant:3
	vec4 n_out3p0 = vec4(1.000000, 0.000000, 0.000000, 1.000000);


// ColorConstant:4
	vec4 n_out4p0 = vec4(1.000000, 1.000000, 0.000000, 0.000000);


	vec3 n_out2p0;
	float n_out2p1;
// GridShape:2
	float n_in2p5 = 1.00000;
	float n_in2p7 = 0.00000;
	{
		vec4 n_out2p0n_out2p1 = _gridFunc(vec3(n_out6p0, 0.0).xy, n_out7p0.xy, n_out5p0.xy, n_out8p0.xy, vec4(vec3(n_out3p0.xyz), n_in2p5), vec4(vec3(n_out4p0.xyz), n_in2p7));
		n_out2p0 = n_out2p0n_out2p1.rgb;
		n_out2p1 = n_out2p0n_out2p1.a;
	}


// Output:0
	COLOR.rgb = n_out2p0;
	COLOR.a = n_out2p1;


}
"
graph_offset = Vector2(-178.57, 110.562)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(400, 200)
nodes/fragment/2/node = SubResource("591")
nodes/fragment/2/position = Vector2(100, 200)
nodes/fragment/3/node = SubResource("592")
nodes/fragment/3/position = Vector2(-160, 400)
nodes/fragment/4/node = SubResource("593")
nodes/fragment/4/position = Vector2(-160, 480)
nodes/fragment/5/node = SubResource("594")
nodes/fragment/5/position = Vector2(-320, 300)
nodes/fragment/6/node = SubResource("595")
nodes/fragment/6/position = Vector2(-320, 60)
nodes/fragment/7/node = SubResource("596")
nodes/fragment/7/position = Vector2(-320, 220)
nodes/fragment/8/node = SubResource("597")
nodes/fragment/8/position = Vector2(-320, 140)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 4, 4, 0, 2, 6, 5, 0, 2, 3, 6, 0, 2, 0, 7, 0, 2, 2, 8, 0, 2, 1, 2, 1, 0, 1, 2, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="599"]
shader = SubResource("598")

[sub_resource type="VisualShaderNodeCustom" id="600"]
default_input_values = [2, -1.0, 3, 0.001, 4, false, 5, false]
initialized = true
script = ExtResource("94")

[sub_resource type="VisualShaderNodeInput" id="601"]
input_name = "texture"

[sub_resource type="VisualShaderNodeInput" id="602"]
input_name = "uv"

[sub_resource type="VisualShaderNodeFloatConstant" id="603"]
constant = -1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="604"]
constant = 0.005

[sub_resource type="VisualShaderNodeBooleanConstant" id="605"]

[sub_resource type="VisualShaderNodeBooleanConstant" id="606"]

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_vb5u8"]

[sub_resource type="VisualShader" id="607"]
code = "shader_type canvas_item;
render_mode blend_mix;



// SobelEdge
#include \"res://addons/shaderV/rgba/sobelEdge.gdshaderinc\"

void fragment() {
// ColorConstant:9
	vec4 n_out9p0 = vec4(1.000000, 1.000000, 1.000000, 1.000000);


// Input:4
	vec2 n_out4p0 = UV;


// FloatConstant:5
	float n_out5p0 = -1.000000;


// FloatConstant:6
	float n_out6p0 = 0.005000;


// BooleanConstant:7
	bool n_out7p0 = false;


// BooleanConstant:8
	bool n_out8p0 = false;


	float n_out2p0;
// SobelEdge:2
	{
		n_out2p0 = _sobelEdgeFunc(TEXTURE, vec3(n_out4p0, 0.0).xy, n_out5p0, n_out6p0, n_out7p0, n_out8p0);
	}


// Output:0
	COLOR.rgb = vec3(n_out9p0.xyz);
	COLOR.a = n_out2p0;


}
"
graph_offset = Vector2(-31, 32)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(400, 200)
nodes/fragment/2/node = SubResource("600")
nodes/fragment/2/position = Vector2(100, 200)
nodes/fragment/3/node = SubResource("601")
nodes/fragment/3/position = Vector2(-220, 40)
nodes/fragment/4/node = SubResource("602")
nodes/fragment/4/position = Vector2(-260, 120)
nodes/fragment/5/node = SubResource("603")
nodes/fragment/5/position = Vector2(-120, 200)
nodes/fragment/6/node = SubResource("604")
nodes/fragment/6/position = Vector2(-120, 260)
nodes/fragment/7/node = SubResource("605")
nodes/fragment/7/position = Vector2(-100, 320)
nodes/fragment/8/node = SubResource("606")
nodes/fragment/8/position = Vector2(-100, 380)
nodes/fragment/9/node = SubResource("VisualShaderNodeColorConstant_vb5u8")
nodes/fragment/9/position = Vector2(220, 100)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 0, 4, 0, 2, 1, 5, 0, 2, 2, 6, 0, 2, 3, 7, 0, 2, 4, 8, 0, 2, 5, 2, 0, 0, 1, 9, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="608"]
shader = SubResource("607")

[node name="root" type="Control"]
texture_filter = 1
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="container" type="GridContainer" parent="."]
texture_filter = 1
layout_mode = 0
offset_right = 1450.0
offset_bottom = 1080.0
columns = 11

[node name="distortionUV" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/distortionUV"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Distortion UV"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/distortionUV"]
texture_filter = 1
material = SubResource("8")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="FlipUV" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/FlipUV"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Flip UV"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/FlipUV"]
texture_filter = 1
material = SubResource("15")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="lensDistortion" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/lensDistortion"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Lens Distortion"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/lensDistortion"]
texture_filter = 1
material = SubResource("19")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="pixelate" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/pixelate"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Pixelate UV"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/pixelate"]
texture_filter = 1
material = SubResource("24")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="rotate" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/rotate"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Rotate UV"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/rotate"]
texture_filter = 1
material = SubResource("29")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="scaleUV" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/scaleUV"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Scale UV"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/scaleUV"]
texture_filter = 1
material = SubResource("34")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="sphericalUV" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/sphericalUV"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Spherical UV"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/sphericalUV"]
texture_filter = 1
material = SubResource("41")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="tileUV" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/tileUV"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Tile UV"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/tileUV"]
texture_filter = 1
material = SubResource("47")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="tilingNoffset" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/tilingNoffset"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Tiling & Offset UV"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/tilingNoffset"]
texture_filter = 1
material = SubResource("51")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="transformUV" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/transformUV"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Transform3D UV"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/transformUV"]
texture_filter = 1
material = SubResource("59")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="twirl" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/twirl"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Twirl UV"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/twirl"]
texture_filter = 1
material = SubResource("64")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="distortionUVAnimated" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/distortionUVAnimated"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Distortion UV
Animated"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/distortionUVAnimated"]
texture_filter = 1
material = SubResource("73")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="doodleUV" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/doodleUV"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Doodle UV"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/doodleUV"]
texture_filter = 1
material = SubResource("81")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="rotateAnimated" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/rotateAnimated"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Rotate UV
Animated"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/rotateAnimated"]
texture_filter = 1
material = SubResource("86")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="swirlUV" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/swirlUV"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Swirl UV"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/swirlUV"]
texture_filter = 1
material = SubResource("93")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="tilingNoffsetAnimated" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/tilingNoffsetAnimated"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Tiling & Offset UV
Animated"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/tilingNoffsetAnimated"]
texture_filter = 1
texture_repeat = 2
material = SubResource("98")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="hash1d" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/hash1d"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Hash 1D
Random"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/hash1d"]
texture_filter = 1
material = SubResource("101")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="hash2d" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/hash2d"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Hash 2D
Random"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/hash2d"]
texture_filter = 1
material = SubResource("104")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="hash2dvector" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/hash2dvector"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Hash Random 
Vector 2D"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/hash2dvector"]
texture_filter = 1
material = SubResource("107")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="randomFloat" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/randomFloat"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Random Float"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/randomFloat"]
texture_filter = 1
material = SubResource("110")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="randomGoldNoiseFloat" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/randomGoldNoiseFloat"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Random Float
(Gold Noise)"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/randomGoldNoiseFloat"]
texture_filter = 1
material = SubResource("119")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="remap" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/remap"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Remap Vector"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/remap"]
texture_filter = 1
material = SubResource("127")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="sinTime" type="VBoxContainer" parent="container"]
texture_filter = 1
material = SubResource("ShaderMaterial_bvkyk")
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/sinTime"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "SinTIME"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/sinTime"]
texture_filter = 1
material = SubResource("132")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="vec2Compose" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/vec2Compose"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Vector2 Compose"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/vec2Compose"]
texture_filter = 1
material = SubResource("137")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="blur9sample" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/blur9sample"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Basic Blur"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/blur9sample"]
texture_filter = 1
material = SubResource("144")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="blurCustom" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/blurCustom"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Blur Custom"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/blurCustom"]
texture_filter = 1
material = SubResource("150")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="zoomBlur" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/zoomBlur"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Zoom Blur"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/zoomBlur"]
texture_filter = 1
material = SubResource("158")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="glowEmpty" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/glowEmpty"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Glow Empty"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/glowEmpty"]
texture_filter = 1
material = SubResource("166")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="innerGlow" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/innerGlow"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Inner Glow"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/innerGlow"]
texture_filter = 1
material = SubResource("172")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="innerGlowEmpty" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/innerGlowEmpty"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Inner Glow
Empty"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/innerGlowEmpty"]
texture_filter = 1
material = SubResource("181")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="outerGlow" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/outerGlow"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Outer Glow"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/outerGlow"]
texture_filter = 1
material = SubResource("188")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="outerGlowEmpty" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/outerGlowEmpty"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Outer Glow
Empty"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/outerGlowEmpty"]
texture_filter = 1
material = SubResource("195")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="checkerboardPattern" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/checkerboardPattern"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Chekerboard
Shape3D"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/checkerboardPattern"]
texture_filter = 1
material = SubResource("200")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="generateCircle" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/generateCircle"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Circle Shape3D"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/generateCircle"]
texture_filter = 1
material = SubResource("218")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="generateCircle2" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/generateCircle2"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Circle Shape3D 2"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/generateCircle2"]
texture_filter = 1
material = SubResource("209")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="regulatNgon" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/regulatNgon"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Regular Ngon
Shape3D"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/regulatNgon"]
texture_filter = 1
material = SubResource("233")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="generateSpiral" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/generateSpiral"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Spiral Shape3D"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/generateSpiral"]
texture_filter = 1
material = SubResource("243")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="scanLinesSharp" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/scanLinesSharp"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Scanlines
Sharp Shape3D"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/scanLinesSharp"]
texture_filter = 1
material = SubResource("252")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="stripesRandom" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/stripesRandom"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Random
Stripes Shape3D"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/stripesRandom"]
texture_filter = 1
material = SubResource("258")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="generic2d" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/generic2d"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Generic 2D
Noise"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/generic2d"]
texture_filter = 1
material = SubResource("263")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="perlin2d" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/perlin2d"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Perlin 2D
Noise"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/perlin2d"]
texture_filter = 1
material = SubResource("269")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="perlin3d" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/perlin3d"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Perlin 3D
Noise"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/perlin3d"]
texture_filter = 1
material = SubResource("275")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="perlinPeriodic3d" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/perlinPeriodic3d"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Perlin 3D
Periodic Noise"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/perlinPeriodic3d"]
texture_filter = 1
material = SubResource("281")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="perlin4d" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/perlin4d"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Perlin 4D
Noise"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/perlin4d"]
texture_filter = 1
material = SubResource("287")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="simplex2d" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/simplex2d"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Simplex 2D
Noise"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/simplex2d"]
texture_filter = 1
material = SubResource("293")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="simplex3d" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/simplex3d"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Simplex 3D
Noise"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/simplex3d"]
texture_filter = 1
material = SubResource("299")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
stretch_mode = 5

[node name="simplex4d" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/simplex4d"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Simplex 4D
Noise"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/simplex4d"]
texture_filter = 1
material = SubResource("305")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="worley2d" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/worley2d"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Worley 2D
Noise"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/worley2d"]
texture_filter = 1
material = SubResource("311")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="worley2x2" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/worley2x2"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Worley 2x2
Noise"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/worley2x2"]
texture_filter = 1
material = SubResource("317")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="worley2x2x2" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/worley2x2x2"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Worley 2x2x2
Noise"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/worley2x2x2"]
texture_filter = 1
material = SubResource("324")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="worley3d" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/worley3d"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Worley 3D
Noise"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/worley3d"]
texture_filter = 1
material = SubResource("330")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="BCSAdjustment" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/BCSAdjustment"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "BCS Adjustment"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/BCSAdjustment"]
texture_filter = 1
material = SubResource("337")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="blackAndWhite" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/blackAndWhite"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Black & White"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/blackAndWhite"]
texture_filter = 1
material = SubResource("341")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="blendAwithB" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/blendAwithB"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Blend A with B"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/blendAwithB"]
texture_filter = 1
material = SubResource("346")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="bloom" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/bloom"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Bloom"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/bloom"]
texture_filter = 1
material = SubResource("350")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="chromaticAberration" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/chromaticAberration"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Chromatic
Aberration"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/chromaticAberration"]
texture_filter = 1
material = SubResource("358")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="clamp" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/clamp"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Clamp Alpha
Border"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/clamp"]
texture_filter = 1
material = SubResource("367")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="colorCorrectionAdjustment" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/colorCorrectionAdjustment"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Color Correction
Adjustment"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/colorCorrectionAdjustment"]
texture_filter = 1
material = SubResource("372")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
stretch_mode = 6

[node name="emboss" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/emboss"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Emboss"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/emboss"]
texture_filter = 1
material = SubResource("379")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="fireFX" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/fireFX"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "FireFX"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/fireFX"]
texture_filter = 1
material = SubResource("393")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="gradient4corners" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/gradient4corners"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Gradient
4-Corners"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/gradient4corners"]
texture_filter = 1
material = SubResource("400")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="gradientMapping" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/gradientMapping"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Gradient Mapping
(+ColorCycling Support)"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/gradientMapping"]
texture_filter = 1
material = SubResource("410")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="grayscale" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/grayscale"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Grayscale+"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/grayscale"]
texture_filter = 1
material = SubResource("415")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="hue" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/hue"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Hue"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/hue"]
texture_filter = 1
material = SubResource("418")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="inverseColor" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/inverseColor"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Inverse Color"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/inverseColor"]
texture_filter = 1
material = SubResource("422")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="maskAlpha" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/maskAlpha"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Mask Alpha"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/maskAlpha"]
texture_filter = 1
material = SubResource("426")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="posterize" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/posterize"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Posterize"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/posterize"]
texture_filter = 1
material = SubResource("430")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="shiftHSV" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/shiftHSV"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Shift HSV"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/shiftHSV"]
texture_filter = 1
material = SubResource("436")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="shineFX" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/shineFX"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Shine FX"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/shineFX"]
texture_filter = 1
material = SubResource("447")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="tintRGBA" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/tintRGBA"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Tint RGBA"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/tintRGBA"]
texture_filter = 1
material = SubResource("451")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="tonemap" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/tonemap"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Tonemap"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/tonemap"]
texture_filter = 1
material = SubResource("456")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="turnCGA4Palette" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/turnCGA4Palette"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "CGA4 Pallete"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/turnCGA4Palette"]
texture_filter = 1
material = SubResource("460")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="turnGBPalette" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/turnGBPalette"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "GameBoy
Pallete"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/turnGBPalette"]
texture_filter = 1
material = SubResource("464")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="generic2d_fractal" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/generic2d_fractal"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Fractal
Generic2D Noise"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/generic2d_fractal"]
texture_filter = 1
material = SubResource("475")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="perlin2d_fractal" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/perlin2d_fractal"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Fractal
Perlin2D Noise"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/perlin2d_fractal"]
texture_filter = 1
material = SubResource("485")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="worley2d_fractal" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/worley2d_fractal"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Fractal
Worley2D Noise"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/worley2d_fractal"]
texture_filter = 1
material = SubResource("498")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="simplex2d_fractal" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/simplex2d_fractal"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Fractal
Simplex2D Noise"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/simplex2d_fractal"]
texture_filter = 1
material = SubResource("509")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="worley3d_fractal" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/worley3d_fractal"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Fractal
Worley3D Noise"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/worley3d_fractal"]
texture_filter = 1
material = SubResource("523")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="perlin3d_fractal" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/perlin3d_fractal"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Fractal
Perlin3D Noise"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/perlin3d_fractal"]
texture_filter = 1
material = SubResource("535")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="simplex3d_fractal" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/simplex3d_fractal"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Fractal
Simplex3D Noise"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/simplex3d_fractal"]
texture_filter = 1
material = SubResource("547")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="perlin4d_fractal" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/perlin4d_fractal"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Fractal
Perlin4D Noise"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/perlin4d_fractal"]
texture_filter = 1
material = SubResource("560")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="simplex4d_fractal" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/simplex4d_fractal"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Fractal
Simplex4D Noise"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/simplex4d_fractal"]
texture_filter = 1
material = SubResource("573")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 4
stretch_mode = 6

[node name="normalFromHeightmap" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/normalFromHeightmap"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Normal From
Heightmap"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/normalFromHeightmap"]
texture_filter = 1
material = SubResource("583")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="coordsTransformation" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/coordsTransformation"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Cartesian Coords To
Polar/Spherical
and back to Cartesian"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/coordsTransformation"]
texture_filter = 1
material = SubResource("590")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="gridShape" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/gridShape"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Grid Shape3D"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/gridShape"]
texture_filter = 1
material = SubResource("599")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="sobelEdge" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/sobelEdge"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Sobel Edge"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/sobelEdge"]
texture_filter = 1
material = SubResource("608")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6
